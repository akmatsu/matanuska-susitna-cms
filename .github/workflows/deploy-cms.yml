name: Deploy CMS to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'apps/cms/**'
      - '.github/workflows/deploy-cms.yml'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    concurrency:
      group: ci-${{github.ref}}
      cancel-in-progress: false
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: ${{secrets.AWS_INSTANCE_SG_ID}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.EC2_DEPLOY_ROLE_ARN}}
          role-session-name: github-actions-deploy-cms-session
          aws-region: us-west-2

      - name: Get runner IP address
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Whitelist GitHub action IP address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{steps.ip.outputs.ipv4}}/32

      - name: Add SSH Key
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1.4.1
        with:
          ssh-private-key: ${{secrets.EC2_SSH_PRIVATE_KEY}}
          ssh-host: ${{secrets.EC2_SERVER_HOST}}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: 'Create Env File'
        run: |
          cat <<EOT > ./apps/cms/.env
          NODE_ENV=production
          DATABASE=${{secrets.DB_NAME}}
          DATABASE_USER=${{secrets.DB_USER}}
          DATABASE_HOST=${{secrets.DB_HOST}}
          DATABASE_PASSWORD=${{secrets.DB_PASSWORD}}
          DATABASE_PORT=5432
          DATABASE_PROVIDER=postgresql
          DATABASE_PROTOCOL=postgres
          WEB_PORT=3333
          ORIGIN_HOST=https://www.matsu.gov
          NEXTAUTH_URL=https://cms.matsu.gov
          SESSION_SECRET=${{secrets.SESSION_SECRET}}
          AD_TENANT_ID=${{secrets.AD_TENANT_ID}}
          AD_CLIENT_ID=${{secrets.AD_CLIENT_ID}}
          AD_CLIENT_SECRET=${{secrets.AD_CLIENT_SECRET}}
          AD_REDIRECT_HOST=https://cms.matsu.gov
          S3_BUCKET_NAME=${{secrets.S3_BUCKET_NAME}}
          S3_REGION=${{secrets.S3_REGION}}
          S3_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}
          S3_SECRET_ACCESS_KEY=${{secrets.S3_SECRET_ACCESS_KEY}}
          TYPESENSE_API_KEY=${{secrets.TYPESENSE_API_KEY}}
          TYPESENSE_HOST=search.matsu.gov
          TYPESENSE_PORT=443
          TYPESENSE_PROTOCOL=https
          GOV_DELIVERY_USERNAME=${{secrets.GOV_DELIVERY_USERNAME}}
          GOV_DELIVERY_PASSWORD=${{secrets.GOV_DELIVERY_PASSWORD}}
          GOV_DELIVERY_SUB_DOMAIN=${{secrets.GOV_DELIVERY_SUB_DOMAIN}}
          GOV_DELIVERY_ACCOUNT_CODE=${{secrets.GOV_DELIVERY_ACCOUNT_CODE}}
          GOV_DELIVERY_FROM_ADDRESS=${{secrets.GOV_DELIVERY_FROM_ADDRESS}}
          EOT

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --filter cms --workspace-root

      - name: Build CMS
        run: pnpm run cms:build

      - name: Zip the required files
        run: zip -rq --symlinks cms.zip ./apps/cms/ ./node_modules/ ./package.json ./pnpm-lock.yaml ./pnpm-workspace.yaml ./turbo.json ./.npmrc

      - name: Upload zipped repo to server
        run: |
          scp cms.zip ${{secrets.EC2_SERVER_USER}}@${{secrets.EC2_SERVER_HOST}}:/home/${{secrets.EC2_SERVER_USER}}/cms

      - name: SSH into the server and deploy
        run: |
          ssh -o ServerAliveInterval=60 ${{secrets.EC2_SERVER_USER}}@${{secrets.EC2_SERVER_HOST}} << 'EOF'
            set -e

            # Create temp and backup directory if they don't exist
            cd cms
            mkdir -p ./active

            # Unzip the files in the temp folder
            unzip -q -o ./cms.zip -d ./temp

            # Stop the pm2 server
            pm2 stop cms

            # Move the active folder to backup
            mv ./active ./backup
            
            # Move the temp folder to active
            mv ./temp ./active
            cd ./active

            # Run database migrations
            pnpm run cms:migrate

            # Start the production server
            pm2 reload cms || pm2 start pnpm --name cms -- run cms:start
            
            # Remove temporary folders.
            rm -rf ../cms.zip
            rm -rf ../backup
          EOF
      - name: Remove GitHub actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{steps.ip.outputs.ipv4}}/32
