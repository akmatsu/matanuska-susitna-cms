# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Alert {
  id: ID!
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AlertWhereUniqueInput {
  id: ID
}

input AlertWhereInput {
  AND: [AlertWhereInput!]
  OR: [AlertWhereInput!]
  NOT: [AlertWhereInput!]
  id: IDFilter
  title: StringFilter
  body: MyStringFilter
  urgency: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  editorNotes: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MyStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: MyQueryMode
  not: NestedMyStringFilter
}

enum MyQueryMode {
  default
  insensitive
}

input NestedMyStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedMyStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AlertOrderByInput {
  id: OrderDirection
  title: OrderDirection
  body: MyOrderDirection
  urgency: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

enum MyOrderDirection {
  asc
  desc
}

input AlertUpdateInput {
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input AlertUpdateArgs {
  where: AlertWhereUniqueInput!
  data: AlertUpdateInput!
}

input AlertCreateInput {
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

type AssemblyDistrict {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  photo: Image
  memberName: String
  bio: String
  address: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
}

input AssemblyDistrictWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input AssemblyDistrictWhereInput {
  AND: [AssemblyDistrictWhereInput!]
  OR: [AssemblyDistrictWhereInput!]
  NOT: [AssemblyDistrictWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  photo: ImageWhereInput
  memberName: StringFilter
  bio: StringFilter
  address: StringFilter
  email: StringNullableFilter
  phone: StringNullableFilter
  fax: StringNullableFilter
  termStart: DateTimeNullableFilter
  termEnd: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input UserGroupManyRelationFilter {
  every: UserGroupWhereInput
  some: UserGroupWhereInput
  none: UserGroupWhereInput
}

input ContactManyRelationFilter {
  every: ContactWhereInput
  some: ContactWhereInput
  none: ContactWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input AssemblyDistrictOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  memberName: OrderDirection
  bio: OrderDirection
  address: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  termStart: OrderDirection
  termEnd: OrderDirection
}

enum BlueHarvestImageOrderDirection {
  asc
  desc
}

input AssemblyDistrictUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForUpdateInput
  memberName: String
  bio: String
  address: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserGroupRelateToManyForUpdateInput {
  disconnect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input ContactRelateToManyForUpdateInput {
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input AssemblyDistrictUpdateArgs {
  where: AssemblyDistrictWhereUniqueInput!
  data: AssemblyDistrictUpdateInput!
}

input AssemblyDistrictCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForCreateInput
  memberName: String
  bio: String
  address: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserGroupRelateToManyForCreateInput {
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input ContactRelateToManyForCreateInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Community {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  mapId: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
}

input CommunityWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  NOT: [CommunityWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  mapId: StringFilter
  services: ServiceManyRelationFilter
  districts: AssemblyDistrictManyRelationFilter
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input AssemblyDistrictManyRelationFilter {
  every: AssemblyDistrictWhereInput
  some: AssemblyDistrictWhereInput
  none: AssemblyDistrictWhereInput
}

input CommunityOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  mapId: OrderDirection
}

input CommunityUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  mapId: String
  services: ServiceRelateToManyForUpdateInput
  districts: AssemblyDistrictRelateToManyForUpdateInput
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input AssemblyDistrictRelateToManyForUpdateInput {
  disconnect: [AssemblyDistrictWhereUniqueInput!]
  set: [AssemblyDistrictWhereUniqueInput!]
  create: [AssemblyDistrictCreateInput!]
  connect: [AssemblyDistrictWhereUniqueInput!]
}

input CommunityUpdateArgs {
  where: CommunityWhereUniqueInput!
  data: CommunityUpdateInput!
}

input CommunityCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  mapId: String
  services: ServiceRelateToManyForCreateInput
  districts: AssemblyDistrictRelateToManyForCreateInput
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input AssemblyDistrictRelateToManyForCreateInput {
  create: [AssemblyDistrictCreateInput!]
  connect: [AssemblyDistrictWhereUniqueInput!]
}

type Contact {
  id: ID!
  name: String
  title: String
  phone: String
  email: String
  primaryServices(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  primaryServicesCount(where: ServiceWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  user: User
  editorNotes: String
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringNullableFilter
  phone: StringNullableFilter
  email: StringNullableFilter
  primaryServices: ServiceManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  facilities: FacilityManyRelationFilter
  parks: ParkManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  trails: TrailManyRelationFilter
  user: UserWhereInput
  editorNotes: StringFilter
  publicNotices: PublicNoticeManyRelationFilter
}

input CommunityManyRelationFilter {
  every: CommunityWhereInput
  some: CommunityWhereInput
  none: CommunityWhereInput
}

input OrgUnitManyRelationFilter {
  every: OrgUnitWhereInput
  some: OrgUnitWhereInput
  none: OrgUnitWhereInput
}

input FacilityManyRelationFilter {
  every: FacilityWhereInput
  some: FacilityWhereInput
  none: FacilityWhereInput
}

input ParkManyRelationFilter {
  every: ParkWhereInput
  some: ParkWhereInput
  none: ParkWhereInput
}

input TrailManyRelationFilter {
  every: TrailWhereInput
  some: TrailWhereInput
  none: TrailWhereInput
}

input PublicNoticeManyRelationFilter {
  every: PublicNoticeWhereInput
  some: PublicNoticeWhereInput
  none: PublicNoticeWhereInput
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  editorNotes: OrderDirection
}

input ContactUpdateInput {
  name: String
  title: String
  phone: String
  email: String
  primaryServices: ServiceRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  editorNotes: String
  publicNotices: PublicNoticeRelateToManyForUpdateInput
}

input CommunityRelateToManyForUpdateInput {
  disconnect: [CommunityWhereUniqueInput!]
  set: [CommunityWhereUniqueInput!]
  create: [CommunityCreateInput!]
  connect: [CommunityWhereUniqueInput!]
}

input OrgUnitRelateToManyForUpdateInput {
  disconnect: [OrgUnitWhereUniqueInput!]
  set: [OrgUnitWhereUniqueInput!]
  create: [OrgUnitCreateInput!]
  connect: [OrgUnitWhereUniqueInput!]
}

input FacilityRelateToManyForUpdateInput {
  disconnect: [FacilityWhereUniqueInput!]
  set: [FacilityWhereUniqueInput!]
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input ParkRelateToManyForUpdateInput {
  disconnect: [ParkWhereUniqueInput!]
  set: [ParkWhereUniqueInput!]
  create: [ParkCreateInput!]
  connect: [ParkWhereUniqueInput!]
}

input TrailRelateToManyForUpdateInput {
  disconnect: [TrailWhereUniqueInput!]
  set: [TrailWhereUniqueInput!]
  create: [TrailCreateInput!]
  connect: [TrailWhereUniqueInput!]
}

input PublicNoticeRelateToManyForUpdateInput {
  disconnect: [PublicNoticeWhereUniqueInput!]
  set: [PublicNoticeWhereUniqueInput!]
  create: [PublicNoticeCreateInput!]
  connect: [PublicNoticeWhereUniqueInput!]
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  title: String
  phone: String
  email: String
  primaryServices: ServiceRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  editorNotes: String
  publicNotices: PublicNoticeRelateToManyForCreateInput
}

input CommunityRelateToManyForCreateInput {
  create: [CommunityCreateInput!]
  connect: [CommunityWhereUniqueInput!]
}

input OrgUnitRelateToManyForCreateInput {
  create: [OrgUnitCreateInput!]
  connect: [OrgUnitWhereUniqueInput!]
}

input FacilityRelateToManyForCreateInput {
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input ParkRelateToManyForCreateInput {
  create: [ParkCreateInput!]
  connect: [ParkWhereUniqueInput!]
}

input TrailRelateToManyForCreateInput {
  create: [TrailCreateInput!]
  connect: [TrailWhereUniqueInput!]
}

input PublicNoticeRelateToManyForCreateInput {
  create: [PublicNoticeCreateInput!]
  connect: [PublicNoticeWhereUniqueInput!]
}

type Document {
  id: ID!
  title: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  file: FileFieldOutput
  collections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  collectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  editorNotes: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
  collections: DocumentCollectionManyRelationFilter
  editorNotes: StringFilter
}

input DocumentCollectionManyRelationFilter {
  every: DocumentCollectionWhereInput
  some: DocumentCollectionWhereInput
  none: DocumentCollectionWhereInput
}

input DocumentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  editorNotes: OrderDirection
}

input DocumentUpdateInput {
  title: String
  description: String
  tags: TagRelateToManyForUpdateInput
  file: FileFieldInput
  collections: DocumentCollectionRelateToManyForUpdateInput
  editorNotes: String
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DocumentCollectionRelateToManyForUpdateInput {
  disconnect: [DocumentCollectionWhereUniqueInput!]
  set: [DocumentCollectionWhereUniqueInput!]
  create: [DocumentCollectionCreateInput!]
  connect: [DocumentCollectionWhereUniqueInput!]
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  title: String
  description: String
  tags: TagRelateToManyForCreateInput
  file: FileFieldInput
  collections: DocumentCollectionRelateToManyForCreateInput
  editorNotes: String
}

input DocumentCollectionRelateToManyForCreateInput {
  create: [DocumentCollectionCreateInput!]
  connect: [DocumentCollectionWhereUniqueInput!]
}

type DocumentCollection {
  id: ID!
  title: String
  owner: User
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  liveUrl: String
  embed: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  editorNotes: String
  referencedBy: [Service]
}

input DocumentCollectionWhereUniqueInput {
  id: ID
}

input DocumentCollectionWhereInput {
  AND: [DocumentCollectionWhereInput!]
  OR: [DocumentCollectionWhereInput!]
  NOT: [DocumentCollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  owner: UserWhereInput
  documents: DocumentManyRelationFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  editorNotes: StringFilter
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input DocumentCollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  editorNotes: OrderDirection
}

input DocumentCollectionUpdateInput {
  title: String
  owner: UserRelateToOneForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  editorNotes: String
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCollectionUpdateArgs {
  where: DocumentCollectionWhereUniqueInput!
  data: DocumentCollectionUpdateInput!
}

input DocumentCollectionCreateInput {
  title: String
  owner: UserRelateToOneForCreateInput
  documents: DocumentRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  editorNotes: String
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

type ExternalLink {
  id: ID!
  label: String
  url: Url
}

input ExternalLinkWhereUniqueInput {
  id: ID
}

input ExternalLinkWhereInput {
  AND: [ExternalLinkWhereInput!]
  OR: [ExternalLinkWhereInput!]
  NOT: [ExternalLinkWhereInput!]
  id: IDFilter
  label: StringFilter
  url: UrlWhereInput
}

input ExternalLinkOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input ExternalLinkUpdateInput {
  label: String
  url: UrlRelateToOneForUpdateInput
}

input UrlRelateToOneForUpdateInput {
  create: UrlCreateInput
  connect: UrlWhereUniqueInput
  disconnect: Boolean
}

input ExternalLinkUpdateArgs {
  where: ExternalLinkWhereUniqueInput!
  data: ExternalLinkUpdateInput!
}

input ExternalLinkCreateInput {
  label: String
  url: UrlRelateToOneForCreateInput
}

input UrlRelateToOneForCreateInput {
  create: UrlCreateInput
  connect: UrlWhereUniqueInput
}

type Facility {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
}

input FacilityWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input FacilityWhereInput {
  AND: [FacilityWhereInput!]
  OR: [FacilityWhereInput!]
  NOT: [FacilityWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
}

input OperatingHourManyRelationFilter {
  every: OperatingHourWhereInput
  some: OperatingHourWhereInput
  none: OperatingHourWhereInput
}

input FacilityOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FacilityUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input OperatingHourRelateToManyForUpdateInput {
  disconnect: [OperatingHourWhereUniqueInput!]
  set: [OperatingHourWhereUniqueInput!]
  create: [OperatingHourCreateInput!]
  connect: [OperatingHourWhereUniqueInput!]
}

input ParkRelateToOneForUpdateInput {
  create: ParkCreateInput
  connect: ParkWhereUniqueInput
  disconnect: Boolean
}

input FacilityUpdateArgs {
  where: FacilityWhereUniqueInput!
  data: FacilityUpdateInput!
}

input FacilityCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input OperatingHourRelateToManyForCreateInput {
  create: [OperatingHourCreateInput!]
  connect: [OperatingHourWhereUniqueInput!]
}

input ParkRelateToOneForCreateInput {
  create: ParkCreateInput
  connect: ParkWhereUniqueInput
}

type Highlight {
  id: ID!
  title: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  image: String
  message: String
  linkedItem: InternalLink
  editorNotes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HighlightWhereUniqueInput {
  id: ID
  title: String
}

input HighlightWhereInput {
  AND: [HighlightWhereInput!]
  OR: [HighlightWhereInput!]
  NOT: [HighlightWhereInput!]
  id: IDFilter
  title: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  message: StringFilter
  linkedItem: InternalLinkWhereInput
  editorNotes: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HighlightOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  image: BlueHarvestImageOrderDirection
  message: OrderDirection
  editorNotes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HighlightUpdateInput {
  title: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  image: String
  message: String
  linkedItem: InternalLinkRelateToOneForUpdateInput
  editorNotes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input InternalLinkRelateToOneForUpdateInput {
  create: InternalLinkCreateInput
  connect: InternalLinkWhereUniqueInput
  disconnect: Boolean
}

input HighlightUpdateArgs {
  where: HighlightWhereUniqueInput!
  data: HighlightUpdateInput!
}

input HighlightCreateInput {
  title: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  image: String
  message: String
  linkedItem: InternalLinkRelateToOneForCreateInput
  editorNotes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input InternalLinkRelateToOneForCreateInput {
  create: InternalLinkCreateInput
  connect: InternalLinkWhereUniqueInput
}

type HomePage {
  id: ID!
  heroImage: String
  title: String
  description: String
  toolbeltOne: Highlight
  toolbeltTwo: Highlight
  toolbeltThree: Highlight
  toolbeltFour: Highlight
  highlightOne: Highlight
  highlightTwo: Highlight
  highlightThree: Highlight
  createdAt: DateTime
  updatedAt: DateTime
}

input HomePageWhereUniqueInput {
  id: ID
  title: String
}

input HomePageWhereInput {
  AND: [HomePageWhereInput!]
  OR: [HomePageWhereInput!]
  NOT: [HomePageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  toolbeltOne: HighlightWhereInput
  toolbeltTwo: HighlightWhereInput
  toolbeltThree: HighlightWhereInput
  toolbeltFour: HighlightWhereInput
  highlightOne: HighlightWhereInput
  highlightTwo: HighlightWhereInput
  highlightThree: HighlightWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HomePageOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HomePageUpdateInput {
  heroImage: String
  title: String
  description: String
  toolbeltOne: HighlightRelateToOneForUpdateInput
  toolbeltTwo: HighlightRelateToOneForUpdateInput
  toolbeltThree: HighlightRelateToOneForUpdateInput
  toolbeltFour: HighlightRelateToOneForUpdateInput
  highlightOne: HighlightRelateToOneForUpdateInput
  highlightTwo: HighlightRelateToOneForUpdateInput
  highlightThree: HighlightRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HighlightRelateToOneForUpdateInput {
  create: HighlightCreateInput
  connect: HighlightWhereUniqueInput
  disconnect: Boolean
}

input HomePageUpdateArgs {
  where: HomePageWhereUniqueInput! = {id: 1}
  data: HomePageUpdateInput!
}

input HomePageCreateInput {
  heroImage: String
  title: String
  description: String
  toolbeltOne: HighlightRelateToOneForCreateInput
  toolbeltTwo: HighlightRelateToOneForCreateInput
  toolbeltThree: HighlightRelateToOneForCreateInput
  toolbeltFour: HighlightRelateToOneForCreateInput
  highlightOne: HighlightRelateToOneForCreateInput
  highlightTwo: HighlightRelateToOneForCreateInput
  highlightThree: HighlightRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HighlightRelateToOneForCreateInput {
  create: HighlightCreateInput
  connect: HighlightWhereUniqueInput
}

type Image {
  id: ID!
  title: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  file: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
  title: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input ImageUpdateInput {
  title: String
  description: String
  tags: TagRelateToManyForUpdateInput
  file: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  description: String
  tags: TagRelateToManyForCreateInput
  file: ImageFieldInput
}

type InternalLink {
  id: ID!
  label: String
  selectItem: JSON
  item: LinkedItemUnion
}

union LinkedItemUnion = Service | Park | Trail | Facility | Community | AssemblyDistrict | OrgUnit | Url

input InternalLinkWhereUniqueInput {
  id: ID
}

input InternalLinkWhereInput {
  AND: [InternalLinkWhereInput!]
  OR: [InternalLinkWhereInput!]
  NOT: [InternalLinkWhereInput!]
  id: IDFilter
  label: StringFilter
}

input InternalLinkOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input InternalLinkUpdateInput {
  label: String
  selectItem: JSON
}

input InternalLinkUpdateArgs {
  where: InternalLinkWhereUniqueInput!
  data: InternalLinkUpdateInput!
}

input InternalLinkCreateInput {
  label: String
  selectItem: JSON
}

type Location {
  id: ID!
  title: String
  description: String
  lineOne: String
  lineTwo: String
  city: String
  state: String
  zip: String
}

input LocationWhereUniqueInput {
  id: ID
  title: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  lineOne: StringFilter
  lineTwo: StringFilter
  city: StringFilter
  state: StringFilter
  zip: StringFilter
}

input LocationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  lineOne: OrderDirection
  lineTwo: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zip: OrderDirection
}

input LocationUpdateInput {
  title: String
  description: String
  lineOne: String
  lineTwo: String
  city: String
  state: String
  zip: String
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  title: String
  description: String
  lineOne: String
  lineTwo: String
  city: String
  state: String
  zip: String
}

type OrgUnit {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  children(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  childrenCount(where: OrgUnitWhereInput! = {}): Int
  parent: OrgUnit
}

input OrgUnitWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input OrgUnitWhereInput {
  AND: [OrgUnitWhereInput!]
  OR: [OrgUnitWhereInput!]
  NOT: [OrgUnitWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  showPage: BooleanFilter
  services: ServiceManyRelationFilter
  children: OrgUnitManyRelationFilter
  parent: OrgUnitWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input OrgUnitOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  showPage: OrderDirection
}

input OrgUnitUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForUpdateInput
  children: OrgUnitRelateToManyForUpdateInput
  parent: OrgUnitRelateToOneForUpdateInput
}

input OrgUnitRelateToOneForUpdateInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
  disconnect: Boolean
}

input OrgUnitUpdateArgs {
  where: OrgUnitWhereUniqueInput!
  data: OrgUnitUpdateInput!
}

input OrgUnitCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForCreateInput
  children: OrgUnitRelateToManyForCreateInput
  parent: OrgUnitRelateToOneForCreateInput
}

input OrgUnitRelateToOneForCreateInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
}

type OperatingHour {
  id: ID!
  day: String
  open: String
  close: String
}

input OperatingHourWhereUniqueInput {
  id: ID
}

input OperatingHourWhereInput {
  AND: [OperatingHourWhereInput!]
  OR: [OperatingHourWhereInput!]
  NOT: [OperatingHourWhereInput!]
  id: IDFilter
  day: StringFilter
  open: StringFilter
  close: StringFilter
}

input OperatingHourOrderByInput {
  id: OrderDirection
  day: OrderDirection
  open: OrderDirection
  close: OrderDirection
}

input OperatingHourUpdateInput {
  day: String
  open: String
  close: String
}

input OperatingHourUpdateArgs {
  where: OperatingHourWhereUniqueInput!
  data: OperatingHourUpdateInput!
}

input OperatingHourCreateInput {
  day: String
  open: String
  close: String
}

type Park {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
}

input ParkWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input ParkWhereInput {
  AND: [ParkWhereInput!]
  OR: [ParkWhereInput!]
  NOT: [ParkWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
}

input ParkOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ParkUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
}

input ParkUpdateArgs {
  where: ParkWhereUniqueInput!
  data: ParkUpdateInput!
}

input ParkCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
}

type PublicNotice {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions: InternalLink
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
}

input PublicNoticeWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input PublicNoticeWhereInput {
  AND: [PublicNoticeWhereInput!]
  OR: [PublicNoticeWhereInput!]
  NOT: [PublicNoticeWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkWhereInput
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  urgency: IntFilter
  effectiveDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  parks: ParkManyRelationFilter
  services: ServiceManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  facilities: FacilityManyRelationFilter
  trails: TrailManyRelationFilter
  communities: CommunityManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
}

input PublicNoticeOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  urgency: OrderDirection
  effectiveDate: OrderDirection
  endDate: OrderDirection
}

input PublicNoticeUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToOneForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
}

input PublicNoticeUpdateArgs {
  where: PublicNoticeWhereUniqueInput!
  data: PublicNoticeUpdateInput!
}

input PublicNoticeCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToOneForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
}

type Service {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  primaryAction: ExternalLink
  secondaryActions(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  secondaryActionsCount(where: ExternalLinkWhereInput! = {}): Int
  primaryContact: Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  editorNotes: String
}

input ServiceWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  primaryAction: ExternalLinkWhereInput
  secondaryActions: ExternalLinkManyRelationFilter
  primaryContact: ContactWhereInput
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  trails: TrailManyRelationFilter
  parks: ParkManyRelationFilter
  facilities: FacilityManyRelationFilter
  editorNotes: StringFilter
}

input ExternalLinkManyRelationFilter {
  every: ExternalLinkWhereInput
  some: ExternalLinkWhereInput
  none: ExternalLinkWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
}

input ServiceUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  primaryAction: ExternalLinkRelateToOneForUpdateInput
  secondaryActions: ExternalLinkRelateToManyForUpdateInput
  primaryContact: ContactRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  editorNotes: String
}

input ExternalLinkRelateToOneForUpdateInput {
  create: ExternalLinkCreateInput
  connect: ExternalLinkWhereUniqueInput
  disconnect: Boolean
}

input ExternalLinkRelateToManyForUpdateInput {
  disconnect: [ExternalLinkWhereUniqueInput!]
  set: [ExternalLinkWhereUniqueInput!]
  create: [ExternalLinkCreateInput!]
  connect: [ExternalLinkWhereUniqueInput!]
}

input ContactRelateToOneForUpdateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
  disconnect: Boolean
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  primaryAction: ExternalLinkRelateToOneForCreateInput
  secondaryActions: ExternalLinkRelateToManyForCreateInput
  primaryContact: ContactRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  editorNotes: String
}

input ExternalLinkRelateToOneForCreateInput {
  create: ExternalLinkCreateInput
  connect: ExternalLinkWhereUniqueInput
}

input ExternalLinkRelateToManyForCreateInput {
  create: [ExternalLinkCreateInput!]
  connect: [ExternalLinkWhereUniqueInput!]
}

input ContactRelateToOneForCreateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  documents: DocumentManyRelationFilter
  images: ImageManyRelationFilter
  documentCollections: DocumentCollectionManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  facilities: FacilityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  images: ImageRelateToManyForUpdateInput
  documentCollections: DocumentCollectionRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  images: ImageRelateToManyForCreateInput
  documentCollections: DocumentCollectionRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Trail {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
}

input TrailWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input TrailWhereInput {
  AND: [TrailWhereInput!]
  OR: [TrailWhereInput!]
  NOT: [TrailWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  open: BooleanFilter
  summer: BooleanFilter
  fall: BooleanFilter
  winter: BooleanFilter
  spring: BooleanFilter
  hiking: BooleanFilter
  biking: BooleanFilter
  horsebackRiding: BooleanFilter
  crossCountrySkiing: BooleanFilter
  snowshoeing: BooleanFilter
  frisbeeGolf: BooleanFilter
  dogWalking: BooleanFilter
  running: BooleanFilter
  snowMachining: BooleanFilter
  atv: BooleanFilter
  dirtBiking: BooleanFilter
  mushing: BooleanFilter
  difficulty: StringNullableFilter
  length: StringFilter
  elevationChange: StringFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
}

input TrailOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  open: OrderDirection
  summer: OrderDirection
  fall: OrderDirection
  winter: OrderDirection
  spring: OrderDirection
  hiking: OrderDirection
  biking: OrderDirection
  horsebackRiding: OrderDirection
  crossCountrySkiing: OrderDirection
  snowshoeing: OrderDirection
  frisbeeGolf: OrderDirection
  dogWalking: OrderDirection
  running: OrderDirection
  snowMachining: OrderDirection
  atv: OrderDirection
  dirtBiking: OrderDirection
  mushing: OrderDirection
  difficulty: OrderDirection
  length: OrderDirection
  elevationChange: OrderDirection
}

input TrailUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
}

input TrailUpdateArgs {
  where: TrailWhereUniqueInput!
  data: TrailUpdateInput!
}

input TrailCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
}

type Url {
  id: ID!
  title: String
  description: String
  url: String
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input UrlWhereUniqueInput {
  id: ID
  title: String
  url: String
}

input UrlWhereInput {
  AND: [UrlWhereInput!]
  OR: [UrlWhereInput!]
  NOT: [UrlWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  url: StringFilter
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UrlOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UrlUpdateInput {
  title: String
  description: String
  url: String
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UrlUpdateArgs {
  where: UrlWhereUniqueInput!
  data: UrlUpdateInput!
}

input UrlCreateInput {
  title: String
  description: String
  url: String
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  id: ID!
  authId: String
  name: String
  email: String
  password: PasswordState
  contact: Contact
  role: Int
  groups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  groupsCount(where: UserGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  authId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  authId: StringFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  contact: ContactWhereInput
  role: IntNullableFilter
  groups: UserGroupManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  authId: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  authId: String
  name: String
  email: String
  password: String
  contact: ContactRelateToOneForUpdateInput
  role: Int
  groups: UserGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  authId: String
  name: String
  email: String
  password: String
  contact: ContactRelateToOneForCreateInput
  role: Int
  groups: UserGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type UserGroup {
  id: ID!
  name: String
  owner: User
  description: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
}

input UserGroupWhereUniqueInput {
  id: ID
}

input UserGroupWhereInput {
  AND: [UserGroupWhereInput!]
  OR: [UserGroupWhereInput!]
  NOT: [UserGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  owner: UserWhereInput
  description: StringFilter
  users: UserManyRelationFilter
  services: ServiceManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  documentCollections: DocumentCollectionManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input UserGroupUpdateInput {
  name: String
  owner: UserRelateToOneForUpdateInput
  description: String
  users: UserRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  documentCollections: DocumentCollectionRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserGroupUpdateArgs {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateInput!
}

input UserGroupCreateInput {
  name: String
  owner: UserRelateToOneForCreateInput
  description: String
  users: UserRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  documentCollections: DocumentCollectionRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAlert(data: AlertCreateInput!): Alert
  createAlerts(data: [AlertCreateInput!]!): [Alert]
  updateAlert(where: AlertWhereUniqueInput!, data: AlertUpdateInput!): Alert
  updateAlerts(data: [AlertUpdateArgs!]!): [Alert]
  deleteAlert(where: AlertWhereUniqueInput!): Alert
  deleteAlerts(where: [AlertWhereUniqueInput!]!): [Alert]
  createAssemblyDistrict(data: AssemblyDistrictCreateInput!): AssemblyDistrict
  createAssemblyDistricts(data: [AssemblyDistrictCreateInput!]!): [AssemblyDistrict]
  updateAssemblyDistrict(where: AssemblyDistrictWhereUniqueInput!, data: AssemblyDistrictUpdateInput!): AssemblyDistrict
  updateAssemblyDistricts(data: [AssemblyDistrictUpdateArgs!]!): [AssemblyDistrict]
  deleteAssemblyDistrict(where: AssemblyDistrictWhereUniqueInput!): AssemblyDistrict
  deleteAssemblyDistricts(where: [AssemblyDistrictWhereUniqueInput!]!): [AssemblyDistrict]
  createCommunity(data: CommunityCreateInput!): Community
  createCommunities(data: [CommunityCreateInput!]!): [Community]
  updateCommunity(where: CommunityWhereUniqueInput!, data: CommunityUpdateInput!): Community
  updateCommunities(data: [CommunityUpdateArgs!]!): [Community]
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteCommunities(where: [CommunityWhereUniqueInput!]!): [Community]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(where: ContactWhereUniqueInput!, data: ContactUpdateInput!): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createDocumentCollection(data: DocumentCollectionCreateInput!): DocumentCollection
  createDocumentCollections(data: [DocumentCollectionCreateInput!]!): [DocumentCollection]
  updateDocumentCollection(where: DocumentCollectionWhereUniqueInput!, data: DocumentCollectionUpdateInput!): DocumentCollection
  updateDocumentCollections(data: [DocumentCollectionUpdateArgs!]!): [DocumentCollection]
  deleteDocumentCollection(where: DocumentCollectionWhereUniqueInput!): DocumentCollection
  deleteDocumentCollections(where: [DocumentCollectionWhereUniqueInput!]!): [DocumentCollection]
  createExternalLink(data: ExternalLinkCreateInput!): ExternalLink
  createExternalLinks(data: [ExternalLinkCreateInput!]!): [ExternalLink]
  updateExternalLink(where: ExternalLinkWhereUniqueInput!, data: ExternalLinkUpdateInput!): ExternalLink
  updateExternalLinks(data: [ExternalLinkUpdateArgs!]!): [ExternalLink]
  deleteExternalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  deleteExternalLinks(where: [ExternalLinkWhereUniqueInput!]!): [ExternalLink]
  createFacility(data: FacilityCreateInput!): Facility
  createFacilities(data: [FacilityCreateInput!]!): [Facility]
  updateFacility(where: FacilityWhereUniqueInput!, data: FacilityUpdateInput!): Facility
  updateFacilities(data: [FacilityUpdateArgs!]!): [Facility]
  deleteFacility(where: FacilityWhereUniqueInput!): Facility
  deleteFacilities(where: [FacilityWhereUniqueInput!]!): [Facility]
  createHighlight(data: HighlightCreateInput!): Highlight
  createHighlights(data: [HighlightCreateInput!]!): [Highlight]
  updateHighlight(where: HighlightWhereUniqueInput!, data: HighlightUpdateInput!): Highlight
  updateHighlights(data: [HighlightUpdateArgs!]!): [Highlight]
  deleteHighlight(where: HighlightWhereUniqueInput!): Highlight
  deleteHighlights(where: [HighlightWhereUniqueInput!]!): [Highlight]
  createHomePage(data: HomePageCreateInput!): HomePage
  createHomePages(data: [HomePageCreateInput!]!): [HomePage]
  updateHomePage(where: HomePageWhereUniqueInput! = {id: 1}, data: HomePageUpdateInput!): HomePage
  updateHomePages(data: [HomePageUpdateArgs!]!): [HomePage]
  deleteHomePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  deleteHomePages(where: [HomePageWhereUniqueInput!]!): [HomePage]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createInternalLink(data: InternalLinkCreateInput!): InternalLink
  createInternalLinks(data: [InternalLinkCreateInput!]!): [InternalLink]
  updateInternalLink(where: InternalLinkWhereUniqueInput!, data: InternalLinkUpdateInput!): InternalLink
  updateInternalLinks(data: [InternalLinkUpdateArgs!]!): [InternalLink]
  deleteInternalLink(where: InternalLinkWhereUniqueInput!): InternalLink
  deleteInternalLinks(where: [InternalLinkWhereUniqueInput!]!): [InternalLink]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createOrgUnit(data: OrgUnitCreateInput!): OrgUnit
  createOrgUnits(data: [OrgUnitCreateInput!]!): [OrgUnit]
  updateOrgUnit(where: OrgUnitWhereUniqueInput!, data: OrgUnitUpdateInput!): OrgUnit
  updateOrgUnits(data: [OrgUnitUpdateArgs!]!): [OrgUnit]
  deleteOrgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  deleteOrgUnits(where: [OrgUnitWhereUniqueInput!]!): [OrgUnit]
  createOperatingHour(data: OperatingHourCreateInput!): OperatingHour
  createOperatingHours(data: [OperatingHourCreateInput!]!): [OperatingHour]
  updateOperatingHour(where: OperatingHourWhereUniqueInput!, data: OperatingHourUpdateInput!): OperatingHour
  updateOperatingHours(data: [OperatingHourUpdateArgs!]!): [OperatingHour]
  deleteOperatingHour(where: OperatingHourWhereUniqueInput!): OperatingHour
  deleteOperatingHours(where: [OperatingHourWhereUniqueInput!]!): [OperatingHour]
  createPark(data: ParkCreateInput!): Park
  createParks(data: [ParkCreateInput!]!): [Park]
  updatePark(where: ParkWhereUniqueInput!, data: ParkUpdateInput!): Park
  updateParks(data: [ParkUpdateArgs!]!): [Park]
  deletePark(where: ParkWhereUniqueInput!): Park
  deleteParks(where: [ParkWhereUniqueInput!]!): [Park]
  createPublicNotice(data: PublicNoticeCreateInput!): PublicNotice
  createPublicNotices(data: [PublicNoticeCreateInput!]!): [PublicNotice]
  updatePublicNotice(where: PublicNoticeWhereUniqueInput!, data: PublicNoticeUpdateInput!): PublicNotice
  updatePublicNotices(data: [PublicNoticeUpdateArgs!]!): [PublicNotice]
  deletePublicNotice(where: PublicNoticeWhereUniqueInput!): PublicNotice
  deletePublicNotices(where: [PublicNoticeWhereUniqueInput!]!): [PublicNotice]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createTrail(data: TrailCreateInput!): Trail
  createTrails(data: [TrailCreateInput!]!): [Trail]
  updateTrail(where: TrailWhereUniqueInput!, data: TrailUpdateInput!): Trail
  updateTrails(data: [TrailUpdateArgs!]!): [Trail]
  deleteTrail(where: TrailWhereUniqueInput!): Trail
  deleteTrails(where: [TrailWhereUniqueInput!]!): [Trail]
  createUrl(data: UrlCreateInput!): Url
  createUrls(data: [UrlCreateInput!]!): [Url]
  updateUrl(where: UrlWhereUniqueInput!, data: UrlUpdateInput!): Url
  updateUrls(data: [UrlUpdateArgs!]!): [Url]
  deleteUrl(where: UrlWhereUniqueInput!): Url
  deleteUrls(where: [UrlWhereUniqueInput!]!): [Url]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserGroup(data: UserGroupCreateInput!): UserGroup
  createUserGroups(data: [UserGroupCreateInput!]!): [UserGroup]
  updateUserGroup(where: UserGroupWhereUniqueInput!, data: UserGroupUpdateInput!): UserGroup
  updateUserGroups(data: [UserGroupUpdateArgs!]!): [UserGroup]
  deleteUserGroup(where: UserGroupWhereUniqueInput!): UserGroup
  deleteUserGroups(where: [UserGroupWhereUniqueInput!]!): [UserGroup]
  endSession: Boolean!
}

type Query {
  alert(where: AlertWhereUniqueInput!): Alert
  alerts(where: AlertWhereInput! = {}, orderBy: [AlertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AlertWhereUniqueInput): [Alert!]
  alertsCount(where: AlertWhereInput! = {}): Int
  assemblyDistrict(where: AssemblyDistrictWhereUniqueInput!): AssemblyDistrict
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  community(where: CommunityWhereUniqueInput!): Community
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  document(where: DocumentWhereUniqueInput!): Document
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  documentCollection(where: DocumentCollectionWhereUniqueInput!): DocumentCollection
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  externalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  externalLinks(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  externalLinksCount(where: ExternalLinkWhereInput! = {}): Int
  facility(where: FacilityWhereUniqueInput!): Facility
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  highlight(where: HighlightWhereUniqueInput!): Highlight
  highlights(where: HighlightWhereInput! = {}, orderBy: [HighlightOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: HighlightWhereUniqueInput): [Highlight!]
  highlightsCount(where: HighlightWhereInput! = {}): Int
  homePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  homePages(where: HomePageWhereInput! = {id: {equals: 1}}, orderBy: [HomePageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomePageWhereUniqueInput): [HomePage!]
  homePagesCount(where: HomePageWhereInput! = {id: {equals: 1}}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  internalLink(where: InternalLinkWhereUniqueInput!): InternalLink
  internalLinks(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  internalLinksCount(where: InternalLinkWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  orgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  operatingHour(where: OperatingHourWhereUniqueInput!): OperatingHour
  operatingHours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  operatingHoursCount(where: OperatingHourWhereInput! = {}): Int
  park(where: ParkWhereUniqueInput!): Park
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  publicNotice(where: PublicNoticeWhereUniqueInput!): PublicNotice
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  trail(where: TrailWhereUniqueInput!): Trail
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  url(where: UrlWhereUniqueInput!): Url
  urls(where: UrlWhereInput! = {}, orderBy: [UrlOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UrlWhereUniqueInput): [Url!]
  urlsCount(where: UrlWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  userGroup(where: UserGroupWhereUniqueInput!): UserGroup
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
