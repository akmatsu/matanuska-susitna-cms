# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type BoardPage implements BasePage {
  id: ID!
  heroImage: String
  title: String
  description: String
  owner: User
  body: String
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  vacancyReport: Document
  applicationForm: Document
  ParliTrainingLink: ExternalLink
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BoardPageWhereUniqueInput {
  id: ID
  title: String
}

input BoardPageWhereInput {
  AND: [BoardPageWhereInput!]
  OR: [BoardPageWhereInput!]
  NOT: [BoardPageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  vacancyReport: DocumentWhereInput
  applicationForm: DocumentWhereInput
  ParliTrainingLink: ExternalLinkWhereInput
  contacts: ContactManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MyStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: MyQueryMode
  not: NestedMyStringFilter
}

enum MyQueryMode {
  default
  insensitive
}

input NestedMyStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedMyStringFilter
}

input InternalLinkManyRelationFilter {
  every: InternalLinkWhereInput
  some: InternalLinkWhereInput
  none: InternalLinkWhereInput
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input ContactManyRelationFilter {
  every: ContactWhereInput
  some: ContactWhereInput
  none: ContactWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BoardPageOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

enum BlueHarvestImageOrderDirection {
  asc
  desc
}

enum MyOrderDirection {
  asc
  desc
}

input BoardPageUpdateInput {
  heroImage: String
  title: String
  description: String
  owner: UserRelateToOneForUpdateInput
  body: String
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  vacancyReport: DocumentRelateToOneForUpdateInput
  applicationForm: DocumentRelateToOneForUpdateInput
  ParliTrainingLink: ExternalLinkRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input InternalLinkRelateToManyForUpdateInput {
  disconnect: [InternalLinkWhereUniqueInput!]
  set: [InternalLinkWhereUniqueInput!]
  create: [InternalLinkCreateInput!]
  connect: [InternalLinkWhereUniqueInput!]
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentRelateToOneForUpdateInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
  disconnect: Boolean
}

input ExternalLinkRelateToOneForUpdateInput {
  create: ExternalLinkCreateInput
  connect: ExternalLinkWhereUniqueInput
  disconnect: Boolean
}

input ContactRelateToManyForUpdateInput {
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input BoardPageUpdateArgs {
  where: BoardPageWhereUniqueInput! = {id: 1}
  data: BoardPageUpdateInput!
}

input BoardPageCreateInput {
  heroImage: String
  title: String
  description: String
  owner: UserRelateToOneForCreateInput
  body: String
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  vacancyReport: DocumentRelateToOneForCreateInput
  applicationForm: DocumentRelateToOneForCreateInput
  ParliTrainingLink: ExternalLinkRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input InternalLinkRelateToManyForCreateInput {
  create: [InternalLinkCreateInput!]
  connect: [InternalLinkWhereUniqueInput!]
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentRelateToOneForCreateInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
}

input ExternalLinkRelateToOneForCreateInput {
  create: ExternalLinkCreateInput
  connect: ExternalLinkWhereUniqueInput
}

input ContactRelateToManyForCreateInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

type HomePage {
  id: ID!
  heroImage: String
  title: String
  description: String
  toolbeltOne: Highlight
  toolbeltTwo: Highlight
  toolbeltThree: Highlight
  toolbeltFour: Highlight
  highlightOne: Highlight
  highlightTwo: Highlight
  highlightThree: Highlight
  createdAt: DateTime
  updatedAt: DateTime
}

input HomePageWhereUniqueInput {
  id: ID
  title: String
}

input HomePageWhereInput {
  AND: [HomePageWhereInput!]
  OR: [HomePageWhereInput!]
  NOT: [HomePageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  toolbeltOne: HighlightWhereInput
  toolbeltTwo: HighlightWhereInput
  toolbeltThree: HighlightWhereInput
  toolbeltFour: HighlightWhereInput
  highlightOne: HighlightWhereInput
  highlightTwo: HighlightWhereInput
  highlightThree: HighlightWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HomePageOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HomePageUpdateInput {
  heroImage: String
  title: String
  description: String
  toolbeltOne: HighlightRelateToOneForUpdateInput
  toolbeltTwo: HighlightRelateToOneForUpdateInput
  toolbeltThree: HighlightRelateToOneForUpdateInput
  toolbeltFour: HighlightRelateToOneForUpdateInput
  highlightOne: HighlightRelateToOneForUpdateInput
  highlightTwo: HighlightRelateToOneForUpdateInput
  highlightThree: HighlightRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HighlightRelateToOneForUpdateInput {
  create: HighlightCreateInput
  connect: HighlightWhereUniqueInput
  disconnect: Boolean
}

input HomePageUpdateArgs {
  where: HomePageWhereUniqueInput! = {id: 1}
  data: HomePageUpdateInput!
}

input HomePageCreateInput {
  heroImage: String
  title: String
  description: String
  toolbeltOne: HighlightRelateToOneForCreateInput
  toolbeltTwo: HighlightRelateToOneForCreateInput
  toolbeltThree: HighlightRelateToOneForCreateInput
  toolbeltFour: HighlightRelateToOneForCreateInput
  highlightOne: HighlightRelateToOneForCreateInput
  highlightTwo: HighlightRelateToOneForCreateInput
  highlightThree: HighlightRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HighlightRelateToOneForCreateInput {
  create: HighlightCreateInput
  connect: HighlightWhereUniqueInput
}

type Election {
  id: ID!
  heroImage: String
  title: String
  description: String
  slug: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: User
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  candidateFilingDocumentsCount(where: DocumentWhereInput! = {}): Int
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: Document
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: Document
  electionOfficialApplicationDeadline: DateTime
  candidates: Document
  propositions(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  propositionsCount(where: DocumentWhereInput! = {}): Int
  electionBrochure: Document
  electionBallots(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  electionBallotsCount(where: DocumentWhereInput! = {}): Int
  result: ElectionResult
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  drafts(where: ElectionDraftWhereInput! = {}, orderBy: [ElectionDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionDraftWhereUniqueInput): [ElectionDraft!]
  draftsCount(where: ElectionDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: ElectionVersionWhereInput! = {}, orderBy: [ElectionVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionVersionWhereUniqueInput): [ElectionVersion!]
  versionsCount(where: ElectionVersionWhereInput! = {}): Int
  currentVersion: ElectionVersion
}

input ElectionWhereUniqueInput {
  id: ID
  title: String
  slug: String
  result: ElectionResultWhereUniqueInput
  currentVersion: ElectionVersionWhereUniqueInput
}

input ElectionWhereInput {
  AND: [ElectionWhereInput!]
  OR: [ElectionWhereInput!]
  NOT: [ElectionWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  electionDate: DateTimeFilter
  earlyVotingStartDate: DateTimeNullableFilter
  voterRegistrationDeadline: DateTimeNullableFilter
  candidateFilingDocuments: DocumentManyRelationFilter
  candidatePacketAvailability: DateTimeNullableFilter
  candidateFilingStartDate: DateTimeNullableFilter
  candidateFilingDeadline: DateTimeNullableFilter
  officesToBeFilled: MyStringFilter
  absenteeVotingApplication: DocumentWhereInput
  absenteeApplicationDeadline: DateTimeNullableFilter
  electionOfficialApplication: DocumentWhereInput
  electionOfficialApplicationDeadline: DateTimeNullableFilter
  candidates: DocumentWhereInput
  propositions: DocumentManyRelationFilter
  electionBrochure: DocumentWhereInput
  electionBallots: DocumentManyRelationFilter
  result: ElectionResultWhereInput
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  status: StringFilter
  drafts: ElectionDraftManyRelationFilter
  versions: ElectionVersionManyRelationFilter
  currentVersion: ElectionVersionWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input UserGroupManyRelationFilter {
  every: UserGroupWhereInput
  some: UserGroupWhereInput
  none: UserGroupWhereInput
}

input ElectionDraftManyRelationFilter {
  every: ElectionDraftWhereInput
  some: ElectionDraftWhereInput
  none: ElectionDraftWhereInput
}

input ElectionVersionManyRelationFilter {
  every: ElectionVersionWhereInput
  some: ElectionVersionWhereInput
  none: ElectionVersionWhereInput
}

input ElectionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  electionDate: OrderDirection
  earlyVotingStartDate: OrderDirection
  voterRegistrationDeadline: OrderDirection
  candidatePacketAvailability: OrderDirection
  candidateFilingStartDate: OrderDirection
  candidateFilingDeadline: OrderDirection
  officesToBeFilled: MyOrderDirection
  absenteeApplicationDeadline: OrderDirection
  electionOfficialApplicationDeadline: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input ElectionUpdateInput {
  heroImage: String
  title: String
  description: String
  slug: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments: DocumentRelateToManyForUpdateInput
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: DocumentRelateToOneForUpdateInput
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: DocumentRelateToOneForUpdateInput
  electionOfficialApplicationDeadline: DateTime
  candidates: DocumentRelateToOneForUpdateInput
  propositions: DocumentRelateToManyForUpdateInput
  electionBrochure: DocumentRelateToOneForUpdateInput
  electionBallots: DocumentRelateToManyForUpdateInput
  result: ElectionResultRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  drafts: ElectionDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: ElectionVersionRelateToManyForUpdateInput
  currentVersion: ElectionVersionRelateToOneForUpdateInput
}

input ElectionResultRelateToOneForUpdateInput {
  create: ElectionResultCreateInput
  connect: ElectionResultWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserGroupRelateToManyForUpdateInput {
  disconnect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input ElectionDraftRelateToManyForUpdateInput {
  disconnect: [ElectionDraftWhereUniqueInput!]
  set: [ElectionDraftWhereUniqueInput!]
  create: [ElectionDraftCreateInput!]
  connect: [ElectionDraftWhereUniqueInput!]
}

input ElectionVersionRelateToManyForUpdateInput {
  disconnect: [ElectionVersionWhereUniqueInput!]
  set: [ElectionVersionWhereUniqueInput!]
  create: [ElectionVersionCreateInput!]
  connect: [ElectionVersionWhereUniqueInput!]
}

input ElectionVersionRelateToOneForUpdateInput {
  create: ElectionVersionCreateInput
  connect: ElectionVersionWhereUniqueInput
  disconnect: Boolean
}

input ElectionUpdateArgs {
  where: ElectionWhereUniqueInput!
  data: ElectionUpdateInput!
}

input ElectionCreateInput {
  heroImage: String
  title: String
  description: String
  slug: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments: DocumentRelateToManyForCreateInput
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: DocumentRelateToOneForCreateInput
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: DocumentRelateToOneForCreateInput
  electionOfficialApplicationDeadline: DateTime
  candidates: DocumentRelateToOneForCreateInput
  propositions: DocumentRelateToManyForCreateInput
  electionBrochure: DocumentRelateToOneForCreateInput
  electionBallots: DocumentRelateToManyForCreateInput
  result: ElectionResultRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  drafts: ElectionDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: ElectionVersionRelateToManyForCreateInput
  currentVersion: ElectionVersionRelateToOneForCreateInput
}

input ElectionResultRelateToOneForCreateInput {
  create: ElectionResultCreateInput
  connect: ElectionResultWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserGroupRelateToManyForCreateInput {
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input ElectionDraftRelateToManyForCreateInput {
  create: [ElectionDraftCreateInput!]
  connect: [ElectionDraftWhereUniqueInput!]
}

input ElectionVersionRelateToManyForCreateInput {
  create: [ElectionVersionCreateInput!]
  connect: [ElectionVersionWhereUniqueInput!]
}

input ElectionVersionRelateToOneForCreateInput {
  create: ElectionVersionCreateInput
  connect: ElectionVersionWhereUniqueInput
}

type ElectionVersion {
  id: ID!
  original: Election
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: User
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  candidateFilingDocumentsCount(where: DocumentWhereInput! = {}): Int
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: Document
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: Document
  electionOfficialApplicationDeadline: DateTime
  candidates: Document
  propositions(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  propositionsCount(where: DocumentWhereInput! = {}): Int
  electionBrochure: Document
  electionBallots(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  electionBallotsCount(where: DocumentWhereInput! = {}): Int
  result: ElectionResult
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  isLive: Election
  republish: String
}

input ElectionVersionWhereUniqueInput {
  id: ID
  title: String
  isLive: ElectionWhereUniqueInput
}

input ElectionVersionWhereInput {
  AND: [ElectionVersionWhereInput!]
  OR: [ElectionVersionWhereInput!]
  NOT: [ElectionVersionWhereInput!]
  id: IDFilter
  original: ElectionWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  electionDate: DateTimeFilter
  earlyVotingStartDate: DateTimeNullableFilter
  voterRegistrationDeadline: DateTimeNullableFilter
  candidateFilingDocuments: DocumentManyRelationFilter
  candidatePacketAvailability: DateTimeNullableFilter
  candidateFilingStartDate: DateTimeNullableFilter
  candidateFilingDeadline: DateTimeNullableFilter
  officesToBeFilled: MyStringFilter
  absenteeVotingApplication: DocumentWhereInput
  absenteeApplicationDeadline: DateTimeNullableFilter
  electionOfficialApplication: DocumentWhereInput
  electionOfficialApplicationDeadline: DateTimeNullableFilter
  candidates: DocumentWhereInput
  propositions: DocumentManyRelationFilter
  electionBrochure: DocumentWhereInput
  electionBallots: DocumentManyRelationFilter
  result: ElectionResultWhereInput
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  isLive: ElectionWhereInput
}

input ElectionVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  electionDate: OrderDirection
  earlyVotingStartDate: OrderDirection
  voterRegistrationDeadline: OrderDirection
  candidatePacketAvailability: OrderDirection
  candidateFilingStartDate: OrderDirection
  candidateFilingDeadline: OrderDirection
  officesToBeFilled: MyOrderDirection
  absenteeApplicationDeadline: OrderDirection
  electionOfficialApplicationDeadline: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  republish: OrderDirection
}

input ElectionVersionUpdateInput {
  original: ElectionRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments: DocumentRelateToManyForUpdateInput
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: DocumentRelateToOneForUpdateInput
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: DocumentRelateToOneForUpdateInput
  electionOfficialApplicationDeadline: DateTime
  candidates: DocumentRelateToOneForUpdateInput
  propositions: DocumentRelateToManyForUpdateInput
  electionBrochure: DocumentRelateToOneForUpdateInput
  electionBallots: DocumentRelateToManyForUpdateInput
  result: ElectionResultRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  isLive: ElectionRelateToOneForUpdateInput
  republish: String
}

input ElectionRelateToOneForUpdateInput {
  create: ElectionCreateInput
  connect: ElectionWhereUniqueInput
  disconnect: Boolean
}

input ElectionVersionUpdateArgs {
  where: ElectionVersionWhereUniqueInput!
  data: ElectionVersionUpdateInput!
}

input ElectionVersionCreateInput {
  original: ElectionRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments: DocumentRelateToManyForCreateInput
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: DocumentRelateToOneForCreateInput
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: DocumentRelateToOneForCreateInput
  electionOfficialApplicationDeadline: DateTime
  candidates: DocumentRelateToOneForCreateInput
  propositions: DocumentRelateToManyForCreateInput
  electionBrochure: DocumentRelateToOneForCreateInput
  electionBallots: DocumentRelateToManyForCreateInput
  result: ElectionResultRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  isLive: ElectionRelateToOneForCreateInput
  republish: String
}

input ElectionRelateToOneForCreateInput {
  create: ElectionCreateInput
  connect: ElectionWhereUniqueInput
}

type ElectionDraft {
  id: ID!
  original: Election
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: User
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  candidateFilingDocumentsCount(where: DocumentWhereInput! = {}): Int
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: Document
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: Document
  electionOfficialApplicationDeadline: DateTime
  candidates: Document
  propositions(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  propositionsCount(where: DocumentWhereInput! = {}): Int
  electionBrochure: Document
  electionBallots(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  electionBallotsCount(where: DocumentWhereInput! = {}): Int
  result: ElectionResult
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  publish: String
}

input ElectionDraftWhereUniqueInput {
  id: ID
  title: String
}

input ElectionDraftWhereInput {
  AND: [ElectionDraftWhereInput!]
  OR: [ElectionDraftWhereInput!]
  NOT: [ElectionDraftWhereInput!]
  id: IDFilter
  original: ElectionWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  electionDate: DateTimeFilter
  earlyVotingStartDate: DateTimeNullableFilter
  voterRegistrationDeadline: DateTimeNullableFilter
  candidateFilingDocuments: DocumentManyRelationFilter
  candidatePacketAvailability: DateTimeNullableFilter
  candidateFilingStartDate: DateTimeNullableFilter
  candidateFilingDeadline: DateTimeNullableFilter
  officesToBeFilled: MyStringFilter
  absenteeVotingApplication: DocumentWhereInput
  absenteeApplicationDeadline: DateTimeNullableFilter
  electionOfficialApplication: DocumentWhereInput
  electionOfficialApplicationDeadline: DateTimeNullableFilter
  candidates: DocumentWhereInput
  propositions: DocumentManyRelationFilter
  electionBrochure: DocumentWhereInput
  electionBallots: DocumentManyRelationFilter
  result: ElectionResultWhereInput
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ElectionDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  electionDate: OrderDirection
  earlyVotingStartDate: OrderDirection
  voterRegistrationDeadline: OrderDirection
  candidatePacketAvailability: OrderDirection
  candidateFilingStartDate: OrderDirection
  candidateFilingDeadline: OrderDirection
  officesToBeFilled: MyOrderDirection
  absenteeApplicationDeadline: OrderDirection
  electionOfficialApplicationDeadline: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  publish: OrderDirection
}

input ElectionDraftUpdateInput {
  original: ElectionRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments: DocumentRelateToManyForUpdateInput
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: DocumentRelateToOneForUpdateInput
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: DocumentRelateToOneForUpdateInput
  electionOfficialApplicationDeadline: DateTime
  candidates: DocumentRelateToOneForUpdateInput
  propositions: DocumentRelateToManyForUpdateInput
  electionBrochure: DocumentRelateToOneForUpdateInput
  electionBallots: DocumentRelateToManyForUpdateInput
  result: ElectionResultRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  publish: String
}

input ElectionDraftUpdateArgs {
  where: ElectionDraftWhereUniqueInput!
  data: ElectionDraftUpdateInput!
}

input ElectionDraftCreateInput {
  original: ElectionRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  electionDate: DateTime
  earlyVotingStartDate: DateTime
  voterRegistrationDeadline: DateTime
  candidateFilingDocuments: DocumentRelateToManyForCreateInput
  candidatePacketAvailability: DateTime
  candidateFilingStartDate: DateTime
  candidateFilingDeadline: DateTime
  officesToBeFilled: String
  absenteeVotingApplication: DocumentRelateToOneForCreateInput
  absenteeApplicationDeadline: DateTime
  electionOfficialApplication: DocumentRelateToOneForCreateInput
  electionOfficialApplicationDeadline: DateTime
  candidates: DocumentRelateToOneForCreateInput
  propositions: DocumentRelateToManyForCreateInput
  electionBrochure: DocumentRelateToOneForCreateInput
  electionBallots: DocumentRelateToManyForCreateInput
  result: ElectionResultRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  publish: String
}

type ElectionResult {
  id: ID!
  election: Election
  document: Document
  isOfficial: Boolean
}

input ElectionResultWhereUniqueInput {
  id: ID
  election: ElectionWhereUniqueInput
}

input ElectionResultWhereInput {
  AND: [ElectionResultWhereInput!]
  OR: [ElectionResultWhereInput!]
  NOT: [ElectionResultWhereInput!]
  id: IDFilter
  election: ElectionWhereInput
  document: DocumentWhereInput
  isOfficial: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ElectionResultOrderByInput {
  id: OrderDirection
  isOfficial: OrderDirection
}

input ElectionResultUpdateInput {
  election: ElectionRelateToOneForUpdateInput
  document: DocumentRelateToOneForUpdateInput
  isOfficial: Boolean
}

input ElectionResultUpdateArgs {
  where: ElectionResultWhereUniqueInput!
  data: ElectionResultUpdateInput!
}

input ElectionResultCreateInput {
  election: ElectionRelateToOneForCreateInput
  document: DocumentRelateToOneForCreateInput
  isOfficial: Boolean
}

type EarlyVotingLocation {
  id: ID!
  order: Int
  title: String
  address: Location
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
}

input EarlyVotingLocationWhereUniqueInput {
  id: ID
}

input EarlyVotingLocationWhereInput {
  AND: [EarlyVotingLocationWhereInput!]
  OR: [EarlyVotingLocationWhereInput!]
  NOT: [EarlyVotingLocationWhereInput!]
  id: IDFilter
  order: IntFilter
  title: StringFilter
  address: LocationWhereInput
  hours: OperatingHourManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input OperatingHourManyRelationFilter {
  every: OperatingHourWhereInput
  some: OperatingHourWhereInput
  none: OperatingHourWhereInput
}

input EarlyVotingLocationOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
}

input EarlyVotingLocationUpdateInput {
  order: Int
  title: String
  address: LocationRelateToOneForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input OperatingHourRelateToManyForUpdateInput {
  disconnect: [OperatingHourWhereUniqueInput!]
  set: [OperatingHourWhereUniqueInput!]
  create: [OperatingHourCreateInput!]
  connect: [OperatingHourWhereUniqueInput!]
}

input EarlyVotingLocationUpdateArgs {
  where: EarlyVotingLocationWhereUniqueInput!
  data: EarlyVotingLocationUpdateInput!
}

input EarlyVotingLocationCreateInput {
  order: Int
  title: String
  address: LocationRelateToOneForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input OperatingHourRelateToManyForCreateInput {
  create: [OperatingHourCreateInput!]
  connect: [OperatingHourWhereUniqueInput!]
}

type ElectionsPage {
  id: ID!
  heroImage: String
  title: String
  description: String
  howElectionsWork: String
  owner: User
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  stateElectionContact: Contact
  boroughElectionContact: Contact
  referendumProcessDocument: Document
  earlyVotingLocations(where: EarlyVotingLocationWhereInput! = {}, orderBy: [EarlyVotingLocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EarlyVotingLocationWhereUniqueInput): [EarlyVotingLocation!]
  earlyVotingLocationsCount(where: EarlyVotingLocationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ElectionsPageWhereUniqueInput {
  id: ID
  title: String
}

input ElectionsPageWhereInput {
  AND: [ElectionsPageWhereInput!]
  OR: [ElectionsPageWhereInput!]
  NOT: [ElectionsPageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  howElectionsWork: MyStringFilter
  owner: UserWhereInput
  userGroups: UserGroupManyRelationFilter
  stateElectionContact: ContactWhereInput
  boroughElectionContact: ContactWhereInput
  referendumProcessDocument: DocumentWhereInput
  earlyVotingLocations: EarlyVotingLocationManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EarlyVotingLocationManyRelationFilter {
  every: EarlyVotingLocationWhereInput
  some: EarlyVotingLocationWhereInput
  none: EarlyVotingLocationWhereInput
}

input ElectionsPageOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  howElectionsWork: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ElectionsPageUpdateInput {
  heroImage: String
  title: String
  description: String
  howElectionsWork: String
  owner: UserRelateToOneForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  stateElectionContact: ContactRelateToOneForUpdateInput
  boroughElectionContact: ContactRelateToOneForUpdateInput
  referendumProcessDocument: DocumentRelateToOneForUpdateInput
  earlyVotingLocations: EarlyVotingLocationRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactRelateToOneForUpdateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
  disconnect: Boolean
}

input EarlyVotingLocationRelateToManyForUpdateInput {
  disconnect: [EarlyVotingLocationWhereUniqueInput!]
  set: [EarlyVotingLocationWhereUniqueInput!]
  create: [EarlyVotingLocationCreateInput!]
  connect: [EarlyVotingLocationWhereUniqueInput!]
}

input ElectionsPageUpdateArgs {
  where: ElectionsPageWhereUniqueInput! = {id: 1}
  data: ElectionsPageUpdateInput!
}

input ElectionsPageCreateInput {
  heroImage: String
  title: String
  description: String
  howElectionsWork: String
  owner: UserRelateToOneForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  stateElectionContact: ContactRelateToOneForCreateInput
  boroughElectionContact: ContactRelateToOneForCreateInput
  referendumProcessDocument: DocumentRelateToOneForCreateInput
  earlyVotingLocations: EarlyVotingLocationRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactRelateToOneForCreateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
}

input EarlyVotingLocationRelateToManyForCreateInput {
  create: [EarlyVotingLocationCreateInput!]
  connect: [EarlyVotingLocationWhereUniqueInput!]
}

type AssemblyDistrict implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  photo: Image
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  status: String
  drafts(where: AssemblyDistrictDraftWhereInput! = {}, orderBy: [AssemblyDistrictDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictDraftWhereUniqueInput): [AssemblyDistrictDraft!]
  draftsCount(where: AssemblyDistrictDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: AssemblyDistrictVersionWhereInput! = {}, orderBy: [AssemblyDistrictVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictVersionWhereUniqueInput): [AssemblyDistrictVersion!]
  versionsCount(where: AssemblyDistrictVersionWhereInput! = {}): Int
  currentVersion: AssemblyDistrictVersion
}

input AssemblyDistrictWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: AssemblyDistrictVersionWhereUniqueInput
}

input AssemblyDistrictWhereInput {
  AND: [AssemblyDistrictWhereInput!]
  OR: [AssemblyDistrictWhereInput!]
  NOT: [AssemblyDistrictWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  photo: ImageWhereInput
  memberName: StringFilter
  bio: StringFilter
  email: StringNullableFilter
  phone: StringNullableFilter
  fax: StringNullableFilter
  termStart: DateTimeNullableFilter
  termEnd: DateTimeNullableFilter
  boards: BoardManyRelationFilter
  status: StringFilter
  drafts: AssemblyDistrictDraftManyRelationFilter
  versions: AssemblyDistrictVersionManyRelationFilter
  currentVersion: AssemblyDistrictVersionWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input BoardManyRelationFilter {
  every: BoardWhereInput
  some: BoardWhereInput
  none: BoardWhereInput
}

input AssemblyDistrictDraftManyRelationFilter {
  every: AssemblyDistrictDraftWhereInput
  some: AssemblyDistrictDraftWhereInput
  none: AssemblyDistrictDraftWhereInput
}

input AssemblyDistrictVersionManyRelationFilter {
  every: AssemblyDistrictVersionWhereInput
  some: AssemblyDistrictVersionWhereInput
  none: AssemblyDistrictVersionWhereInput
}

input AssemblyDistrictOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  memberName: OrderDirection
  bio: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  termStart: OrderDirection
  termEnd: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input AssemblyDistrictUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForUpdateInput
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards: BoardRelateToManyForUpdateInput
  status: String
  drafts: AssemblyDistrictDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: AssemblyDistrictVersionRelateToManyForUpdateInput
  currentVersion: AssemblyDistrictVersionRelateToOneForUpdateInput
}

input RedirectRelateToOneForUpdateInput {
  create: RedirectCreateInput
  connect: RedirectWhereUniqueInput
  disconnect: Boolean
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input BoardRelateToManyForUpdateInput {
  disconnect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  create: [BoardCreateInput!]
  connect: [BoardWhereUniqueInput!]
}

input AssemblyDistrictDraftRelateToManyForUpdateInput {
  disconnect: [AssemblyDistrictDraftWhereUniqueInput!]
  set: [AssemblyDistrictDraftWhereUniqueInput!]
  create: [AssemblyDistrictDraftCreateInput!]
  connect: [AssemblyDistrictDraftWhereUniqueInput!]
}

input AssemblyDistrictVersionRelateToManyForUpdateInput {
  disconnect: [AssemblyDistrictVersionWhereUniqueInput!]
  set: [AssemblyDistrictVersionWhereUniqueInput!]
  create: [AssemblyDistrictVersionCreateInput!]
  connect: [AssemblyDistrictVersionWhereUniqueInput!]
}

input AssemblyDistrictVersionRelateToOneForUpdateInput {
  create: AssemblyDistrictVersionCreateInput
  connect: AssemblyDistrictVersionWhereUniqueInput
  disconnect: Boolean
}

input AssemblyDistrictUpdateArgs {
  where: AssemblyDistrictWhereUniqueInput!
  data: AssemblyDistrictUpdateInput!
}

input AssemblyDistrictCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForCreateInput
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards: BoardRelateToManyForCreateInput
  status: String
  drafts: AssemblyDistrictDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: AssemblyDistrictVersionRelateToManyForCreateInput
  currentVersion: AssemblyDistrictVersionRelateToOneForCreateInput
}

input RedirectRelateToOneForCreateInput {
  create: RedirectCreateInput
  connect: RedirectWhereUniqueInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

input BoardRelateToManyForCreateInput {
  create: [BoardCreateInput!]
  connect: [BoardWhereUniqueInput!]
}

input AssemblyDistrictDraftRelateToManyForCreateInput {
  create: [AssemblyDistrictDraftCreateInput!]
  connect: [AssemblyDistrictDraftWhereUniqueInput!]
}

input AssemblyDistrictVersionRelateToManyForCreateInput {
  create: [AssemblyDistrictVersionCreateInput!]
  connect: [AssemblyDistrictVersionWhereUniqueInput!]
}

input AssemblyDistrictVersionRelateToOneForCreateInput {
  create: AssemblyDistrictVersionCreateInput
  connect: AssemblyDistrictVersionWhereUniqueInput
}

type AssemblyDistrictVersion {
  id: ID!
  original: AssemblyDistrict
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  photo: Image
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  isLive: AssemblyDistrict
  republish: String
}

input AssemblyDistrictVersionWhereUniqueInput {
  id: ID
  isLive: AssemblyDistrictWhereUniqueInput
}

input AssemblyDistrictVersionWhereInput {
  AND: [AssemblyDistrictVersionWhereInput!]
  OR: [AssemblyDistrictVersionWhereInput!]
  NOT: [AssemblyDistrictVersionWhereInput!]
  id: IDFilter
  original: AssemblyDistrictWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  photo: ImageWhereInput
  memberName: StringFilter
  bio: StringFilter
  email: StringNullableFilter
  phone: StringNullableFilter
  fax: StringNullableFilter
  termStart: DateTimeNullableFilter
  termEnd: DateTimeNullableFilter
  boards: BoardManyRelationFilter
  isLive: AssemblyDistrictWhereInput
}

input AssemblyDistrictVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  memberName: OrderDirection
  bio: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  termStart: OrderDirection
  termEnd: OrderDirection
  republish: OrderDirection
}

input AssemblyDistrictVersionUpdateInput {
  original: AssemblyDistrictRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForUpdateInput
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards: BoardRelateToManyForUpdateInput
  isLive: AssemblyDistrictRelateToOneForUpdateInput
  republish: String
}

input AssemblyDistrictRelateToOneForUpdateInput {
  create: AssemblyDistrictCreateInput
  connect: AssemblyDistrictWhereUniqueInput
  disconnect: Boolean
}

input AssemblyDistrictVersionUpdateArgs {
  where: AssemblyDistrictVersionWhereUniqueInput!
  data: AssemblyDistrictVersionUpdateInput!
}

input AssemblyDistrictVersionCreateInput {
  original: AssemblyDistrictRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForCreateInput
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards: BoardRelateToManyForCreateInput
  isLive: AssemblyDistrictRelateToOneForCreateInput
  republish: String
}

input AssemblyDistrictRelateToOneForCreateInput {
  create: AssemblyDistrictCreateInput
  connect: AssemblyDistrictWhereUniqueInput
}

type AssemblyDistrictDraft {
  id: ID!
  original: AssemblyDistrict
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  photo: Image
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  publish: String
}

input AssemblyDistrictDraftWhereUniqueInput {
  id: ID
}

input AssemblyDistrictDraftWhereInput {
  AND: [AssemblyDistrictDraftWhereInput!]
  OR: [AssemblyDistrictDraftWhereInput!]
  NOT: [AssemblyDistrictDraftWhereInput!]
  id: IDFilter
  original: AssemblyDistrictWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  photo: ImageWhereInput
  memberName: StringFilter
  bio: StringFilter
  email: StringNullableFilter
  phone: StringNullableFilter
  fax: StringNullableFilter
  termStart: DateTimeNullableFilter
  termEnd: DateTimeNullableFilter
  boards: BoardManyRelationFilter
}

input AssemblyDistrictDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  memberName: OrderDirection
  bio: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  termStart: OrderDirection
  termEnd: OrderDirection
  publish: OrderDirection
}

input AssemblyDistrictDraftUpdateInput {
  original: AssemblyDistrictRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForUpdateInput
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards: BoardRelateToManyForUpdateInput
  publish: String
}

input AssemblyDistrictDraftUpdateArgs {
  where: AssemblyDistrictDraftWhereUniqueInput!
  data: AssemblyDistrictDraftUpdateInput!
}

input AssemblyDistrictDraftCreateInput {
  original: AssemblyDistrictRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  photo: ImageRelateToOneForCreateInput
  memberName: String
  bio: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
  boards: BoardRelateToManyForCreateInput
  publish: String
}

type Board implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  directory: Document
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLink
  linkToResolutions: ExternalLink
  linkToPublicOpinionMessage: ExternalLink
  type: String
  isActive: Boolean
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  status: String
  drafts(where: BoardDraftWhereInput! = {}, orderBy: [BoardDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardDraftWhereUniqueInput): [BoardDraft!]
  draftsCount(where: BoardDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: BoardVersionWhereInput! = {}, orderBy: [BoardVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardVersionWhereUniqueInput): [BoardVersion!]
  versionsCount(where: BoardVersionWhereInput! = {}): Int
  currentVersion: BoardVersion
}

input BoardWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: BoardVersionWhereUniqueInput
}

input BoardWhereInput {
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  NOT: [BoardWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  directory: DocumentWhereInput
  calendarId: StringFilter
  calendarQueryString: StringFilter
  linkToAgendas: ExternalLinkWhereInput
  linkToResolutions: ExternalLinkWhereInput
  linkToPublicOpinionMessage: ExternalLinkWhereInput
  type: StringFilter
  isActive: BooleanFilter
  districts: AssemblyDistrictManyRelationFilter
  communities: CommunityManyRelationFilter
  status: StringFilter
  drafts: BoardDraftManyRelationFilter
  versions: BoardVersionManyRelationFilter
  currentVersion: BoardVersionWhereInput
}

input AssemblyDistrictManyRelationFilter {
  every: AssemblyDistrictWhereInput
  some: AssemblyDistrictWhereInput
  none: AssemblyDistrictWhereInput
}

input CommunityManyRelationFilter {
  every: CommunityWhereInput
  some: CommunityWhereInput
  none: CommunityWhereInput
}

input BoardDraftManyRelationFilter {
  every: BoardDraftWhereInput
  some: BoardDraftWhereInput
  none: BoardDraftWhereInput
}

input BoardVersionManyRelationFilter {
  every: BoardVersionWhereInput
  some: BoardVersionWhereInput
  none: BoardVersionWhereInput
}

input BoardOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  calendarId: OrderDirection
  calendarQueryString: OrderDirection
  type: OrderDirection
  isActive: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input BoardUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  directory: DocumentRelateToOneForUpdateInput
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLinkRelateToOneForUpdateInput
  linkToResolutions: ExternalLinkRelateToOneForUpdateInput
  linkToPublicOpinionMessage: ExternalLinkRelateToOneForUpdateInput
  type: String
  isActive: Boolean
  districts: AssemblyDistrictRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  status: String
  drafts: BoardDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: BoardVersionRelateToManyForUpdateInput
  currentVersion: BoardVersionRelateToOneForUpdateInput
}

input AssemblyDistrictRelateToManyForUpdateInput {
  disconnect: [AssemblyDistrictWhereUniqueInput!]
  set: [AssemblyDistrictWhereUniqueInput!]
  create: [AssemblyDistrictCreateInput!]
  connect: [AssemblyDistrictWhereUniqueInput!]
}

input CommunityRelateToManyForUpdateInput {
  disconnect: [CommunityWhereUniqueInput!]
  set: [CommunityWhereUniqueInput!]
  create: [CommunityCreateInput!]
  connect: [CommunityWhereUniqueInput!]
}

input BoardDraftRelateToManyForUpdateInput {
  disconnect: [BoardDraftWhereUniqueInput!]
  set: [BoardDraftWhereUniqueInput!]
  create: [BoardDraftCreateInput!]
  connect: [BoardDraftWhereUniqueInput!]
}

input BoardVersionRelateToManyForUpdateInput {
  disconnect: [BoardVersionWhereUniqueInput!]
  set: [BoardVersionWhereUniqueInput!]
  create: [BoardVersionCreateInput!]
  connect: [BoardVersionWhereUniqueInput!]
}

input BoardVersionRelateToOneForUpdateInput {
  create: BoardVersionCreateInput
  connect: BoardVersionWhereUniqueInput
  disconnect: Boolean
}

input BoardUpdateArgs {
  where: BoardWhereUniqueInput!
  data: BoardUpdateInput!
}

input BoardCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  directory: DocumentRelateToOneForCreateInput
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLinkRelateToOneForCreateInput
  linkToResolutions: ExternalLinkRelateToOneForCreateInput
  linkToPublicOpinionMessage: ExternalLinkRelateToOneForCreateInput
  type: String
  isActive: Boolean
  districts: AssemblyDistrictRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  status: String
  drafts: BoardDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: BoardVersionRelateToManyForCreateInput
  currentVersion: BoardVersionRelateToOneForCreateInput
}

input AssemblyDistrictRelateToManyForCreateInput {
  create: [AssemblyDistrictCreateInput!]
  connect: [AssemblyDistrictWhereUniqueInput!]
}

input CommunityRelateToManyForCreateInput {
  create: [CommunityCreateInput!]
  connect: [CommunityWhereUniqueInput!]
}

input BoardDraftRelateToManyForCreateInput {
  create: [BoardDraftCreateInput!]
  connect: [BoardDraftWhereUniqueInput!]
}

input BoardVersionRelateToManyForCreateInput {
  create: [BoardVersionCreateInput!]
  connect: [BoardVersionWhereUniqueInput!]
}

input BoardVersionRelateToOneForCreateInput {
  create: BoardVersionCreateInput
  connect: BoardVersionWhereUniqueInput
}

type BoardVersion {
  id: ID!
  original: Board
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  directory: Document
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLink
  linkToResolutions: ExternalLink
  linkToPublicOpinionMessage: ExternalLink
  type: String
  isActive: Boolean
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  isLive: Board
  republish: String
}

input BoardVersionWhereUniqueInput {
  id: ID
  isLive: BoardWhereUniqueInput
}

input BoardVersionWhereInput {
  AND: [BoardVersionWhereInput!]
  OR: [BoardVersionWhereInput!]
  NOT: [BoardVersionWhereInput!]
  id: IDFilter
  original: BoardWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  directory: DocumentWhereInput
  calendarId: StringFilter
  calendarQueryString: StringFilter
  linkToAgendas: ExternalLinkWhereInput
  linkToResolutions: ExternalLinkWhereInput
  linkToPublicOpinionMessage: ExternalLinkWhereInput
  type: StringFilter
  isActive: BooleanFilter
  districts: AssemblyDistrictManyRelationFilter
  communities: CommunityManyRelationFilter
  isLive: BoardWhereInput
}

input BoardVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  calendarId: OrderDirection
  calendarQueryString: OrderDirection
  type: OrderDirection
  isActive: OrderDirection
  republish: OrderDirection
}

input BoardVersionUpdateInput {
  original: BoardRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  directory: DocumentRelateToOneForUpdateInput
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLinkRelateToOneForUpdateInput
  linkToResolutions: ExternalLinkRelateToOneForUpdateInput
  linkToPublicOpinionMessage: ExternalLinkRelateToOneForUpdateInput
  type: String
  isActive: Boolean
  districts: AssemblyDistrictRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  isLive: BoardRelateToOneForUpdateInput
  republish: String
}

input BoardRelateToOneForUpdateInput {
  create: BoardCreateInput
  connect: BoardWhereUniqueInput
  disconnect: Boolean
}

input BoardVersionUpdateArgs {
  where: BoardVersionWhereUniqueInput!
  data: BoardVersionUpdateInput!
}

input BoardVersionCreateInput {
  original: BoardRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  directory: DocumentRelateToOneForCreateInput
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLinkRelateToOneForCreateInput
  linkToResolutions: ExternalLinkRelateToOneForCreateInput
  linkToPublicOpinionMessage: ExternalLinkRelateToOneForCreateInput
  type: String
  isActive: Boolean
  districts: AssemblyDistrictRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  isLive: BoardRelateToOneForCreateInput
  republish: String
}

input BoardRelateToOneForCreateInput {
  create: BoardCreateInput
  connect: BoardWhereUniqueInput
}

type BoardDraft {
  id: ID!
  original: Board
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  directory: Document
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLink
  linkToResolutions: ExternalLink
  linkToPublicOpinionMessage: ExternalLink
  type: String
  isActive: Boolean
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  publish: String
}

input BoardDraftWhereUniqueInput {
  id: ID
}

input BoardDraftWhereInput {
  AND: [BoardDraftWhereInput!]
  OR: [BoardDraftWhereInput!]
  NOT: [BoardDraftWhereInput!]
  id: IDFilter
  original: BoardWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  directory: DocumentWhereInput
  calendarId: StringFilter
  calendarQueryString: StringFilter
  linkToAgendas: ExternalLinkWhereInput
  linkToResolutions: ExternalLinkWhereInput
  linkToPublicOpinionMessage: ExternalLinkWhereInput
  type: StringFilter
  isActive: BooleanFilter
  districts: AssemblyDistrictManyRelationFilter
  communities: CommunityManyRelationFilter
}

input BoardDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  calendarId: OrderDirection
  calendarQueryString: OrderDirection
  type: OrderDirection
  isActive: OrderDirection
  publish: OrderDirection
}

input BoardDraftUpdateInput {
  original: BoardRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  directory: DocumentRelateToOneForUpdateInput
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLinkRelateToOneForUpdateInput
  linkToResolutions: ExternalLinkRelateToOneForUpdateInput
  linkToPublicOpinionMessage: ExternalLinkRelateToOneForUpdateInput
  type: String
  isActive: Boolean
  districts: AssemblyDistrictRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  publish: String
}

input BoardDraftUpdateArgs {
  where: BoardDraftWhereUniqueInput!
  data: BoardDraftUpdateInput!
}

input BoardDraftCreateInput {
  original: BoardRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  directory: DocumentRelateToOneForCreateInput
  calendarId: String
  calendarQueryString: String
  linkToAgendas: ExternalLinkRelateToOneForCreateInput
  linkToResolutions: ExternalLinkRelateToOneForCreateInput
  linkToPublicOpinionMessage: ExternalLinkRelateToOneForCreateInput
  type: String
  isActive: Boolean
  districts: AssemblyDistrictRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  publish: String
}

type Community implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  status: String
  drafts(where: CommunityDraftWhereInput! = {}, orderBy: [CommunityDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityDraftWhereUniqueInput): [CommunityDraft!]
  draftsCount(where: CommunityDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: CommunityVersionWhereInput! = {}, orderBy: [CommunityVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityVersionWhereUniqueInput): [CommunityVersion!]
  versionsCount(where: CommunityVersionWhereInput! = {}): Int
  currentVersion: CommunityVersion
}

input CommunityWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: CommunityVersionWhereUniqueInput
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  NOT: [CommunityWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  districts: AssemblyDistrictManyRelationFilter
  boards: BoardManyRelationFilter
  status: StringFilter
  drafts: CommunityDraftManyRelationFilter
  versions: CommunityVersionManyRelationFilter
  currentVersion: CommunityVersionWhereInput
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input CommunityDraftManyRelationFilter {
  every: CommunityDraftWhereInput
  some: CommunityDraftWhereInput
  none: CommunityDraftWhereInput
}

input CommunityVersionManyRelationFilter {
  every: CommunityVersionWhereInput
  some: CommunityVersionWhereInput
  none: CommunityVersionWhereInput
}

input CommunityOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input CommunityUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  districts: AssemblyDistrictRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  status: String
  drafts: CommunityDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: CommunityVersionRelateToManyForUpdateInput
  currentVersion: CommunityVersionRelateToOneForUpdateInput
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input CommunityDraftRelateToManyForUpdateInput {
  disconnect: [CommunityDraftWhereUniqueInput!]
  set: [CommunityDraftWhereUniqueInput!]
  create: [CommunityDraftCreateInput!]
  connect: [CommunityDraftWhereUniqueInput!]
}

input CommunityVersionRelateToManyForUpdateInput {
  disconnect: [CommunityVersionWhereUniqueInput!]
  set: [CommunityVersionWhereUniqueInput!]
  create: [CommunityVersionCreateInput!]
  connect: [CommunityVersionWhereUniqueInput!]
}

input CommunityVersionRelateToOneForUpdateInput {
  create: CommunityVersionCreateInput
  connect: CommunityVersionWhereUniqueInput
  disconnect: Boolean
}

input CommunityUpdateArgs {
  where: CommunityWhereUniqueInput!
  data: CommunityUpdateInput!
}

input CommunityCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  districts: AssemblyDistrictRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  status: String
  drafts: CommunityDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: CommunityVersionRelateToManyForCreateInput
  currentVersion: CommunityVersionRelateToOneForCreateInput
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input CommunityDraftRelateToManyForCreateInput {
  create: [CommunityDraftCreateInput!]
  connect: [CommunityDraftWhereUniqueInput!]
}

input CommunityVersionRelateToManyForCreateInput {
  create: [CommunityVersionCreateInput!]
  connect: [CommunityVersionWhereUniqueInput!]
}

input CommunityVersionRelateToOneForCreateInput {
  create: CommunityVersionCreateInput
  connect: CommunityVersionWhereUniqueInput
}

type CommunityVersion {
  id: ID!
  original: Community
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  isLive: Community
  republish: String
}

input CommunityVersionWhereUniqueInput {
  id: ID
  isLive: CommunityWhereUniqueInput
}

input CommunityVersionWhereInput {
  AND: [CommunityVersionWhereInput!]
  OR: [CommunityVersionWhereInput!]
  NOT: [CommunityVersionWhereInput!]
  id: IDFilter
  original: CommunityWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  districts: AssemblyDistrictManyRelationFilter
  boards: BoardManyRelationFilter
  isLive: CommunityWhereInput
}

input CommunityVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  republish: OrderDirection
}

input CommunityVersionUpdateInput {
  original: CommunityRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  districts: AssemblyDistrictRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  isLive: CommunityRelateToOneForUpdateInput
  republish: String
}

input CommunityRelateToOneForUpdateInput {
  create: CommunityCreateInput
  connect: CommunityWhereUniqueInput
  disconnect: Boolean
}

input CommunityVersionUpdateArgs {
  where: CommunityVersionWhereUniqueInput!
  data: CommunityVersionUpdateInput!
}

input CommunityVersionCreateInput {
  original: CommunityRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  districts: AssemblyDistrictRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  isLive: CommunityRelateToOneForCreateInput
  republish: String
}

input CommunityRelateToOneForCreateInput {
  create: CommunityCreateInput
  connect: CommunityWhereUniqueInput
}

type CommunityDraft {
  id: ID!
  original: Community
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  publish: String
}

input CommunityDraftWhereUniqueInput {
  id: ID
}

input CommunityDraftWhereInput {
  AND: [CommunityDraftWhereInput!]
  OR: [CommunityDraftWhereInput!]
  NOT: [CommunityDraftWhereInput!]
  id: IDFilter
  original: CommunityWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  districts: AssemblyDistrictManyRelationFilter
  boards: BoardManyRelationFilter
}

input CommunityDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  publish: OrderDirection
}

input CommunityDraftUpdateInput {
  original: CommunityRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  districts: AssemblyDistrictRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  publish: String
}

input CommunityDraftUpdateArgs {
  where: CommunityDraftWhereUniqueInput!
  data: CommunityDraftUpdateInput!
}

input CommunityDraftCreateInput {
  original: CommunityRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  districts: AssemblyDistrictRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  publish: String
}

type Facility implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
  status: String
  drafts(where: FacilityDraftWhereInput! = {}, orderBy: [FacilityDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityDraftWhereUniqueInput): [FacilityDraft!]
  draftsCount(where: FacilityDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: FacilityVersionWhereInput! = {}, orderBy: [FacilityVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityVersionWhereUniqueInput): [FacilityVersion!]
  versionsCount(where: FacilityVersionWhereInput! = {}): Int
  currentVersion: FacilityVersion
}

input FacilityWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: FacilityVersionWhereUniqueInput
}

input FacilityWhereInput {
  AND: [FacilityWhereInput!]
  OR: [FacilityWhereInput!]
  NOT: [FacilityWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
  status: StringFilter
  drafts: FacilityDraftManyRelationFilter
  versions: FacilityVersionManyRelationFilter
  currentVersion: FacilityVersionWhereInput
}

input FacilityDraftManyRelationFilter {
  every: FacilityDraftWhereInput
  some: FacilityDraftWhereInput
  none: FacilityDraftWhereInput
}

input FacilityVersionManyRelationFilter {
  every: FacilityVersionWhereInput
  some: FacilityVersionWhereInput
  none: FacilityVersionWhereInput
}

input FacilityOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input FacilityUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
  status: String
  drafts: FacilityDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: FacilityVersionRelateToManyForUpdateInput
  currentVersion: FacilityVersionRelateToOneForUpdateInput
}

input ParkRelateToOneForUpdateInput {
  create: ParkCreateInput
  connect: ParkWhereUniqueInput
  disconnect: Boolean
}

input FacilityDraftRelateToManyForUpdateInput {
  disconnect: [FacilityDraftWhereUniqueInput!]
  set: [FacilityDraftWhereUniqueInput!]
  create: [FacilityDraftCreateInput!]
  connect: [FacilityDraftWhereUniqueInput!]
}

input FacilityVersionRelateToManyForUpdateInput {
  disconnect: [FacilityVersionWhereUniqueInput!]
  set: [FacilityVersionWhereUniqueInput!]
  create: [FacilityVersionCreateInput!]
  connect: [FacilityVersionWhereUniqueInput!]
}

input FacilityVersionRelateToOneForUpdateInput {
  create: FacilityVersionCreateInput
  connect: FacilityVersionWhereUniqueInput
  disconnect: Boolean
}

input FacilityUpdateArgs {
  where: FacilityWhereUniqueInput!
  data: FacilityUpdateInput!
}

input FacilityCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
  status: String
  drafts: FacilityDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: FacilityVersionRelateToManyForCreateInput
  currentVersion: FacilityVersionRelateToOneForCreateInput
}

input ParkRelateToOneForCreateInput {
  create: ParkCreateInput
  connect: ParkWhereUniqueInput
}

input FacilityDraftRelateToManyForCreateInput {
  create: [FacilityDraftCreateInput!]
  connect: [FacilityDraftWhereUniqueInput!]
}

input FacilityVersionRelateToManyForCreateInput {
  create: [FacilityVersionCreateInput!]
  connect: [FacilityVersionWhereUniqueInput!]
}

input FacilityVersionRelateToOneForCreateInput {
  create: FacilityVersionCreateInput
  connect: FacilityVersionWhereUniqueInput
}

type FacilityVersion {
  id: ID!
  original: Facility
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
  isLive: Facility
  republish: String
}

input FacilityVersionWhereUniqueInput {
  id: ID
  isLive: FacilityWhereUniqueInput
}

input FacilityVersionWhereInput {
  AND: [FacilityVersionWhereInput!]
  OR: [FacilityVersionWhereInput!]
  NOT: [FacilityVersionWhereInput!]
  id: IDFilter
  original: FacilityWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
  isLive: FacilityWhereInput
}

input FacilityVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  republish: OrderDirection
}

input FacilityVersionUpdateInput {
  original: FacilityRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
  isLive: FacilityRelateToOneForUpdateInput
  republish: String
}

input FacilityRelateToOneForUpdateInput {
  create: FacilityCreateInput
  connect: FacilityWhereUniqueInput
  disconnect: Boolean
}

input FacilityVersionUpdateArgs {
  where: FacilityVersionWhereUniqueInput!
  data: FacilityVersionUpdateInput!
}

input FacilityVersionCreateInput {
  original: FacilityRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
  isLive: FacilityRelateToOneForCreateInput
  republish: String
}

input FacilityRelateToOneForCreateInput {
  create: FacilityCreateInput
  connect: FacilityWhereUniqueInput
}

type FacilityDraft {
  id: ID!
  original: Facility
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
  publish: String
}

input FacilityDraftWhereUniqueInput {
  id: ID
}

input FacilityDraftWhereInput {
  AND: [FacilityDraftWhereInput!]
  OR: [FacilityDraftWhereInput!]
  NOT: [FacilityDraftWhereInput!]
  id: IDFilter
  original: FacilityWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
}

input FacilityDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  publish: OrderDirection
}

input FacilityDraftUpdateInput {
  original: FacilityRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
  publish: String
}

input FacilityDraftUpdateArgs {
  where: FacilityDraftWhereUniqueInput!
  data: FacilityDraftUpdateInput!
}

input FacilityDraftCreateInput {
  original: FacilityRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
  publish: String
}

type OrgUnit implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  children(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  childrenCount(where: OrgUnitWhereInput! = {}): Int
  parent: OrgUnit
  status: String
  drafts(where: OrgUnitDraftWhereInput! = {}, orderBy: [OrgUnitDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitDraftWhereUniqueInput): [OrgUnitDraft!]
  draftsCount(where: OrgUnitDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: OrgUnitVersionWhereInput! = {}, orderBy: [OrgUnitVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitVersionWhereUniqueInput): [OrgUnitVersion!]
  versionsCount(where: OrgUnitVersionWhereInput! = {}): Int
  currentVersion: OrgUnitVersion
}

input OrgUnitWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: OrgUnitVersionWhereUniqueInput
}

input OrgUnitWhereInput {
  AND: [OrgUnitWhereInput!]
  OR: [OrgUnitWhereInput!]
  NOT: [OrgUnitWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  showPage: BooleanFilter
  services: ServiceManyRelationFilter
  children: OrgUnitManyRelationFilter
  parent: OrgUnitWhereInput
  status: StringFilter
  drafts: OrgUnitDraftManyRelationFilter
  versions: OrgUnitVersionManyRelationFilter
  currentVersion: OrgUnitVersionWhereInput
}

input OrgUnitManyRelationFilter {
  every: OrgUnitWhereInput
  some: OrgUnitWhereInput
  none: OrgUnitWhereInput
}

input OrgUnitDraftManyRelationFilter {
  every: OrgUnitDraftWhereInput
  some: OrgUnitDraftWhereInput
  none: OrgUnitDraftWhereInput
}

input OrgUnitVersionManyRelationFilter {
  every: OrgUnitVersionWhereInput
  some: OrgUnitVersionWhereInput
  none: OrgUnitVersionWhereInput
}

input OrgUnitOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  showPage: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input OrgUnitUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForUpdateInput
  children: OrgUnitRelateToManyForUpdateInput
  parent: OrgUnitRelateToOneForUpdateInput
  status: String
  drafts: OrgUnitDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: OrgUnitVersionRelateToManyForUpdateInput
  currentVersion: OrgUnitVersionRelateToOneForUpdateInput
}

input OrgUnitRelateToManyForUpdateInput {
  disconnect: [OrgUnitWhereUniqueInput!]
  set: [OrgUnitWhereUniqueInput!]
  create: [OrgUnitCreateInput!]
  connect: [OrgUnitWhereUniqueInput!]
}

input OrgUnitRelateToOneForUpdateInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
  disconnect: Boolean
}

input OrgUnitDraftRelateToManyForUpdateInput {
  disconnect: [OrgUnitDraftWhereUniqueInput!]
  set: [OrgUnitDraftWhereUniqueInput!]
  create: [OrgUnitDraftCreateInput!]
  connect: [OrgUnitDraftWhereUniqueInput!]
}

input OrgUnitVersionRelateToManyForUpdateInput {
  disconnect: [OrgUnitVersionWhereUniqueInput!]
  set: [OrgUnitVersionWhereUniqueInput!]
  create: [OrgUnitVersionCreateInput!]
  connect: [OrgUnitVersionWhereUniqueInput!]
}

input OrgUnitVersionRelateToOneForUpdateInput {
  create: OrgUnitVersionCreateInput
  connect: OrgUnitVersionWhereUniqueInput
  disconnect: Boolean
}

input OrgUnitUpdateArgs {
  where: OrgUnitWhereUniqueInput!
  data: OrgUnitUpdateInput!
}

input OrgUnitCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForCreateInput
  children: OrgUnitRelateToManyForCreateInput
  parent: OrgUnitRelateToOneForCreateInput
  status: String
  drafts: OrgUnitDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: OrgUnitVersionRelateToManyForCreateInput
  currentVersion: OrgUnitVersionRelateToOneForCreateInput
}

input OrgUnitRelateToManyForCreateInput {
  create: [OrgUnitCreateInput!]
  connect: [OrgUnitWhereUniqueInput!]
}

input OrgUnitRelateToOneForCreateInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
}

input OrgUnitDraftRelateToManyForCreateInput {
  create: [OrgUnitDraftCreateInput!]
  connect: [OrgUnitDraftWhereUniqueInput!]
}

input OrgUnitVersionRelateToManyForCreateInput {
  create: [OrgUnitVersionCreateInput!]
  connect: [OrgUnitVersionWhereUniqueInput!]
}

input OrgUnitVersionRelateToOneForCreateInput {
  create: OrgUnitVersionCreateInput
  connect: OrgUnitVersionWhereUniqueInput
}

type OrgUnitVersion {
  id: ID!
  original: OrgUnit
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  children(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  childrenCount(where: OrgUnitWhereInput! = {}): Int
  parent: OrgUnit
  isLive: OrgUnit
  republish: String
}

input OrgUnitVersionWhereUniqueInput {
  id: ID
  isLive: OrgUnitWhereUniqueInput
}

input OrgUnitVersionWhereInput {
  AND: [OrgUnitVersionWhereInput!]
  OR: [OrgUnitVersionWhereInput!]
  NOT: [OrgUnitVersionWhereInput!]
  id: IDFilter
  original: OrgUnitWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  showPage: BooleanFilter
  services: ServiceManyRelationFilter
  children: OrgUnitManyRelationFilter
  parent: OrgUnitWhereInput
  isLive: OrgUnitWhereInput
}

input OrgUnitVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  showPage: OrderDirection
  republish: OrderDirection
}

input OrgUnitVersionUpdateInput {
  original: OrgUnitRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForUpdateInput
  children: OrgUnitRelateToManyForUpdateInput
  parent: OrgUnitRelateToOneForUpdateInput
  isLive: OrgUnitRelateToOneForUpdateInput
  republish: String
}

input OrgUnitVersionUpdateArgs {
  where: OrgUnitVersionWhereUniqueInput!
  data: OrgUnitVersionUpdateInput!
}

input OrgUnitVersionCreateInput {
  original: OrgUnitRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForCreateInput
  children: OrgUnitRelateToManyForCreateInput
  parent: OrgUnitRelateToOneForCreateInput
  isLive: OrgUnitRelateToOneForCreateInput
  republish: String
}

type OrgUnitDraft {
  id: ID!
  original: OrgUnit
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  children(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  childrenCount(where: OrgUnitWhereInput! = {}): Int
  parent: OrgUnit
  publish: String
}

input OrgUnitDraftWhereUniqueInput {
  id: ID
}

input OrgUnitDraftWhereInput {
  AND: [OrgUnitDraftWhereInput!]
  OR: [OrgUnitDraftWhereInput!]
  NOT: [OrgUnitDraftWhereInput!]
  id: IDFilter
  original: OrgUnitWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  showPage: BooleanFilter
  services: ServiceManyRelationFilter
  children: OrgUnitManyRelationFilter
  parent: OrgUnitWhereInput
}

input OrgUnitDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  showPage: OrderDirection
  publish: OrderDirection
}

input OrgUnitDraftUpdateInput {
  original: OrgUnitRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForUpdateInput
  children: OrgUnitRelateToManyForUpdateInput
  parent: OrgUnitRelateToOneForUpdateInput
  publish: String
}

input OrgUnitDraftUpdateArgs {
  where: OrgUnitDraftWhereUniqueInput!
  data: OrgUnitDraftUpdateInput!
}

input OrgUnitDraftCreateInput {
  original: OrgUnitRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  showPage: Boolean
  services: ServiceRelateToManyForCreateInput
  children: OrgUnitRelateToManyForCreateInput
  parent: OrgUnitRelateToOneForCreateInput
  publish: String
}

type Park implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  status: String
  drafts(where: ParkDraftWhereInput! = {}, orderBy: [ParkDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkDraftWhereUniqueInput): [ParkDraft!]
  draftsCount(where: ParkDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: ParkVersionWhereInput! = {}, orderBy: [ParkVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkVersionWhereUniqueInput): [ParkVersion!]
  versionsCount(where: ParkVersionWhereInput! = {}): Int
  currentVersion: ParkVersion
}

input ParkWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: ParkVersionWhereUniqueInput
}

input ParkWhereInput {
  AND: [ParkWhereInput!]
  OR: [ParkWhereInput!]
  NOT: [ParkWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  status: StringFilter
  drafts: ParkDraftManyRelationFilter
  versions: ParkVersionManyRelationFilter
  currentVersion: ParkVersionWhereInput
}

input TrailManyRelationFilter {
  every: TrailWhereInput
  some: TrailWhereInput
  none: TrailWhereInput
}

input FacilityManyRelationFilter {
  every: FacilityWhereInput
  some: FacilityWhereInput
  none: FacilityWhereInput
}

input ParkDraftManyRelationFilter {
  every: ParkDraftWhereInput
  some: ParkDraftWhereInput
  none: ParkDraftWhereInput
}

input ParkVersionManyRelationFilter {
  every: ParkVersionWhereInput
  some: ParkVersionWhereInput
  none: ParkVersionWhereInput
}

input ParkOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input ParkUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  status: String
  drafts: ParkDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: ParkVersionRelateToManyForUpdateInput
  currentVersion: ParkVersionRelateToOneForUpdateInput
}

input TrailRelateToManyForUpdateInput {
  disconnect: [TrailWhereUniqueInput!]
  set: [TrailWhereUniqueInput!]
  create: [TrailCreateInput!]
  connect: [TrailWhereUniqueInput!]
}

input FacilityRelateToManyForUpdateInput {
  disconnect: [FacilityWhereUniqueInput!]
  set: [FacilityWhereUniqueInput!]
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input ParkDraftRelateToManyForUpdateInput {
  disconnect: [ParkDraftWhereUniqueInput!]
  set: [ParkDraftWhereUniqueInput!]
  create: [ParkDraftCreateInput!]
  connect: [ParkDraftWhereUniqueInput!]
}

input ParkVersionRelateToManyForUpdateInput {
  disconnect: [ParkVersionWhereUniqueInput!]
  set: [ParkVersionWhereUniqueInput!]
  create: [ParkVersionCreateInput!]
  connect: [ParkVersionWhereUniqueInput!]
}

input ParkVersionRelateToOneForUpdateInput {
  create: ParkVersionCreateInput
  connect: ParkVersionWhereUniqueInput
  disconnect: Boolean
}

input ParkUpdateArgs {
  where: ParkWhereUniqueInput!
  data: ParkUpdateInput!
}

input ParkCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  status: String
  drafts: ParkDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: ParkVersionRelateToManyForCreateInput
  currentVersion: ParkVersionRelateToOneForCreateInput
}

input TrailRelateToManyForCreateInput {
  create: [TrailCreateInput!]
  connect: [TrailWhereUniqueInput!]
}

input FacilityRelateToManyForCreateInput {
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input ParkDraftRelateToManyForCreateInput {
  create: [ParkDraftCreateInput!]
  connect: [ParkDraftWhereUniqueInput!]
}

input ParkVersionRelateToManyForCreateInput {
  create: [ParkVersionCreateInput!]
  connect: [ParkVersionWhereUniqueInput!]
}

input ParkVersionRelateToOneForCreateInput {
  create: ParkVersionCreateInput
  connect: ParkVersionWhereUniqueInput
}

type ParkVersion {
  id: ID!
  original: Park
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  isLive: Park
  republish: String
}

input ParkVersionWhereUniqueInput {
  id: ID
  isLive: ParkWhereUniqueInput
}

input ParkVersionWhereInput {
  AND: [ParkVersionWhereInput!]
  OR: [ParkVersionWhereInput!]
  NOT: [ParkVersionWhereInput!]
  id: IDFilter
  original: ParkWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  isLive: ParkWhereInput
}

input ParkVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  republish: OrderDirection
}

input ParkVersionUpdateInput {
  original: ParkRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  isLive: ParkRelateToOneForUpdateInput
  republish: String
}

input ParkVersionUpdateArgs {
  where: ParkVersionWhereUniqueInput!
  data: ParkVersionUpdateInput!
}

input ParkVersionCreateInput {
  original: ParkRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  isLive: ParkRelateToOneForCreateInput
  republish: String
}

type ParkDraft {
  id: ID!
  original: Park
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  hours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  hoursCount(where: OperatingHourWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  publish: String
}

input ParkDraftWhereUniqueInput {
  id: ID
}

input ParkDraftWhereInput {
  AND: [ParkDraftWhereInput!]
  OR: [ParkDraftWhereInput!]
  NOT: [ParkDraftWhereInput!]
  id: IDFilter
  original: ParkWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  hours: OperatingHourManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  services: ServiceManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
}

input ParkDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  publish: OrderDirection
}

input ParkDraftUpdateInput {
  original: ParkRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  hours: OperatingHourRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  publish: String
}

input ParkDraftUpdateArgs {
  where: ParkDraftWhereUniqueInput!
  data: ParkDraftUpdateInput!
}

input ParkDraftCreateInput {
  original: ParkRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  hours: OperatingHourRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  services: ServiceRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  publish: String
}

type PublicNotice implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  status: String
  drafts(where: PublicNoticeDraftWhereInput! = {}, orderBy: [PublicNoticeDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeDraftWhereUniqueInput): [PublicNoticeDraft!]
  draftsCount(where: PublicNoticeDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: PublicNoticeVersionWhereInput! = {}, orderBy: [PublicNoticeVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeVersionWhereUniqueInput): [PublicNoticeVersion!]
  versionsCount(where: PublicNoticeVersionWhereInput! = {}): Int
  currentVersion: PublicNoticeVersion
}

input PublicNoticeWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: PublicNoticeVersionWhereUniqueInput
}

input PublicNoticeWhereInput {
  AND: [PublicNoticeWhereInput!]
  OR: [PublicNoticeWhereInput!]
  NOT: [PublicNoticeWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  urgency: IntFilter
  effectiveDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  parks: ParkManyRelationFilter
  services: ServiceManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  facilities: FacilityManyRelationFilter
  trails: TrailManyRelationFilter
  communities: CommunityManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  boards: BoardManyRelationFilter
  status: StringFilter
  drafts: PublicNoticeDraftManyRelationFilter
  versions: PublicNoticeVersionManyRelationFilter
  currentVersion: PublicNoticeVersionWhereInput
}

input ParkManyRelationFilter {
  every: ParkWhereInput
  some: ParkWhereInput
  none: ParkWhereInput
}

input PublicNoticeDraftManyRelationFilter {
  every: PublicNoticeDraftWhereInput
  some: PublicNoticeDraftWhereInput
  none: PublicNoticeDraftWhereInput
}

input PublicNoticeVersionManyRelationFilter {
  every: PublicNoticeVersionWhereInput
  some: PublicNoticeVersionWhereInput
  none: PublicNoticeVersionWhereInput
}

input PublicNoticeOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  urgency: OrderDirection
  effectiveDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input PublicNoticeUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  status: String
  drafts: PublicNoticeDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: PublicNoticeVersionRelateToManyForUpdateInput
  currentVersion: PublicNoticeVersionRelateToOneForUpdateInput
}

input ParkRelateToManyForUpdateInput {
  disconnect: [ParkWhereUniqueInput!]
  set: [ParkWhereUniqueInput!]
  create: [ParkCreateInput!]
  connect: [ParkWhereUniqueInput!]
}

input PublicNoticeDraftRelateToManyForUpdateInput {
  disconnect: [PublicNoticeDraftWhereUniqueInput!]
  set: [PublicNoticeDraftWhereUniqueInput!]
  create: [PublicNoticeDraftCreateInput!]
  connect: [PublicNoticeDraftWhereUniqueInput!]
}

input PublicNoticeVersionRelateToManyForUpdateInput {
  disconnect: [PublicNoticeVersionWhereUniqueInput!]
  set: [PublicNoticeVersionWhereUniqueInput!]
  create: [PublicNoticeVersionCreateInput!]
  connect: [PublicNoticeVersionWhereUniqueInput!]
}

input PublicNoticeVersionRelateToOneForUpdateInput {
  create: PublicNoticeVersionCreateInput
  connect: PublicNoticeVersionWhereUniqueInput
  disconnect: Boolean
}

input PublicNoticeUpdateArgs {
  where: PublicNoticeWhereUniqueInput!
  data: PublicNoticeUpdateInput!
}

input PublicNoticeCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  status: String
  drafts: PublicNoticeDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: PublicNoticeVersionRelateToManyForCreateInput
  currentVersion: PublicNoticeVersionRelateToOneForCreateInput
}

input ParkRelateToManyForCreateInput {
  create: [ParkCreateInput!]
  connect: [ParkWhereUniqueInput!]
}

input PublicNoticeDraftRelateToManyForCreateInput {
  create: [PublicNoticeDraftCreateInput!]
  connect: [PublicNoticeDraftWhereUniqueInput!]
}

input PublicNoticeVersionRelateToManyForCreateInput {
  create: [PublicNoticeVersionCreateInput!]
  connect: [PublicNoticeVersionWhereUniqueInput!]
}

input PublicNoticeVersionRelateToOneForCreateInput {
  create: PublicNoticeVersionCreateInput
  connect: PublicNoticeVersionWhereUniqueInput
}

type PublicNoticeVersion {
  id: ID!
  original: PublicNotice
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  isLive: PublicNotice
  republish: String
}

input PublicNoticeVersionWhereUniqueInput {
  id: ID
  isLive: PublicNoticeWhereUniqueInput
}

input PublicNoticeVersionWhereInput {
  AND: [PublicNoticeVersionWhereInput!]
  OR: [PublicNoticeVersionWhereInput!]
  NOT: [PublicNoticeVersionWhereInput!]
  id: IDFilter
  original: PublicNoticeWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  urgency: IntFilter
  effectiveDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  parks: ParkManyRelationFilter
  services: ServiceManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  facilities: FacilityManyRelationFilter
  trails: TrailManyRelationFilter
  communities: CommunityManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  boards: BoardManyRelationFilter
  isLive: PublicNoticeWhereInput
}

input PublicNoticeVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  urgency: OrderDirection
  effectiveDate: OrderDirection
  endDate: OrderDirection
  republish: OrderDirection
}

input PublicNoticeVersionUpdateInput {
  original: PublicNoticeRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  isLive: PublicNoticeRelateToOneForUpdateInput
  republish: String
}

input PublicNoticeRelateToOneForUpdateInput {
  create: PublicNoticeCreateInput
  connect: PublicNoticeWhereUniqueInput
  disconnect: Boolean
}

input PublicNoticeVersionUpdateArgs {
  where: PublicNoticeVersionWhereUniqueInput!
  data: PublicNoticeVersionUpdateInput!
}

input PublicNoticeVersionCreateInput {
  original: PublicNoticeRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  isLive: PublicNoticeRelateToOneForCreateInput
  republish: String
}

input PublicNoticeRelateToOneForCreateInput {
  create: PublicNoticeCreateInput
  connect: PublicNoticeWhereUniqueInput
}

type PublicNoticeDraft {
  id: ID!
  original: PublicNotice
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  publish: String
}

input PublicNoticeDraftWhereUniqueInput {
  id: ID
}

input PublicNoticeDraftWhereInput {
  AND: [PublicNoticeDraftWhereInput!]
  OR: [PublicNoticeDraftWhereInput!]
  NOT: [PublicNoticeDraftWhereInput!]
  id: IDFilter
  original: PublicNoticeWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  urgency: IntFilter
  effectiveDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  parks: ParkManyRelationFilter
  services: ServiceManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  facilities: FacilityManyRelationFilter
  trails: TrailManyRelationFilter
  communities: CommunityManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  boards: BoardManyRelationFilter
}

input PublicNoticeDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  urgency: OrderDirection
  effectiveDate: OrderDirection
  endDate: OrderDirection
  publish: OrderDirection
}

input PublicNoticeDraftUpdateInput {
  original: PublicNoticeRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  publish: String
}

input PublicNoticeDraftUpdateArgs {
  where: PublicNoticeDraftWhereUniqueInput!
  data: PublicNoticeDraftUpdateInput!
}

input PublicNoticeDraftCreateInput {
  original: PublicNoticeRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  urgency: Int
  effectiveDate: DateTime
  endDate: DateTime
  parks: ParkRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  publish: String
}

type Service implements BasePageWithSlug & BasePage {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  primaryAction: ExternalLink
  secondaryActions(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  secondaryActionsCount(where: ExternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  primaryContact: Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  editorNotes: String
  status: String
  drafts(where: ServiceDraftWhereInput! = {}, orderBy: [ServiceDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceDraftWhereUniqueInput): [ServiceDraft!]
  draftsCount(where: ServiceDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: ServiceVersionWhereInput! = {}, orderBy: [ServiceVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceVersionWhereUniqueInput): [ServiceVersion!]
  versionsCount(where: ServiceVersionWhereInput! = {}): Int
  currentVersion: ServiceVersion
}

input ServiceWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: ServiceVersionWhereUniqueInput
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  primaryAction: ExternalLinkWhereInput
  secondaryActions: ExternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  primaryContact: ContactWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  trails: TrailManyRelationFilter
  parks: ParkManyRelationFilter
  facilities: FacilityManyRelationFilter
  editorNotes: StringFilter
  status: StringFilter
  drafts: ServiceDraftManyRelationFilter
  versions: ServiceVersionManyRelationFilter
  currentVersion: ServiceVersionWhereInput
}

input ExternalLinkManyRelationFilter {
  every: ExternalLinkWhereInput
  some: ExternalLinkWhereInput
  none: ExternalLinkWhereInput
}

input ServiceDraftManyRelationFilter {
  every: ServiceDraftWhereInput
  some: ServiceDraftWhereInput
  none: ServiceDraftWhereInput
}

input ServiceVersionManyRelationFilter {
  every: ServiceVersionWhereInput
  some: ServiceVersionWhereInput
  none: ServiceVersionWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input ServiceUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  primaryAction: ExternalLinkRelateToOneForUpdateInput
  secondaryActions: ExternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  primaryContact: ContactRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  editorNotes: String
  status: String
  drafts: ServiceDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: ServiceVersionRelateToManyForUpdateInput
  currentVersion: ServiceVersionRelateToOneForUpdateInput
}

input ExternalLinkRelateToManyForUpdateInput {
  disconnect: [ExternalLinkWhereUniqueInput!]
  set: [ExternalLinkWhereUniqueInput!]
  create: [ExternalLinkCreateInput!]
  connect: [ExternalLinkWhereUniqueInput!]
}

input ServiceDraftRelateToManyForUpdateInput {
  disconnect: [ServiceDraftWhereUniqueInput!]
  set: [ServiceDraftWhereUniqueInput!]
  create: [ServiceDraftCreateInput!]
  connect: [ServiceDraftWhereUniqueInput!]
}

input ServiceVersionRelateToManyForUpdateInput {
  disconnect: [ServiceVersionWhereUniqueInput!]
  set: [ServiceVersionWhereUniqueInput!]
  create: [ServiceVersionCreateInput!]
  connect: [ServiceVersionWhereUniqueInput!]
}

input ServiceVersionRelateToOneForUpdateInput {
  create: ServiceVersionCreateInput
  connect: ServiceVersionWhereUniqueInput
  disconnect: Boolean
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  primaryAction: ExternalLinkRelateToOneForCreateInput
  secondaryActions: ExternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  primaryContact: ContactRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  editorNotes: String
  status: String
  drafts: ServiceDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: ServiceVersionRelateToManyForCreateInput
  currentVersion: ServiceVersionRelateToOneForCreateInput
}

input ExternalLinkRelateToManyForCreateInput {
  create: [ExternalLinkCreateInput!]
  connect: [ExternalLinkWhereUniqueInput!]
}

input ServiceDraftRelateToManyForCreateInput {
  create: [ServiceDraftCreateInput!]
  connect: [ServiceDraftWhereUniqueInput!]
}

input ServiceVersionRelateToManyForCreateInput {
  create: [ServiceVersionCreateInput!]
  connect: [ServiceVersionWhereUniqueInput!]
}

input ServiceVersionRelateToOneForCreateInput {
  create: ServiceVersionCreateInput
  connect: ServiceVersionWhereUniqueInput
}

type ServiceVersion {
  id: ID!
  original: Service
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  primaryAction: ExternalLink
  secondaryActions(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  secondaryActionsCount(where: ExternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  primaryContact: Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  editorNotes: String
  isLive: Service
  republish: String
}

input ServiceVersionWhereUniqueInput {
  id: ID
  isLive: ServiceWhereUniqueInput
}

input ServiceVersionWhereInput {
  AND: [ServiceVersionWhereInput!]
  OR: [ServiceVersionWhereInput!]
  NOT: [ServiceVersionWhereInput!]
  id: IDFilter
  original: ServiceWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  primaryAction: ExternalLinkWhereInput
  secondaryActions: ExternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  primaryContact: ContactWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  trails: TrailManyRelationFilter
  parks: ParkManyRelationFilter
  facilities: FacilityManyRelationFilter
  editorNotes: StringFilter
  isLive: ServiceWhereInput
}

input ServiceVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
  republish: OrderDirection
}

input ServiceVersionUpdateInput {
  original: ServiceRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  primaryAction: ExternalLinkRelateToOneForUpdateInput
  secondaryActions: ExternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  primaryContact: ContactRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  editorNotes: String
  isLive: ServiceRelateToOneForUpdateInput
  republish: String
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input ServiceVersionUpdateArgs {
  where: ServiceVersionWhereUniqueInput!
  data: ServiceVersionUpdateInput!
}

input ServiceVersionCreateInput {
  original: ServiceRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  primaryAction: ExternalLinkRelateToOneForCreateInput
  secondaryActions: ExternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  primaryContact: ContactRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  editorNotes: String
  isLive: ServiceRelateToOneForCreateInput
  republish: String
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type ServiceDraft {
  id: ID!
  original: Service
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  primaryAction: ExternalLink
  secondaryActions(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  secondaryActionsCount(where: ExternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  primaryContact: Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  editorNotes: String
  publish: String
}

input ServiceDraftWhereUniqueInput {
  id: ID
}

input ServiceDraftWhereInput {
  AND: [ServiceDraftWhereInput!]
  OR: [ServiceDraftWhereInput!]
  NOT: [ServiceDraftWhereInput!]
  id: IDFilter
  original: ServiceWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  primaryAction: ExternalLinkWhereInput
  secondaryActions: ExternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  primaryContact: ContactWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  trails: TrailManyRelationFilter
  parks: ParkManyRelationFilter
  facilities: FacilityManyRelationFilter
  editorNotes: StringFilter
}

input ServiceDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
  publish: OrderDirection
}

input ServiceDraftUpdateInput {
  original: ServiceRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  primaryAction: ExternalLinkRelateToOneForUpdateInput
  secondaryActions: ExternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  primaryContact: ContactRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  editorNotes: String
  publish: String
}

input ServiceDraftUpdateArgs {
  where: ServiceDraftWhereUniqueInput!
  data: ServiceDraftUpdateInput!
}

input ServiceDraftCreateInput {
  original: ServiceRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  primaryAction: ExternalLinkRelateToOneForCreateInput
  secondaryActions: ExternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  primaryContact: ContactRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  editorNotes: String
  publish: String
}

type Topic implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  highlights(where: HighlightWhereInput! = {}, orderBy: [HighlightOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: HighlightWhereUniqueInput): [Highlight!]
  highlightsCount(where: HighlightWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  status: String
  drafts(where: TopicDraftWhereInput! = {}, orderBy: [TopicDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicDraftWhereUniqueInput): [TopicDraft!]
  draftsCount(where: TopicDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: TopicVersionWhereInput! = {}, orderBy: [TopicVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicVersionWhereUniqueInput): [TopicVersion!]
  versionsCount(where: TopicVersionWhereInput! = {}): Int
  currentVersion: TopicVersion
}

input TopicWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: TopicVersionWhereUniqueInput
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  highlights: HighlightManyRelationFilter
  boards: BoardManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
  plans: PlanManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  status: StringFilter
  drafts: TopicDraftManyRelationFilter
  versions: TopicVersionManyRelationFilter
  currentVersion: TopicVersionWhereInput
}

input HighlightManyRelationFilter {
  every: HighlightWhereInput
  some: HighlightWhereInput
  none: HighlightWhereInput
}

input PublicNoticeManyRelationFilter {
  every: PublicNoticeWhereInput
  some: PublicNoticeWhereInput
  none: PublicNoticeWhereInput
}

input PlanManyRelationFilter {
  every: PlanWhereInput
  some: PlanWhereInput
  none: PlanWhereInput
}

input TopicDraftManyRelationFilter {
  every: TopicDraftWhereInput
  some: TopicDraftWhereInput
  none: TopicDraftWhereInput
}

input TopicVersionManyRelationFilter {
  every: TopicVersionWhereInput
  some: TopicVersionWhereInput
  none: TopicVersionWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input TopicUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  highlights: HighlightRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  status: String
  drafts: TopicDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: TopicVersionRelateToManyForUpdateInput
  currentVersion: TopicVersionRelateToOneForUpdateInput
}

input HighlightRelateToManyForUpdateInput {
  disconnect: [HighlightWhereUniqueInput!]
  set: [HighlightWhereUniqueInput!]
  create: [HighlightCreateInput!]
  connect: [HighlightWhereUniqueInput!]
}

input PublicNoticeRelateToManyForUpdateInput {
  disconnect: [PublicNoticeWhereUniqueInput!]
  set: [PublicNoticeWhereUniqueInput!]
  create: [PublicNoticeCreateInput!]
  connect: [PublicNoticeWhereUniqueInput!]
}

input PlanRelateToManyForUpdateInput {
  disconnect: [PlanWhereUniqueInput!]
  set: [PlanWhereUniqueInput!]
  create: [PlanCreateInput!]
  connect: [PlanWhereUniqueInput!]
}

input TopicDraftRelateToManyForUpdateInput {
  disconnect: [TopicDraftWhereUniqueInput!]
  set: [TopicDraftWhereUniqueInput!]
  create: [TopicDraftCreateInput!]
  connect: [TopicDraftWhereUniqueInput!]
}

input TopicVersionRelateToManyForUpdateInput {
  disconnect: [TopicVersionWhereUniqueInput!]
  set: [TopicVersionWhereUniqueInput!]
  create: [TopicVersionCreateInput!]
  connect: [TopicVersionWhereUniqueInput!]
}

input TopicVersionRelateToOneForUpdateInput {
  create: TopicVersionCreateInput
  connect: TopicVersionWhereUniqueInput
  disconnect: Boolean
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  highlights: HighlightRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  status: String
  drafts: TopicDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: TopicVersionRelateToManyForCreateInput
  currentVersion: TopicVersionRelateToOneForCreateInput
}

input HighlightRelateToManyForCreateInput {
  create: [HighlightCreateInput!]
  connect: [HighlightWhereUniqueInput!]
}

input PublicNoticeRelateToManyForCreateInput {
  create: [PublicNoticeCreateInput!]
  connect: [PublicNoticeWhereUniqueInput!]
}

input PlanRelateToManyForCreateInput {
  create: [PlanCreateInput!]
  connect: [PlanWhereUniqueInput!]
}

input TopicDraftRelateToManyForCreateInput {
  create: [TopicDraftCreateInput!]
  connect: [TopicDraftWhereUniqueInput!]
}

input TopicVersionRelateToManyForCreateInput {
  create: [TopicVersionCreateInput!]
  connect: [TopicVersionWhereUniqueInput!]
}

input TopicVersionRelateToOneForCreateInput {
  create: TopicVersionCreateInput
  connect: TopicVersionWhereUniqueInput
}

type TopicVersion {
  id: ID!
  original: Topic
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  highlights(where: HighlightWhereInput! = {}, orderBy: [HighlightOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: HighlightWhereUniqueInput): [Highlight!]
  highlightsCount(where: HighlightWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  isLive: Topic
  republish: String
}

input TopicVersionWhereUniqueInput {
  id: ID
  isLive: TopicWhereUniqueInput
}

input TopicVersionWhereInput {
  AND: [TopicVersionWhereInput!]
  OR: [TopicVersionWhereInput!]
  NOT: [TopicVersionWhereInput!]
  id: IDFilter
  original: TopicWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  highlights: HighlightManyRelationFilter
  boards: BoardManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
  plans: PlanManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  isLive: TopicWhereInput
}

input TopicVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  republish: OrderDirection
}

input TopicVersionUpdateInput {
  original: TopicRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  highlights: HighlightRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  isLive: TopicRelateToOneForUpdateInput
  republish: String
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input TopicVersionUpdateArgs {
  where: TopicVersionWhereUniqueInput!
  data: TopicVersionUpdateInput!
}

input TopicVersionCreateInput {
  original: TopicRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  highlights: HighlightRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  isLive: TopicRelateToOneForCreateInput
  republish: String
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

type TopicDraft {
  id: ID!
  original: Topic
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  highlights(where: HighlightWhereInput! = {}, orderBy: [HighlightOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: HighlightWhereUniqueInput): [Highlight!]
  highlightsCount(where: HighlightWhereInput! = {}): Int
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  publish: String
}

input TopicDraftWhereUniqueInput {
  id: ID
}

input TopicDraftWhereInput {
  AND: [TopicDraftWhereInput!]
  OR: [TopicDraftWhereInput!]
  NOT: [TopicDraftWhereInput!]
  id: IDFilter
  original: TopicWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  highlights: HighlightManyRelationFilter
  boards: BoardManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
  plans: PlanManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
}

input TopicDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  publish: OrderDirection
}

input TopicDraftUpdateInput {
  original: TopicRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  highlights: HighlightRelateToManyForUpdateInput
  boards: BoardRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  publish: String
}

input TopicDraftUpdateArgs {
  where: TopicDraftWhereUniqueInput!
  data: TopicDraftUpdateInput!
}

input TopicDraftCreateInput {
  original: TopicRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  highlights: HighlightRelateToManyForCreateInput
  boards: BoardRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  publish: String
}

type Trail implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
  status: String
  drafts(where: TrailDraftWhereInput! = {}, orderBy: [TrailDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailDraftWhereUniqueInput): [TrailDraft!]
  draftsCount(where: TrailDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: TrailVersionWhereInput! = {}, orderBy: [TrailVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailVersionWhereUniqueInput): [TrailVersion!]
  versionsCount(where: TrailVersionWhereInput! = {}): Int
  currentVersion: TrailVersion
}

input TrailWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: TrailVersionWhereUniqueInput
}

input TrailWhereInput {
  AND: [TrailWhereInput!]
  OR: [TrailWhereInput!]
  NOT: [TrailWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  open: BooleanFilter
  summer: BooleanFilter
  fall: BooleanFilter
  winter: BooleanFilter
  spring: BooleanFilter
  hiking: BooleanFilter
  biking: BooleanFilter
  horsebackRiding: BooleanFilter
  crossCountrySkiing: BooleanFilter
  snowshoeing: BooleanFilter
  frisbeeGolf: BooleanFilter
  dogWalking: BooleanFilter
  running: BooleanFilter
  snowMachining: BooleanFilter
  atv: BooleanFilter
  dirtBiking: BooleanFilter
  mushing: BooleanFilter
  difficulty: StringNullableFilter
  length: StringFilter
  elevationChange: StringFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
  status: StringFilter
  drafts: TrailDraftManyRelationFilter
  versions: TrailVersionManyRelationFilter
  currentVersion: TrailVersionWhereInput
}

input TrailDraftManyRelationFilter {
  every: TrailDraftWhereInput
  some: TrailDraftWhereInput
  none: TrailDraftWhereInput
}

input TrailVersionManyRelationFilter {
  every: TrailVersionWhereInput
  some: TrailVersionWhereInput
  none: TrailVersionWhereInput
}

input TrailOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  open: OrderDirection
  summer: OrderDirection
  fall: OrderDirection
  winter: OrderDirection
  spring: OrderDirection
  hiking: OrderDirection
  biking: OrderDirection
  horsebackRiding: OrderDirection
  crossCountrySkiing: OrderDirection
  snowshoeing: OrderDirection
  frisbeeGolf: OrderDirection
  dogWalking: OrderDirection
  running: OrderDirection
  snowMachining: OrderDirection
  atv: OrderDirection
  dirtBiking: OrderDirection
  mushing: OrderDirection
  difficulty: OrderDirection
  length: OrderDirection
  elevationChange: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input TrailUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
  status: String
  drafts: TrailDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: TrailVersionRelateToManyForUpdateInput
  currentVersion: TrailVersionRelateToOneForUpdateInput
}

input TrailDraftRelateToManyForUpdateInput {
  disconnect: [TrailDraftWhereUniqueInput!]
  set: [TrailDraftWhereUniqueInput!]
  create: [TrailDraftCreateInput!]
  connect: [TrailDraftWhereUniqueInput!]
}

input TrailVersionRelateToManyForUpdateInput {
  disconnect: [TrailVersionWhereUniqueInput!]
  set: [TrailVersionWhereUniqueInput!]
  create: [TrailVersionCreateInput!]
  connect: [TrailVersionWhereUniqueInput!]
}

input TrailVersionRelateToOneForUpdateInput {
  create: TrailVersionCreateInput
  connect: TrailVersionWhereUniqueInput
  disconnect: Boolean
}

input TrailUpdateArgs {
  where: TrailWhereUniqueInput!
  data: TrailUpdateInput!
}

input TrailCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
  status: String
  drafts: TrailDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: TrailVersionRelateToManyForCreateInput
  currentVersion: TrailVersionRelateToOneForCreateInput
}

input TrailDraftRelateToManyForCreateInput {
  create: [TrailDraftCreateInput!]
  connect: [TrailDraftWhereUniqueInput!]
}

input TrailVersionRelateToManyForCreateInput {
  create: [TrailVersionCreateInput!]
  connect: [TrailVersionWhereUniqueInput!]
}

input TrailVersionRelateToOneForCreateInput {
  create: TrailVersionCreateInput
  connect: TrailVersionWhereUniqueInput
}

type TrailVersion {
  id: ID!
  original: Trail
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
  isLive: Trail
  republish: String
}

input TrailVersionWhereUniqueInput {
  id: ID
  isLive: TrailWhereUniqueInput
}

input TrailVersionWhereInput {
  AND: [TrailVersionWhereInput!]
  OR: [TrailVersionWhereInput!]
  NOT: [TrailVersionWhereInput!]
  id: IDFilter
  original: TrailWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  open: BooleanFilter
  summer: BooleanFilter
  fall: BooleanFilter
  winter: BooleanFilter
  spring: BooleanFilter
  hiking: BooleanFilter
  biking: BooleanFilter
  horsebackRiding: BooleanFilter
  crossCountrySkiing: BooleanFilter
  snowshoeing: BooleanFilter
  frisbeeGolf: BooleanFilter
  dogWalking: BooleanFilter
  running: BooleanFilter
  snowMachining: BooleanFilter
  atv: BooleanFilter
  dirtBiking: BooleanFilter
  mushing: BooleanFilter
  difficulty: StringNullableFilter
  length: StringFilter
  elevationChange: StringFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
  isLive: TrailWhereInput
}

input TrailVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  open: OrderDirection
  summer: OrderDirection
  fall: OrderDirection
  winter: OrderDirection
  spring: OrderDirection
  hiking: OrderDirection
  biking: OrderDirection
  horsebackRiding: OrderDirection
  crossCountrySkiing: OrderDirection
  snowshoeing: OrderDirection
  frisbeeGolf: OrderDirection
  dogWalking: OrderDirection
  running: OrderDirection
  snowMachining: OrderDirection
  atv: OrderDirection
  dirtBiking: OrderDirection
  mushing: OrderDirection
  difficulty: OrderDirection
  length: OrderDirection
  elevationChange: OrderDirection
  republish: OrderDirection
}

input TrailVersionUpdateInput {
  original: TrailRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
  isLive: TrailRelateToOneForUpdateInput
  republish: String
}

input TrailRelateToOneForUpdateInput {
  create: TrailCreateInput
  connect: TrailWhereUniqueInput
  disconnect: Boolean
}

input TrailVersionUpdateArgs {
  where: TrailVersionWhereUniqueInput!
  data: TrailVersionUpdateInput!
}

input TrailVersionCreateInput {
  original: TrailRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
  isLive: TrailRelateToOneForCreateInput
  republish: String
}

input TrailRelateToOneForCreateInput {
  create: TrailCreateInput
  connect: TrailWhereUniqueInput
}

type TrailDraft {
  id: ID!
  original: Trail
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  address: Location
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  park: Park
  publish: String
}

input TrailDraftWhereUniqueInput {
  id: ID
}

input TrailDraftWhereInput {
  AND: [TrailDraftWhereInput!]
  OR: [TrailDraftWhereInput!]
  NOT: [TrailDraftWhereInput!]
  id: IDFilter
  original: TrailWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  address: LocationWhereInput
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  open: BooleanFilter
  summer: BooleanFilter
  fall: BooleanFilter
  winter: BooleanFilter
  spring: BooleanFilter
  hiking: BooleanFilter
  biking: BooleanFilter
  horsebackRiding: BooleanFilter
  crossCountrySkiing: BooleanFilter
  snowshoeing: BooleanFilter
  frisbeeGolf: BooleanFilter
  dogWalking: BooleanFilter
  running: BooleanFilter
  snowMachining: BooleanFilter
  atv: BooleanFilter
  dirtBiking: BooleanFilter
  mushing: BooleanFilter
  difficulty: StringNullableFilter
  length: StringFilter
  elevationChange: StringFilter
  services: ServiceManyRelationFilter
  park: ParkWhereInput
}

input TrailDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  open: OrderDirection
  summer: OrderDirection
  fall: OrderDirection
  winter: OrderDirection
  spring: OrderDirection
  hiking: OrderDirection
  biking: OrderDirection
  horsebackRiding: OrderDirection
  crossCountrySkiing: OrderDirection
  snowshoeing: OrderDirection
  frisbeeGolf: OrderDirection
  dogWalking: OrderDirection
  running: OrderDirection
  snowMachining: OrderDirection
  atv: OrderDirection
  dirtBiking: OrderDirection
  mushing: OrderDirection
  difficulty: OrderDirection
  length: OrderDirection
  elevationChange: OrderDirection
  publish: OrderDirection
}

input TrailDraftUpdateInput {
  original: TrailRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  address: LocationRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForUpdateInput
  park: ParkRelateToOneForUpdateInput
  publish: String
}

input TrailDraftUpdateArgs {
  where: TrailDraftWhereUniqueInput!
  data: TrailDraftUpdateInput!
}

input TrailDraftCreateInput {
  original: TrailRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  address: LocationRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  open: Boolean
  summer: Boolean
  fall: Boolean
  winter: Boolean
  spring: Boolean
  hiking: Boolean
  biking: Boolean
  horsebackRiding: Boolean
  crossCountrySkiing: Boolean
  snowshoeing: Boolean
  frisbeeGolf: Boolean
  dogWalking: Boolean
  running: Boolean
  snowMachining: Boolean
  atv: Boolean
  dirtBiking: Boolean
  mushing: Boolean
  difficulty: String
  length: String
  elevationChange: String
  services: ServiceRelateToManyForCreateInput
  park: ParkRelateToOneForCreateInput
  publish: String
}

type Plan implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLink
  autoRedirectToExternalWebsite: Int
  parent: Plan
  components(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  componentsCount(where: PlanWhereInput! = {}): Int
  type: String
  code(where: PlanCodeWhereInput! = {}, orderBy: [PlanCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanCodeWhereUniqueInput): [PlanCode!]
  codeCount(where: PlanCodeWhereInput! = {}): Int
  currentDocument: PlanDocument
  draftDocument: PlanDocument
  pastDocuments(where: PlanDocumentWhereInput! = {}, orderBy: [PlanDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanDocumentWhereUniqueInput): [PlanDocument!]
  pastDocumentsCount(where: PlanDocumentWhereInput! = {}): Int
  status: String
  drafts(where: PlanDraftWhereInput! = {}, orderBy: [PlanDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanDraftWhereUniqueInput): [PlanDraft!]
  draftsCount(where: PlanDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: PlanVersionWhereInput! = {}, orderBy: [PlanVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanVersionWhereUniqueInput): [PlanVersion!]
  versionsCount(where: PlanVersionWhereInput! = {}): Int
  currentVersion: PlanVersion
}

input PlanWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: PlanVersionWhereUniqueInput
}

input PlanWhereInput {
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  effort: ExternalLinkWhereInput
  autoRedirectToExternalWebsite: IntFilter
  parent: PlanWhereInput
  components: PlanManyRelationFilter
  type: StringFilter
  code: PlanCodeManyRelationFilter
  currentDocument: PlanDocumentWhereInput
  draftDocument: PlanDocumentWhereInput
  pastDocuments: PlanDocumentManyRelationFilter
  status: StringFilter
  drafts: PlanDraftManyRelationFilter
  versions: PlanVersionManyRelationFilter
  currentVersion: PlanVersionWhereInput
}

input PlanCodeManyRelationFilter {
  every: PlanCodeWhereInput
  some: PlanCodeWhereInput
  none: PlanCodeWhereInput
}

input PlanDocumentManyRelationFilter {
  every: PlanDocumentWhereInput
  some: PlanDocumentWhereInput
  none: PlanDocumentWhereInput
}

input PlanDraftManyRelationFilter {
  every: PlanDraftWhereInput
  some: PlanDraftWhereInput
  none: PlanDraftWhereInput
}

input PlanVersionManyRelationFilter {
  every: PlanVersionWhereInput
  some: PlanVersionWhereInput
  none: PlanVersionWhereInput
}

input PlanOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  autoRedirectToExternalWebsite: OrderDirection
  type: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input PlanUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLinkRelateToOneForUpdateInput
  autoRedirectToExternalWebsite: Int
  parent: PlanRelateToOneForUpdateInput
  components: PlanRelateToManyForUpdateInput
  type: String
  code: PlanCodeRelateToManyForUpdateInput
  currentDocument: PlanDocumentRelateToOneForUpdateInput
  draftDocument: PlanDocumentRelateToOneForUpdateInput
  pastDocuments: PlanDocumentRelateToManyForUpdateInput
  status: String
  drafts: PlanDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: PlanVersionRelateToManyForUpdateInput
  currentVersion: PlanVersionRelateToOneForUpdateInput
}

input PlanRelateToOneForUpdateInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
  disconnect: Boolean
}

input PlanCodeRelateToManyForUpdateInput {
  disconnect: [PlanCodeWhereUniqueInput!]
  set: [PlanCodeWhereUniqueInput!]
  create: [PlanCodeCreateInput!]
  connect: [PlanCodeWhereUniqueInput!]
}

input PlanDocumentRelateToOneForUpdateInput {
  create: PlanDocumentCreateInput
  connect: PlanDocumentWhereUniqueInput
  disconnect: Boolean
}

input PlanDocumentRelateToManyForUpdateInput {
  disconnect: [PlanDocumentWhereUniqueInput!]
  set: [PlanDocumentWhereUniqueInput!]
  create: [PlanDocumentCreateInput!]
  connect: [PlanDocumentWhereUniqueInput!]
}

input PlanDraftRelateToManyForUpdateInput {
  disconnect: [PlanDraftWhereUniqueInput!]
  set: [PlanDraftWhereUniqueInput!]
  create: [PlanDraftCreateInput!]
  connect: [PlanDraftWhereUniqueInput!]
}

input PlanVersionRelateToManyForUpdateInput {
  disconnect: [PlanVersionWhereUniqueInput!]
  set: [PlanVersionWhereUniqueInput!]
  create: [PlanVersionCreateInput!]
  connect: [PlanVersionWhereUniqueInput!]
}

input PlanVersionRelateToOneForUpdateInput {
  create: PlanVersionCreateInput
  connect: PlanVersionWhereUniqueInput
  disconnect: Boolean
}

input PlanUpdateArgs {
  where: PlanWhereUniqueInput!
  data: PlanUpdateInput!
}

input PlanCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLinkRelateToOneForCreateInput
  autoRedirectToExternalWebsite: Int
  parent: PlanRelateToOneForCreateInput
  components: PlanRelateToManyForCreateInput
  type: String
  code: PlanCodeRelateToManyForCreateInput
  currentDocument: PlanDocumentRelateToOneForCreateInput
  draftDocument: PlanDocumentRelateToOneForCreateInput
  pastDocuments: PlanDocumentRelateToManyForCreateInput
  status: String
  drafts: PlanDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: PlanVersionRelateToManyForCreateInput
  currentVersion: PlanVersionRelateToOneForCreateInput
}

input PlanRelateToOneForCreateInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
}

input PlanCodeRelateToManyForCreateInput {
  create: [PlanCodeCreateInput!]
  connect: [PlanCodeWhereUniqueInput!]
}

input PlanDocumentRelateToOneForCreateInput {
  create: PlanDocumentCreateInput
  connect: PlanDocumentWhereUniqueInput
}

input PlanDocumentRelateToManyForCreateInput {
  create: [PlanDocumentCreateInput!]
  connect: [PlanDocumentWhereUniqueInput!]
}

input PlanDraftRelateToManyForCreateInput {
  create: [PlanDraftCreateInput!]
  connect: [PlanDraftWhereUniqueInput!]
}

input PlanVersionRelateToManyForCreateInput {
  create: [PlanVersionCreateInput!]
  connect: [PlanVersionWhereUniqueInput!]
}

input PlanVersionRelateToOneForCreateInput {
  create: PlanVersionCreateInput
  connect: PlanVersionWhereUniqueInput
}

type PlanVersion {
  id: ID!
  original: Plan
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLink
  autoRedirectToExternalWebsite: Int
  parent: Plan
  components(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  componentsCount(where: PlanWhereInput! = {}): Int
  type: String
  code(where: PlanCodeWhereInput! = {}, orderBy: [PlanCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanCodeWhereUniqueInput): [PlanCode!]
  codeCount(where: PlanCodeWhereInput! = {}): Int
  currentDocument: PlanDocument
  draftDocument: PlanDocument
  pastDocuments(where: PlanDocumentWhereInput! = {}, orderBy: [PlanDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanDocumentWhereUniqueInput): [PlanDocument!]
  pastDocumentsCount(where: PlanDocumentWhereInput! = {}): Int
  isLive: Plan
  republish: String
}

input PlanVersionWhereUniqueInput {
  id: ID
  isLive: PlanWhereUniqueInput
}

input PlanVersionWhereInput {
  AND: [PlanVersionWhereInput!]
  OR: [PlanVersionWhereInput!]
  NOT: [PlanVersionWhereInput!]
  id: IDFilter
  original: PlanWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  effort: ExternalLinkWhereInput
  autoRedirectToExternalWebsite: IntFilter
  parent: PlanWhereInput
  components: PlanManyRelationFilter
  type: StringFilter
  code: PlanCodeManyRelationFilter
  currentDocument: PlanDocumentWhereInput
  draftDocument: PlanDocumentWhereInput
  pastDocuments: PlanDocumentManyRelationFilter
  isLive: PlanWhereInput
}

input PlanVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  autoRedirectToExternalWebsite: OrderDirection
  type: OrderDirection
  republish: OrderDirection
}

input PlanVersionUpdateInput {
  original: PlanRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLinkRelateToOneForUpdateInput
  autoRedirectToExternalWebsite: Int
  parent: PlanRelateToOneForUpdateInput
  components: PlanRelateToManyForUpdateInput
  type: String
  code: PlanCodeRelateToManyForUpdateInput
  currentDocument: PlanDocumentRelateToOneForUpdateInput
  draftDocument: PlanDocumentRelateToOneForUpdateInput
  pastDocuments: PlanDocumentRelateToManyForUpdateInput
  isLive: PlanRelateToOneForUpdateInput
  republish: String
}

input PlanVersionUpdateArgs {
  where: PlanVersionWhereUniqueInput!
  data: PlanVersionUpdateInput!
}

input PlanVersionCreateInput {
  original: PlanRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLinkRelateToOneForCreateInput
  autoRedirectToExternalWebsite: Int
  parent: PlanRelateToOneForCreateInput
  components: PlanRelateToManyForCreateInput
  type: String
  code: PlanCodeRelateToManyForCreateInput
  currentDocument: PlanDocumentRelateToOneForCreateInput
  draftDocument: PlanDocumentRelateToOneForCreateInput
  pastDocuments: PlanDocumentRelateToManyForCreateInput
  isLive: PlanRelateToOneForCreateInput
  republish: String
}

type PlanDraft {
  id: ID!
  original: Plan
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLink
  autoRedirectToExternalWebsite: Int
  parent: Plan
  components(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  componentsCount(where: PlanWhereInput! = {}): Int
  type: String
  code(where: PlanCodeWhereInput! = {}, orderBy: [PlanCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanCodeWhereUniqueInput): [PlanCode!]
  codeCount(where: PlanCodeWhereInput! = {}): Int
  currentDocument: PlanDocument
  draftDocument: PlanDocument
  pastDocuments(where: PlanDocumentWhereInput! = {}, orderBy: [PlanDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanDocumentWhereUniqueInput): [PlanDocument!]
  pastDocumentsCount(where: PlanDocumentWhereInput! = {}): Int
  publish: String
}

input PlanDraftWhereUniqueInput {
  id: ID
}

input PlanDraftWhereInput {
  AND: [PlanDraftWhereInput!]
  OR: [PlanDraftWhereInput!]
  NOT: [PlanDraftWhereInput!]
  id: IDFilter
  original: PlanWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  effort: ExternalLinkWhereInput
  autoRedirectToExternalWebsite: IntFilter
  parent: PlanWhereInput
  components: PlanManyRelationFilter
  type: StringFilter
  code: PlanCodeManyRelationFilter
  currentDocument: PlanDocumentWhereInput
  draftDocument: PlanDocumentWhereInput
  pastDocuments: PlanDocumentManyRelationFilter
}

input PlanDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  autoRedirectToExternalWebsite: OrderDirection
  type: OrderDirection
  publish: OrderDirection
}

input PlanDraftUpdateInput {
  original: PlanRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLinkRelateToOneForUpdateInput
  autoRedirectToExternalWebsite: Int
  parent: PlanRelateToOneForUpdateInput
  components: PlanRelateToManyForUpdateInput
  type: String
  code: PlanCodeRelateToManyForUpdateInput
  currentDocument: PlanDocumentRelateToOneForUpdateInput
  draftDocument: PlanDocumentRelateToOneForUpdateInput
  pastDocuments: PlanDocumentRelateToManyForUpdateInput
  publish: String
}

input PlanDraftUpdateArgs {
  where: PlanDraftWhereUniqueInput!
  data: PlanDraftUpdateInput!
}

input PlanDraftCreateInput {
  original: PlanRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  effort: ExternalLinkRelateToOneForCreateInput
  autoRedirectToExternalWebsite: Int
  parent: PlanRelateToOneForCreateInput
  components: PlanRelateToManyForCreateInput
  type: String
  code: PlanCodeRelateToManyForCreateInput
  currentDocument: PlanDocumentRelateToOneForCreateInput
  draftDocument: PlanDocumentRelateToOneForCreateInput
  pastDocuments: PlanDocumentRelateToManyForCreateInput
  publish: String
}

type PlanCode {
  id: ID!
  code: String
}

input PlanCodeWhereUniqueInput {
  id: ID
}

input PlanCodeWhereInput {
  AND: [PlanCodeWhereInput!]
  OR: [PlanCodeWhereInput!]
  NOT: [PlanCodeWhereInput!]
  id: IDFilter
  code: StringFilter
}

input PlanCodeOrderByInput {
  id: OrderDirection
  code: OrderDirection
}

input PlanCodeUpdateInput {
  code: String
}

input PlanCodeUpdateArgs {
  where: PlanCodeWhereUniqueInput!
  data: PlanCodeUpdateInput!
}

input PlanCodeCreateInput {
  code: String
}

type PlanDocument {
  id: ID!
  label: String
  supersededBy: PlanDocument
  precededBy: PlanDocument
  adoptedYear: Int
  document(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentCount(where: DocumentWhereInput! = {}): Int
}

input PlanDocumentWhereUniqueInput {
  id: ID
  supersededBy: PlanDocumentWhereUniqueInput
  precededBy: PlanDocumentWhereUniqueInput
}

input PlanDocumentWhereInput {
  AND: [PlanDocumentWhereInput!]
  OR: [PlanDocumentWhereInput!]
  NOT: [PlanDocumentWhereInput!]
  id: IDFilter
  label: StringFilter
  supersededBy: PlanDocumentWhereInput
  precededBy: PlanDocumentWhereInput
  adoptedYear: IntNullableFilter
  document: DocumentManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PlanDocumentOrderByInput {
  id: OrderDirection
  label: OrderDirection
  adoptedYear: OrderDirection
}

input PlanDocumentUpdateInput {
  label: String
  supersededBy: PlanDocumentRelateToOneForUpdateInput
  precededBy: PlanDocumentRelateToOneForUpdateInput
  adoptedYear: Int
  document: DocumentRelateToManyForUpdateInput
}

input PlanDocumentUpdateArgs {
  where: PlanDocumentWhereUniqueInput!
  data: PlanDocumentUpdateInput!
}

input PlanDocumentCreateInput {
  label: String
  supersededBy: PlanDocumentRelateToOneForCreateInput
  precededBy: PlanDocumentRelateToOneForCreateInput
  adoptedYear: Int
  document: DocumentRelateToManyForCreateInput
}

type Event implements BasePageWithSlug & BasePage & BasePageWithActions {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  status: String
  drafts(where: EventDraftWhereInput! = {}, orderBy: [EventDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventDraftWhereUniqueInput): [EventDraft!]
  draftsCount(where: EventDraftWhereInput! = {}): Int
  makeDrafts: String
  versions(where: EventVersionWhereInput! = {}, orderBy: [EventVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventVersionWhereUniqueInput): [EventVersion!]
  versionsCount(where: EventVersionWhereInput! = {}): Int
  currentVersion: EventVersion
}

input EventWhereUniqueInput {
  id: ID
  title: String
  slug: String
  currentVersion: EventVersionWhereUniqueInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  boards: BoardManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
  plans: PlanManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  status: StringFilter
  drafts: EventDraftManyRelationFilter
  versions: EventVersionManyRelationFilter
  currentVersion: EventVersionWhereInput
}

input EventDraftManyRelationFilter {
  every: EventDraftWhereInput
  some: EventDraftWhereInput
  none: EventDraftWhereInput
}

input EventVersionManyRelationFilter {
  every: EventVersionWhereInput
  some: EventVersionWhereInput
  none: EventVersionWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
  makeDrafts: OrderDirection
}

input EventUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards: BoardRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  status: String
  drafts: EventDraftRelateToManyForUpdateInput
  makeDrafts: String
  versions: EventVersionRelateToManyForUpdateInput
  currentVersion: EventVersionRelateToOneForUpdateInput
}

input EventDraftRelateToManyForUpdateInput {
  disconnect: [EventDraftWhereUniqueInput!]
  set: [EventDraftWhereUniqueInput!]
  create: [EventDraftCreateInput!]
  connect: [EventDraftWhereUniqueInput!]
}

input EventVersionRelateToManyForUpdateInput {
  disconnect: [EventVersionWhereUniqueInput!]
  set: [EventVersionWhereUniqueInput!]
  create: [EventVersionCreateInput!]
  connect: [EventVersionWhereUniqueInput!]
}

input EventVersionRelateToOneForUpdateInput {
  create: EventVersionCreateInput
  connect: EventVersionWhereUniqueInput
  disconnect: Boolean
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards: BoardRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  status: String
  drafts: EventDraftRelateToManyForCreateInput
  makeDrafts: String
  versions: EventVersionRelateToManyForCreateInput
  currentVersion: EventVersionRelateToOneForCreateInput
}

input EventDraftRelateToManyForCreateInput {
  create: [EventDraftCreateInput!]
  connect: [EventDraftWhereUniqueInput!]
}

input EventVersionRelateToManyForCreateInput {
  create: [EventVersionCreateInput!]
  connect: [EventVersionWhereUniqueInput!]
}

input EventVersionRelateToOneForCreateInput {
  create: EventVersionCreateInput
  connect: EventVersionWhereUniqueInput
}

type EventDraft {
  id: ID!
  original: Event
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  publish: String
}

input EventDraftWhereUniqueInput {
  id: ID
}

input EventDraftWhereInput {
  AND: [EventDraftWhereInput!]
  OR: [EventDraftWhereInput!]
  NOT: [EventDraftWhereInput!]
  id: IDFilter
  original: EventWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  boards: BoardManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
  plans: PlanManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
}

input EventDraftOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  publish: OrderDirection
}

input EventDraftUpdateInput {
  original: EventRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards: BoardRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  publish: String
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input EventDraftUpdateArgs {
  where: EventDraftWhereUniqueInput!
  data: EventDraftUpdateInput!
}

input EventDraftCreateInput {
  original: EventRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards: BoardRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  publish: String
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type EventVersion {
  id: ID!
  original: Event
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  owner: User
  body: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  redirect: Redirect
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  isLive: Event
  republish: String
}

input EventVersionWhereUniqueInput {
  id: ID
  isLive: EventWhereUniqueInput
}

input EventVersionWhereInput {
  AND: [EventVersionWhereInput!]
  OR: [EventVersionWhereInput!]
  NOT: [EventVersionWhereInput!]
  id: IDFilter
  original: EventWhereInput
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  owner: UserWhereInput
  body: MyStringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  actions: InternalLinkManyRelationFilter
  documents: DocumentManyRelationFilter
  contacts: ContactManyRelationFilter
  redirect: RedirectWhereInput
  events: EventManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  boards: BoardManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  parks: ParkManyRelationFilter
  trails: TrailManyRelationFilter
  facilities: FacilityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  publicNotices: PublicNoticeManyRelationFilter
  plans: PlanManyRelationFilter
  assemblyDistricts: AssemblyDistrictManyRelationFilter
  isLive: EventWhereInput
}

input EventVersionOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  body: MyOrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  republish: OrderDirection
}

input EventVersionUpdateInput {
  original: EventRelateToOneForUpdateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForUpdateInput
  body: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  actions: InternalLinkRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  redirect: RedirectRelateToOneForUpdateInput
  events: EventRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards: BoardRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  parks: ParkRelateToManyForUpdateInput
  trails: TrailRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  publicNotices: PublicNoticeRelateToManyForUpdateInput
  plans: PlanRelateToManyForUpdateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForUpdateInput
  isLive: EventRelateToOneForUpdateInput
  republish: String
}

input EventVersionUpdateArgs {
  where: EventVersionWhereUniqueInput!
  data: EventVersionUpdateInput!
}

input EventVersionCreateInput {
  original: EventRelateToOneForCreateInput
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: UserRelateToOneForCreateInput
  body: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  actions: InternalLinkRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  redirect: RedirectRelateToOneForCreateInput
  events: EventRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  startDate: DateTime
  endDate: DateTime
  boards: BoardRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  parks: ParkRelateToManyForCreateInput
  trails: TrailRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  publicNotices: PublicNoticeRelateToManyForCreateInput
  plans: PlanRelateToManyForCreateInput
  assemblyDistricts: AssemblyDistrictRelateToManyForCreateInput
  isLive: EventRelateToOneForCreateInput
  republish: String
}

type FacilityListItem {
  id: ID!
  order: Int
  facility: Facility
}

input FacilityListItemWhereUniqueInput {
  id: ID
}

input FacilityListItemWhereInput {
  AND: [FacilityListItemWhereInput!]
  OR: [FacilityListItemWhereInput!]
  NOT: [FacilityListItemWhereInput!]
  id: IDFilter
  order: IntFilter
  facility: FacilityWhereInput
}

input FacilityListItemOrderByInput {
  id: OrderDirection
  order: OrderDirection
}

input FacilityListItemUpdateInput {
  order: Int
  facility: FacilityRelateToOneForUpdateInput
}

input FacilityListItemUpdateArgs {
  where: FacilityListItemWhereUniqueInput!
  data: FacilityListItemUpdateInput!
}

input FacilityListItemCreateInput {
  order: Int
  facility: FacilityRelateToOneForCreateInput
}

type Document {
  id: ID!
  title: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  file: FileFieldOutput
  collections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  collectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  editorNotes: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
  collections: DocumentCollectionManyRelationFilter
  editorNotes: StringFilter
}

input DocumentCollectionManyRelationFilter {
  every: DocumentCollectionWhereInput
  some: DocumentCollectionWhereInput
  none: DocumentCollectionWhereInput
}

input DocumentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  editorNotes: OrderDirection
}

input DocumentUpdateInput {
  title: String
  description: String
  tags: TagRelateToManyForUpdateInput
  file: FileFieldInput
  collections: DocumentCollectionRelateToManyForUpdateInput
  editorNotes: String
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DocumentCollectionRelateToManyForUpdateInput {
  disconnect: [DocumentCollectionWhereUniqueInput!]
  set: [DocumentCollectionWhereUniqueInput!]
  create: [DocumentCollectionCreateInput!]
  connect: [DocumentCollectionWhereUniqueInput!]
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  title: String
  description: String
  tags: TagRelateToManyForCreateInput
  file: FileFieldInput
  collections: DocumentCollectionRelateToManyForCreateInput
  editorNotes: String
}

input DocumentCollectionRelateToManyForCreateInput {
  create: [DocumentCollectionCreateInput!]
  connect: [DocumentCollectionWhereUniqueInput!]
}

type DocumentCollection {
  id: ID!
  title: String
  description: String
  owner: User
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  liveUrl: String
  embed: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  editorNotes: String
  referencedBy: [Service]
}

input DocumentCollectionWhereUniqueInput {
  id: ID
  title: String
}

input DocumentCollectionWhereInput {
  AND: [DocumentCollectionWhereInput!]
  OR: [DocumentCollectionWhereInput!]
  NOT: [DocumentCollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  owner: UserWhereInput
  documents: DocumentManyRelationFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  editorNotes: StringFilter
}

input DocumentCollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  editorNotes: OrderDirection
}

input DocumentCollectionUpdateInput {
  title: String
  description: String
  owner: UserRelateToOneForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  editorNotes: String
}

input DocumentCollectionUpdateArgs {
  where: DocumentCollectionWhereUniqueInput!
  data: DocumentCollectionUpdateInput!
}

input DocumentCollectionCreateInput {
  title: String
  description: String
  owner: UserRelateToOneForCreateInput
  documents: DocumentRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  editorNotes: String
}

type DocumentListItem {
  id: ID!
  label: String
  order: Int
  document(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentCount(where: DocumentWhereInput! = {}): Int
}

input DocumentListItemWhereUniqueInput {
  id: ID
}

input DocumentListItemWhereInput {
  AND: [DocumentListItemWhereInput!]
  OR: [DocumentListItemWhereInput!]
  NOT: [DocumentListItemWhereInput!]
  id: IDFilter
  label: StringFilter
  order: IntFilter
  document: DocumentManyRelationFilter
}

input DocumentListItemOrderByInput {
  id: OrderDirection
  label: OrderDirection
  order: OrderDirection
}

input DocumentListItemUpdateInput {
  label: String
  order: Int
  document: DocumentRelateToManyForUpdateInput
}

input DocumentListItemUpdateArgs {
  where: DocumentListItemWhereUniqueInput!
  data: DocumentListItemUpdateInput!
}

input DocumentListItemCreateInput {
  label: String
  order: Int
  document: DocumentRelateToManyForCreateInput
}

type Image {
  id: ID!
  title: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  file: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
  title: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input ImageUpdateInput {
  title: String
  description: String
  tags: TagRelateToManyForUpdateInput
  file: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  description: String
  tags: TagRelateToManyForCreateInput
  file: ImageFieldInput
}

type ExternalLink {
  id: ID!
  label: String
  url: Url
}

input ExternalLinkWhereUniqueInput {
  id: ID
}

input ExternalLinkWhereInput {
  AND: [ExternalLinkWhereInput!]
  OR: [ExternalLinkWhereInput!]
  NOT: [ExternalLinkWhereInput!]
  id: IDFilter
  label: StringFilter
  url: UrlWhereInput
}

input ExternalLinkOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input ExternalLinkUpdateInput {
  label: String
  url: UrlRelateToOneForUpdateInput
}

input UrlRelateToOneForUpdateInput {
  create: UrlCreateInput
  connect: UrlWhereUniqueInput
  disconnect: Boolean
}

input ExternalLinkUpdateArgs {
  where: ExternalLinkWhereUniqueInput!
  data: ExternalLinkUpdateInput!
}

input ExternalLinkCreateInput {
  label: String
  url: UrlRelateToOneForCreateInput
}

input UrlRelateToOneForCreateInput {
  create: UrlCreateInput
  connect: UrlWhereUniqueInput
}

type InternalLink {
  id: ID!
  label: String
  selectItem: JSON
  item: LinkedItemUnion
}

union LinkedItemUnion = Service | Park | Trail | Facility | Community | AssemblyDistrict | OrgUnit | Url

input InternalLinkWhereUniqueInput {
  id: ID
}

input InternalLinkWhereInput {
  AND: [InternalLinkWhereInput!]
  OR: [InternalLinkWhereInput!]
  NOT: [InternalLinkWhereInput!]
  id: IDFilter
  label: StringFilter
}

input InternalLinkOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input InternalLinkUpdateInput {
  label: String
  selectItem: JSON
}

input InternalLinkUpdateArgs {
  where: InternalLinkWhereUniqueInput!
  data: InternalLinkUpdateInput!
}

input InternalLinkCreateInput {
  label: String
  selectItem: JSON
}

type Url {
  id: ID!
  title: String
  description: String
  url: String
  indexInSearchEngine: String
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input UrlWhereUniqueInput {
  id: ID
  title: String
  url: String
}

input UrlWhereInput {
  AND: [UrlWhereInput!]
  OR: [UrlWhereInput!]
  NOT: [UrlWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  url: StringFilter
  indexInSearchEngine: StringNullableFilter
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UrlOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  url: OrderDirection
  indexInSearchEngine: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UrlUpdateInput {
  title: String
  description: String
  url: String
  indexInSearchEngine: String
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UrlUpdateArgs {
  where: UrlWhereUniqueInput!
  data: UrlUpdateInput!
}

input UrlCreateInput {
  title: String
  description: String
  url: String
  indexInSearchEngine: String
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Highlight {
  id: ID!
  title: String
  image: String
  message: String
  linkedItem: InternalLink
  editorNotes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HighlightWhereUniqueInput {
  id: ID
  title: String
}

input HighlightWhereInput {
  AND: [HighlightWhereInput!]
  OR: [HighlightWhereInput!]
  NOT: [HighlightWhereInput!]
  id: IDFilter
  title: StringFilter
  message: StringFilter
  linkedItem: InternalLinkWhereInput
  editorNotes: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HighlightOrderByInput {
  id: OrderDirection
  title: OrderDirection
  image: BlueHarvestImageOrderDirection
  message: OrderDirection
  editorNotes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HighlightUpdateInput {
  title: String
  image: String
  message: String
  linkedItem: InternalLinkRelateToOneForUpdateInput
  editorNotes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input InternalLinkRelateToOneForUpdateInput {
  create: InternalLinkCreateInput
  connect: InternalLinkWhereUniqueInput
  disconnect: Boolean
}

input HighlightUpdateArgs {
  where: HighlightWhereUniqueInput!
  data: HighlightUpdateInput!
}

input HighlightCreateInput {
  title: String
  image: String
  message: String
  linkedItem: InternalLinkRelateToOneForCreateInput
  editorNotes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input InternalLinkRelateToOneForCreateInput {
  create: InternalLinkCreateInput
  connect: InternalLinkWhereUniqueInput
}

type Contact {
  id: ID!
  name: String
  title: String
  phone: String
  email: String
  address: Location
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringNullableFilter
  phone: StringNullableFilter
  email: StringNullableFilter
  address: LocationWhereInput
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  phone: OrderDirection
  email: OrderDirection
}

input ContactUpdateInput {
  name: String
  title: String
  phone: String
  email: String
  address: LocationRelateToOneForUpdateInput
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  title: String
  phone: String
  email: String
  address: LocationRelateToOneForCreateInput
}

type ContactListItem {
  id: ID!
  label: String
  order: Int
  contact: Contact
}

input ContactListItemWhereUniqueInput {
  id: ID
}

input ContactListItemWhereInput {
  AND: [ContactListItemWhereInput!]
  OR: [ContactListItemWhereInput!]
  NOT: [ContactListItemWhereInput!]
  id: IDFilter
  label: StringFilter
  order: IntFilter
  contact: ContactWhereInput
}

input ContactListItemOrderByInput {
  id: OrderDirection
  label: OrderDirection
  order: OrderDirection
}

input ContactListItemUpdateInput {
  label: String
  order: Int
  contact: ContactRelateToOneForUpdateInput
}

input ContactListItemUpdateArgs {
  where: ContactListItemWhereUniqueInput!
  data: ContactListItemUpdateInput!
}

input ContactListItemCreateInput {
  label: String
  order: Int
  contact: ContactRelateToOneForCreateInput
}

type Location {
  id: ID!
  title: String
  description: String
  lineOne: String
  lineTwo: String
  city: String
  state: String
  zip: String
}

input LocationWhereUniqueInput {
  id: ID
  title: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  lineOne: StringFilter
  lineTwo: StringFilter
  city: StringFilter
  state: StringFilter
  zip: StringFilter
}

input LocationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  lineOne: OrderDirection
  lineTwo: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zip: OrderDirection
}

input LocationUpdateInput {
  title: String
  description: String
  lineOne: String
  lineTwo: String
  city: String
  state: String
  zip: String
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  title: String
  description: String
  lineOne: String
  lineTwo: String
  city: String
  state: String
  zip: String
}

type OperatingHour {
  id: ID!
  day: String
  open: String
  close: String
}

input OperatingHourWhereUniqueInput {
  id: ID
}

input OperatingHourWhereInput {
  AND: [OperatingHourWhereInput!]
  OR: [OperatingHourWhereInput!]
  NOT: [OperatingHourWhereInput!]
  id: IDFilter
  day: StringFilter
  open: StringFilter
  close: StringFilter
}

input OperatingHourOrderByInput {
  id: OrderDirection
  day: OrderDirection
  open: OrderDirection
  close: OrderDirection
}

input OperatingHourUpdateInput {
  day: String
  open: String
  close: String
}

input OperatingHourUpdateArgs {
  where: OperatingHourWhereUniqueInput!
  data: OperatingHourUpdateInput!
}

input OperatingHourCreateInput {
  day: String
  open: String
  close: String
}

type User {
  id: ID!
  authId: String
  name: String
  email: String
  password: PasswordState
  role: Int
  groups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  groupsCount(where: UserGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  authId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  authId: StringFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  role: IntNullableFilter
  groups: UserGroupManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  authId: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  authId: String
  name: String
  email: String
  password: String
  role: Int
  groups: UserGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  authId: String
  name: String
  email: String
  password: String
  role: Int
  groups: UserGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type UserGroup {
  id: ID!
  name: String
  owner: User
  description: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input UserGroupWhereUniqueInput {
  id: ID
}

input UserGroupWhereInput {
  AND: [UserGroupWhereInput!]
  OR: [UserGroupWhereInput!]
  NOT: [UserGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  owner: UserWhereInput
  description: StringFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input UserGroupUpdateInput {
  name: String
  owner: UserRelateToOneForUpdateInput
  description: String
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserGroupUpdateArgs {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateInput!
}

input UserGroupCreateInput {
  name: String
  owner: UserRelateToOneForCreateInput
  description: String
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Alert {
  id: ID!
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input AlertWhereUniqueInput {
  id: ID
}

input AlertWhereInput {
  AND: [AlertWhereInput!]
  OR: [AlertWhereInput!]
  NOT: [AlertWhereInput!]
  id: IDFilter
  title: StringFilter
  body: MyStringFilter
  urgency: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  editorNotes: StringFilter
}

input AlertOrderByInput {
  id: OrderDirection
  title: OrderDirection
  body: MyOrderDirection
  urgency: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
}

input AlertUpdateInput {
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input AlertUpdateArgs {
  where: AlertWhereUniqueInput!
  data: AlertUpdateInput!
}

input AlertCreateInput {
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

type Tag {
  id: ID!
  name: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
}

type Redirect {
  id: ID!
  from: String
  to: InternalLink
  redirectMessage: String
}

input RedirectWhereUniqueInput {
  id: ID
  from: String
}

input RedirectWhereInput {
  AND: [RedirectWhereInput!]
  OR: [RedirectWhereInput!]
  NOT: [RedirectWhereInput!]
  id: IDFilter
  from: StringFilter
  to: InternalLinkWhereInput
  redirectMessage: StringFilter
}

input RedirectOrderByInput {
  id: OrderDirection
  from: OrderDirection
  redirectMessage: OrderDirection
}

input RedirectUpdateInput {
  from: String
  to: InternalLinkRelateToOneForUpdateInput
  redirectMessage: String
}

input RedirectUpdateArgs {
  where: RedirectWhereUniqueInput!
  data: RedirectUpdateInput!
}

input RedirectCreateInput {
  from: String
  to: InternalLinkRelateToOneForCreateInput
  redirectMessage: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createBoardPage(data: BoardPageCreateInput!): BoardPage
  createBoardPages(data: [BoardPageCreateInput!]!): [BoardPage]
  updateBoardPage(where: BoardPageWhereUniqueInput! = {id: 1}, data: BoardPageUpdateInput!): BoardPage
  updateBoardPages(data: [BoardPageUpdateArgs!]!): [BoardPage]
  deleteBoardPage(where: BoardPageWhereUniqueInput! = {id: 1}): BoardPage
  deleteBoardPages(where: [BoardPageWhereUniqueInput!]!): [BoardPage]
  createHomePage(data: HomePageCreateInput!): HomePage
  createHomePages(data: [HomePageCreateInput!]!): [HomePage]
  updateHomePage(where: HomePageWhereUniqueInput! = {id: 1}, data: HomePageUpdateInput!): HomePage
  updateHomePages(data: [HomePageUpdateArgs!]!): [HomePage]
  deleteHomePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  deleteHomePages(where: [HomePageWhereUniqueInput!]!): [HomePage]
  createElection(data: ElectionCreateInput!): Election
  createElections(data: [ElectionCreateInput!]!): [Election]
  updateElection(where: ElectionWhereUniqueInput!, data: ElectionUpdateInput!): Election
  updateElections(data: [ElectionUpdateArgs!]!): [Election]
  deleteElection(where: ElectionWhereUniqueInput!): Election
  deleteElections(where: [ElectionWhereUniqueInput!]!): [Election]
  createElectionVersion(data: ElectionVersionCreateInput!): ElectionVersion
  createElectionVersions(data: [ElectionVersionCreateInput!]!): [ElectionVersion]
  updateElectionVersion(where: ElectionVersionWhereUniqueInput!, data: ElectionVersionUpdateInput!): ElectionVersion
  updateElectionVersions(data: [ElectionVersionUpdateArgs!]!): [ElectionVersion]
  deleteElectionVersion(where: ElectionVersionWhereUniqueInput!): ElectionVersion
  deleteElectionVersions(where: [ElectionVersionWhereUniqueInput!]!): [ElectionVersion]
  createElectionDraft(data: ElectionDraftCreateInput!): ElectionDraft
  createElectionDrafts(data: [ElectionDraftCreateInput!]!): [ElectionDraft]
  updateElectionDraft(where: ElectionDraftWhereUniqueInput!, data: ElectionDraftUpdateInput!): ElectionDraft
  updateElectionDrafts(data: [ElectionDraftUpdateArgs!]!): [ElectionDraft]
  deleteElectionDraft(where: ElectionDraftWhereUniqueInput!): ElectionDraft
  deleteElectionDrafts(where: [ElectionDraftWhereUniqueInput!]!): [ElectionDraft]
  createElectionResult(data: ElectionResultCreateInput!): ElectionResult
  createElectionResults(data: [ElectionResultCreateInput!]!): [ElectionResult]
  updateElectionResult(where: ElectionResultWhereUniqueInput!, data: ElectionResultUpdateInput!): ElectionResult
  updateElectionResults(data: [ElectionResultUpdateArgs!]!): [ElectionResult]
  deleteElectionResult(where: ElectionResultWhereUniqueInput!): ElectionResult
  deleteElectionResults(where: [ElectionResultWhereUniqueInput!]!): [ElectionResult]
  createEarlyVotingLocation(data: EarlyVotingLocationCreateInput!): EarlyVotingLocation
  createEarlyVotingLocations(data: [EarlyVotingLocationCreateInput!]!): [EarlyVotingLocation]
  updateEarlyVotingLocation(where: EarlyVotingLocationWhereUniqueInput!, data: EarlyVotingLocationUpdateInput!): EarlyVotingLocation
  updateEarlyVotingLocations(data: [EarlyVotingLocationUpdateArgs!]!): [EarlyVotingLocation]
  deleteEarlyVotingLocation(where: EarlyVotingLocationWhereUniqueInput!): EarlyVotingLocation
  deleteEarlyVotingLocations(where: [EarlyVotingLocationWhereUniqueInput!]!): [EarlyVotingLocation]
  createElectionsPage(data: ElectionsPageCreateInput!): ElectionsPage
  createElectionsPages(data: [ElectionsPageCreateInput!]!): [ElectionsPage]
  updateElectionsPage(where: ElectionsPageWhereUniqueInput! = {id: 1}, data: ElectionsPageUpdateInput!): ElectionsPage
  updateElectionsPages(data: [ElectionsPageUpdateArgs!]!): [ElectionsPage]
  deleteElectionsPage(where: ElectionsPageWhereUniqueInput! = {id: 1}): ElectionsPage
  deleteElectionsPages(where: [ElectionsPageWhereUniqueInput!]!): [ElectionsPage]
  createAssemblyDistrict(data: AssemblyDistrictCreateInput!): AssemblyDistrict
  createAssemblyDistricts(data: [AssemblyDistrictCreateInput!]!): [AssemblyDistrict]
  updateAssemblyDistrict(where: AssemblyDistrictWhereUniqueInput!, data: AssemblyDistrictUpdateInput!): AssemblyDistrict
  updateAssemblyDistricts(data: [AssemblyDistrictUpdateArgs!]!): [AssemblyDistrict]
  deleteAssemblyDistrict(where: AssemblyDistrictWhereUniqueInput!): AssemblyDistrict
  deleteAssemblyDistricts(where: [AssemblyDistrictWhereUniqueInput!]!): [AssemblyDistrict]
  createAssemblyDistrictVersion(data: AssemblyDistrictVersionCreateInput!): AssemblyDistrictVersion
  createAssemblyDistrictVersions(data: [AssemblyDistrictVersionCreateInput!]!): [AssemblyDistrictVersion]
  updateAssemblyDistrictVersion(where: AssemblyDistrictVersionWhereUniqueInput!, data: AssemblyDistrictVersionUpdateInput!): AssemblyDistrictVersion
  updateAssemblyDistrictVersions(data: [AssemblyDistrictVersionUpdateArgs!]!): [AssemblyDistrictVersion]
  deleteAssemblyDistrictVersion(where: AssemblyDistrictVersionWhereUniqueInput!): AssemblyDistrictVersion
  deleteAssemblyDistrictVersions(where: [AssemblyDistrictVersionWhereUniqueInput!]!): [AssemblyDistrictVersion]
  createAssemblyDistrictDraft(data: AssemblyDistrictDraftCreateInput!): AssemblyDistrictDraft
  createAssemblyDistrictDrafts(data: [AssemblyDistrictDraftCreateInput!]!): [AssemblyDistrictDraft]
  updateAssemblyDistrictDraft(where: AssemblyDistrictDraftWhereUniqueInput!, data: AssemblyDistrictDraftUpdateInput!): AssemblyDistrictDraft
  updateAssemblyDistrictDrafts(data: [AssemblyDistrictDraftUpdateArgs!]!): [AssemblyDistrictDraft]
  deleteAssemblyDistrictDraft(where: AssemblyDistrictDraftWhereUniqueInput!): AssemblyDistrictDraft
  deleteAssemblyDistrictDrafts(where: [AssemblyDistrictDraftWhereUniqueInput!]!): [AssemblyDistrictDraft]
  createBoard(data: BoardCreateInput!): Board
  createBoards(data: [BoardCreateInput!]!): [Board]
  updateBoard(where: BoardWhereUniqueInput!, data: BoardUpdateInput!): Board
  updateBoards(data: [BoardUpdateArgs!]!): [Board]
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteBoards(where: [BoardWhereUniqueInput!]!): [Board]
  createBoardVersion(data: BoardVersionCreateInput!): BoardVersion
  createBoardVersions(data: [BoardVersionCreateInput!]!): [BoardVersion]
  updateBoardVersion(where: BoardVersionWhereUniqueInput!, data: BoardVersionUpdateInput!): BoardVersion
  updateBoardVersions(data: [BoardVersionUpdateArgs!]!): [BoardVersion]
  deleteBoardVersion(where: BoardVersionWhereUniqueInput!): BoardVersion
  deleteBoardVersions(where: [BoardVersionWhereUniqueInput!]!): [BoardVersion]
  createBoardDraft(data: BoardDraftCreateInput!): BoardDraft
  createBoardDrafts(data: [BoardDraftCreateInput!]!): [BoardDraft]
  updateBoardDraft(where: BoardDraftWhereUniqueInput!, data: BoardDraftUpdateInput!): BoardDraft
  updateBoardDrafts(data: [BoardDraftUpdateArgs!]!): [BoardDraft]
  deleteBoardDraft(where: BoardDraftWhereUniqueInput!): BoardDraft
  deleteBoardDrafts(where: [BoardDraftWhereUniqueInput!]!): [BoardDraft]
  createCommunity(data: CommunityCreateInput!): Community
  createCommunities(data: [CommunityCreateInput!]!): [Community]
  updateCommunity(where: CommunityWhereUniqueInput!, data: CommunityUpdateInput!): Community
  updateCommunities(data: [CommunityUpdateArgs!]!): [Community]
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteCommunities(where: [CommunityWhereUniqueInput!]!): [Community]
  createCommunityVersion(data: CommunityVersionCreateInput!): CommunityVersion
  createCommunityVersions(data: [CommunityVersionCreateInput!]!): [CommunityVersion]
  updateCommunityVersion(where: CommunityVersionWhereUniqueInput!, data: CommunityVersionUpdateInput!): CommunityVersion
  updateCommunityVersions(data: [CommunityVersionUpdateArgs!]!): [CommunityVersion]
  deleteCommunityVersion(where: CommunityVersionWhereUniqueInput!): CommunityVersion
  deleteCommunityVersions(where: [CommunityVersionWhereUniqueInput!]!): [CommunityVersion]
  createCommunityDraft(data: CommunityDraftCreateInput!): CommunityDraft
  createCommunityDrafts(data: [CommunityDraftCreateInput!]!): [CommunityDraft]
  updateCommunityDraft(where: CommunityDraftWhereUniqueInput!, data: CommunityDraftUpdateInput!): CommunityDraft
  updateCommunityDrafts(data: [CommunityDraftUpdateArgs!]!): [CommunityDraft]
  deleteCommunityDraft(where: CommunityDraftWhereUniqueInput!): CommunityDraft
  deleteCommunityDrafts(where: [CommunityDraftWhereUniqueInput!]!): [CommunityDraft]
  createFacility(data: FacilityCreateInput!): Facility
  createFacilities(data: [FacilityCreateInput!]!): [Facility]
  updateFacility(where: FacilityWhereUniqueInput!, data: FacilityUpdateInput!): Facility
  updateFacilities(data: [FacilityUpdateArgs!]!): [Facility]
  deleteFacility(where: FacilityWhereUniqueInput!): Facility
  deleteFacilities(where: [FacilityWhereUniqueInput!]!): [Facility]
  createFacilityVersion(data: FacilityVersionCreateInput!): FacilityVersion
  createFacilityVersions(data: [FacilityVersionCreateInput!]!): [FacilityVersion]
  updateFacilityVersion(where: FacilityVersionWhereUniqueInput!, data: FacilityVersionUpdateInput!): FacilityVersion
  updateFacilityVersions(data: [FacilityVersionUpdateArgs!]!): [FacilityVersion]
  deleteFacilityVersion(where: FacilityVersionWhereUniqueInput!): FacilityVersion
  deleteFacilityVersions(where: [FacilityVersionWhereUniqueInput!]!): [FacilityVersion]
  createFacilityDraft(data: FacilityDraftCreateInput!): FacilityDraft
  createFacilityDrafts(data: [FacilityDraftCreateInput!]!): [FacilityDraft]
  updateFacilityDraft(where: FacilityDraftWhereUniqueInput!, data: FacilityDraftUpdateInput!): FacilityDraft
  updateFacilityDrafts(data: [FacilityDraftUpdateArgs!]!): [FacilityDraft]
  deleteFacilityDraft(where: FacilityDraftWhereUniqueInput!): FacilityDraft
  deleteFacilityDrafts(where: [FacilityDraftWhereUniqueInput!]!): [FacilityDraft]
  createOrgUnit(data: OrgUnitCreateInput!): OrgUnit
  createOrgUnits(data: [OrgUnitCreateInput!]!): [OrgUnit]
  updateOrgUnit(where: OrgUnitWhereUniqueInput!, data: OrgUnitUpdateInput!): OrgUnit
  updateOrgUnits(data: [OrgUnitUpdateArgs!]!): [OrgUnit]
  deleteOrgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  deleteOrgUnits(where: [OrgUnitWhereUniqueInput!]!): [OrgUnit]
  createOrgUnitVersion(data: OrgUnitVersionCreateInput!): OrgUnitVersion
  createOrgUnitVersions(data: [OrgUnitVersionCreateInput!]!): [OrgUnitVersion]
  updateOrgUnitVersion(where: OrgUnitVersionWhereUniqueInput!, data: OrgUnitVersionUpdateInput!): OrgUnitVersion
  updateOrgUnitVersions(data: [OrgUnitVersionUpdateArgs!]!): [OrgUnitVersion]
  deleteOrgUnitVersion(where: OrgUnitVersionWhereUniqueInput!): OrgUnitVersion
  deleteOrgUnitVersions(where: [OrgUnitVersionWhereUniqueInput!]!): [OrgUnitVersion]
  createOrgUnitDraft(data: OrgUnitDraftCreateInput!): OrgUnitDraft
  createOrgUnitDrafts(data: [OrgUnitDraftCreateInput!]!): [OrgUnitDraft]
  updateOrgUnitDraft(where: OrgUnitDraftWhereUniqueInput!, data: OrgUnitDraftUpdateInput!): OrgUnitDraft
  updateOrgUnitDrafts(data: [OrgUnitDraftUpdateArgs!]!): [OrgUnitDraft]
  deleteOrgUnitDraft(where: OrgUnitDraftWhereUniqueInput!): OrgUnitDraft
  deleteOrgUnitDrafts(where: [OrgUnitDraftWhereUniqueInput!]!): [OrgUnitDraft]
  createPark(data: ParkCreateInput!): Park
  createParks(data: [ParkCreateInput!]!): [Park]
  updatePark(where: ParkWhereUniqueInput!, data: ParkUpdateInput!): Park
  updateParks(data: [ParkUpdateArgs!]!): [Park]
  deletePark(where: ParkWhereUniqueInput!): Park
  deleteParks(where: [ParkWhereUniqueInput!]!): [Park]
  createParkVersion(data: ParkVersionCreateInput!): ParkVersion
  createParkVersions(data: [ParkVersionCreateInput!]!): [ParkVersion]
  updateParkVersion(where: ParkVersionWhereUniqueInput!, data: ParkVersionUpdateInput!): ParkVersion
  updateParkVersions(data: [ParkVersionUpdateArgs!]!): [ParkVersion]
  deleteParkVersion(where: ParkVersionWhereUniqueInput!): ParkVersion
  deleteParkVersions(where: [ParkVersionWhereUniqueInput!]!): [ParkVersion]
  createParkDraft(data: ParkDraftCreateInput!): ParkDraft
  createParkDrafts(data: [ParkDraftCreateInput!]!): [ParkDraft]
  updateParkDraft(where: ParkDraftWhereUniqueInput!, data: ParkDraftUpdateInput!): ParkDraft
  updateParkDrafts(data: [ParkDraftUpdateArgs!]!): [ParkDraft]
  deleteParkDraft(where: ParkDraftWhereUniqueInput!): ParkDraft
  deleteParkDrafts(where: [ParkDraftWhereUniqueInput!]!): [ParkDraft]
  createPublicNotice(data: PublicNoticeCreateInput!): PublicNotice
  createPublicNotices(data: [PublicNoticeCreateInput!]!): [PublicNotice]
  updatePublicNotice(where: PublicNoticeWhereUniqueInput!, data: PublicNoticeUpdateInput!): PublicNotice
  updatePublicNotices(data: [PublicNoticeUpdateArgs!]!): [PublicNotice]
  deletePublicNotice(where: PublicNoticeWhereUniqueInput!): PublicNotice
  deletePublicNotices(where: [PublicNoticeWhereUniqueInput!]!): [PublicNotice]
  createPublicNoticeVersion(data: PublicNoticeVersionCreateInput!): PublicNoticeVersion
  createPublicNoticeVersions(data: [PublicNoticeVersionCreateInput!]!): [PublicNoticeVersion]
  updatePublicNoticeVersion(where: PublicNoticeVersionWhereUniqueInput!, data: PublicNoticeVersionUpdateInput!): PublicNoticeVersion
  updatePublicNoticeVersions(data: [PublicNoticeVersionUpdateArgs!]!): [PublicNoticeVersion]
  deletePublicNoticeVersion(where: PublicNoticeVersionWhereUniqueInput!): PublicNoticeVersion
  deletePublicNoticeVersions(where: [PublicNoticeVersionWhereUniqueInput!]!): [PublicNoticeVersion]
  createPublicNoticeDraft(data: PublicNoticeDraftCreateInput!): PublicNoticeDraft
  createPublicNoticeDrafts(data: [PublicNoticeDraftCreateInput!]!): [PublicNoticeDraft]
  updatePublicNoticeDraft(where: PublicNoticeDraftWhereUniqueInput!, data: PublicNoticeDraftUpdateInput!): PublicNoticeDraft
  updatePublicNoticeDrafts(data: [PublicNoticeDraftUpdateArgs!]!): [PublicNoticeDraft]
  deletePublicNoticeDraft(where: PublicNoticeDraftWhereUniqueInput!): PublicNoticeDraft
  deletePublicNoticeDrafts(where: [PublicNoticeDraftWhereUniqueInput!]!): [PublicNoticeDraft]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createServiceVersion(data: ServiceVersionCreateInput!): ServiceVersion
  createServiceVersions(data: [ServiceVersionCreateInput!]!): [ServiceVersion]
  updateServiceVersion(where: ServiceVersionWhereUniqueInput!, data: ServiceVersionUpdateInput!): ServiceVersion
  updateServiceVersions(data: [ServiceVersionUpdateArgs!]!): [ServiceVersion]
  deleteServiceVersion(where: ServiceVersionWhereUniqueInput!): ServiceVersion
  deleteServiceVersions(where: [ServiceVersionWhereUniqueInput!]!): [ServiceVersion]
  createServiceDraft(data: ServiceDraftCreateInput!): ServiceDraft
  createServiceDrafts(data: [ServiceDraftCreateInput!]!): [ServiceDraft]
  updateServiceDraft(where: ServiceDraftWhereUniqueInput!, data: ServiceDraftUpdateInput!): ServiceDraft
  updateServiceDrafts(data: [ServiceDraftUpdateArgs!]!): [ServiceDraft]
  deleteServiceDraft(where: ServiceDraftWhereUniqueInput!): ServiceDraft
  deleteServiceDrafts(where: [ServiceDraftWhereUniqueInput!]!): [ServiceDraft]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createTopicVersion(data: TopicVersionCreateInput!): TopicVersion
  createTopicVersions(data: [TopicVersionCreateInput!]!): [TopicVersion]
  updateTopicVersion(where: TopicVersionWhereUniqueInput!, data: TopicVersionUpdateInput!): TopicVersion
  updateTopicVersions(data: [TopicVersionUpdateArgs!]!): [TopicVersion]
  deleteTopicVersion(where: TopicVersionWhereUniqueInput!): TopicVersion
  deleteTopicVersions(where: [TopicVersionWhereUniqueInput!]!): [TopicVersion]
  createTopicDraft(data: TopicDraftCreateInput!): TopicDraft
  createTopicDrafts(data: [TopicDraftCreateInput!]!): [TopicDraft]
  updateTopicDraft(where: TopicDraftWhereUniqueInput!, data: TopicDraftUpdateInput!): TopicDraft
  updateTopicDrafts(data: [TopicDraftUpdateArgs!]!): [TopicDraft]
  deleteTopicDraft(where: TopicDraftWhereUniqueInput!): TopicDraft
  deleteTopicDrafts(where: [TopicDraftWhereUniqueInput!]!): [TopicDraft]
  createTrail(data: TrailCreateInput!): Trail
  createTrails(data: [TrailCreateInput!]!): [Trail]
  updateTrail(where: TrailWhereUniqueInput!, data: TrailUpdateInput!): Trail
  updateTrails(data: [TrailUpdateArgs!]!): [Trail]
  deleteTrail(where: TrailWhereUniqueInput!): Trail
  deleteTrails(where: [TrailWhereUniqueInput!]!): [Trail]
  createTrailVersion(data: TrailVersionCreateInput!): TrailVersion
  createTrailVersions(data: [TrailVersionCreateInput!]!): [TrailVersion]
  updateTrailVersion(where: TrailVersionWhereUniqueInput!, data: TrailVersionUpdateInput!): TrailVersion
  updateTrailVersions(data: [TrailVersionUpdateArgs!]!): [TrailVersion]
  deleteTrailVersion(where: TrailVersionWhereUniqueInput!): TrailVersion
  deleteTrailVersions(where: [TrailVersionWhereUniqueInput!]!): [TrailVersion]
  createTrailDraft(data: TrailDraftCreateInput!): TrailDraft
  createTrailDrafts(data: [TrailDraftCreateInput!]!): [TrailDraft]
  updateTrailDraft(where: TrailDraftWhereUniqueInput!, data: TrailDraftUpdateInput!): TrailDraft
  updateTrailDrafts(data: [TrailDraftUpdateArgs!]!): [TrailDraft]
  deleteTrailDraft(where: TrailDraftWhereUniqueInput!): TrailDraft
  deleteTrailDrafts(where: [TrailDraftWhereUniqueInput!]!): [TrailDraft]
  createPlan(data: PlanCreateInput!): Plan
  createPlans(data: [PlanCreateInput!]!): [Plan]
  updatePlan(where: PlanWhereUniqueInput!, data: PlanUpdateInput!): Plan
  updatePlans(data: [PlanUpdateArgs!]!): [Plan]
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deletePlans(where: [PlanWhereUniqueInput!]!): [Plan]
  createPlanVersion(data: PlanVersionCreateInput!): PlanVersion
  createPlanVersions(data: [PlanVersionCreateInput!]!): [PlanVersion]
  updatePlanVersion(where: PlanVersionWhereUniqueInput!, data: PlanVersionUpdateInput!): PlanVersion
  updatePlanVersions(data: [PlanVersionUpdateArgs!]!): [PlanVersion]
  deletePlanVersion(where: PlanVersionWhereUniqueInput!): PlanVersion
  deletePlanVersions(where: [PlanVersionWhereUniqueInput!]!): [PlanVersion]
  createPlanDraft(data: PlanDraftCreateInput!): PlanDraft
  createPlanDrafts(data: [PlanDraftCreateInput!]!): [PlanDraft]
  updatePlanDraft(where: PlanDraftWhereUniqueInput!, data: PlanDraftUpdateInput!): PlanDraft
  updatePlanDrafts(data: [PlanDraftUpdateArgs!]!): [PlanDraft]
  deletePlanDraft(where: PlanDraftWhereUniqueInput!): PlanDraft
  deletePlanDrafts(where: [PlanDraftWhereUniqueInput!]!): [PlanDraft]
  createPlanCode(data: PlanCodeCreateInput!): PlanCode
  createPlanCodes(data: [PlanCodeCreateInput!]!): [PlanCode]
  updatePlanCode(where: PlanCodeWhereUniqueInput!, data: PlanCodeUpdateInput!): PlanCode
  updatePlanCodes(data: [PlanCodeUpdateArgs!]!): [PlanCode]
  deletePlanCode(where: PlanCodeWhereUniqueInput!): PlanCode
  deletePlanCodes(where: [PlanCodeWhereUniqueInput!]!): [PlanCode]
  createPlanDocument(data: PlanDocumentCreateInput!): PlanDocument
  createPlanDocuments(data: [PlanDocumentCreateInput!]!): [PlanDocument]
  updatePlanDocument(where: PlanDocumentWhereUniqueInput!, data: PlanDocumentUpdateInput!): PlanDocument
  updatePlanDocuments(data: [PlanDocumentUpdateArgs!]!): [PlanDocument]
  deletePlanDocument(where: PlanDocumentWhereUniqueInput!): PlanDocument
  deletePlanDocuments(where: [PlanDocumentWhereUniqueInput!]!): [PlanDocument]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createEventDraft(data: EventDraftCreateInput!): EventDraft
  createEventDrafts(data: [EventDraftCreateInput!]!): [EventDraft]
  updateEventDraft(where: EventDraftWhereUniqueInput!, data: EventDraftUpdateInput!): EventDraft
  updateEventDrafts(data: [EventDraftUpdateArgs!]!): [EventDraft]
  deleteEventDraft(where: EventDraftWhereUniqueInput!): EventDraft
  deleteEventDrafts(where: [EventDraftWhereUniqueInput!]!): [EventDraft]
  createEventVersion(data: EventVersionCreateInput!): EventVersion
  createEventVersions(data: [EventVersionCreateInput!]!): [EventVersion]
  updateEventVersion(where: EventVersionWhereUniqueInput!, data: EventVersionUpdateInput!): EventVersion
  updateEventVersions(data: [EventVersionUpdateArgs!]!): [EventVersion]
  deleteEventVersion(where: EventVersionWhereUniqueInput!): EventVersion
  deleteEventVersions(where: [EventVersionWhereUniqueInput!]!): [EventVersion]
  createFacilityListItem(data: FacilityListItemCreateInput!): FacilityListItem
  createFacilityListItems(data: [FacilityListItemCreateInput!]!): [FacilityListItem]
  updateFacilityListItem(where: FacilityListItemWhereUniqueInput!, data: FacilityListItemUpdateInput!): FacilityListItem
  updateFacilityListItems(data: [FacilityListItemUpdateArgs!]!): [FacilityListItem]
  deleteFacilityListItem(where: FacilityListItemWhereUniqueInput!): FacilityListItem
  deleteFacilityListItems(where: [FacilityListItemWhereUniqueInput!]!): [FacilityListItem]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createDocumentCollection(data: DocumentCollectionCreateInput!): DocumentCollection
  createDocumentCollections(data: [DocumentCollectionCreateInput!]!): [DocumentCollection]
  updateDocumentCollection(where: DocumentCollectionWhereUniqueInput!, data: DocumentCollectionUpdateInput!): DocumentCollection
  updateDocumentCollections(data: [DocumentCollectionUpdateArgs!]!): [DocumentCollection]
  deleteDocumentCollection(where: DocumentCollectionWhereUniqueInput!): DocumentCollection
  deleteDocumentCollections(where: [DocumentCollectionWhereUniqueInput!]!): [DocumentCollection]
  createDocumentListItem(data: DocumentListItemCreateInput!): DocumentListItem
  createDocumentListItems(data: [DocumentListItemCreateInput!]!): [DocumentListItem]
  updateDocumentListItem(where: DocumentListItemWhereUniqueInput!, data: DocumentListItemUpdateInput!): DocumentListItem
  updateDocumentListItems(data: [DocumentListItemUpdateArgs!]!): [DocumentListItem]
  deleteDocumentListItem(where: DocumentListItemWhereUniqueInput!): DocumentListItem
  deleteDocumentListItems(where: [DocumentListItemWhereUniqueInput!]!): [DocumentListItem]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createExternalLink(data: ExternalLinkCreateInput!): ExternalLink
  createExternalLinks(data: [ExternalLinkCreateInput!]!): [ExternalLink]
  updateExternalLink(where: ExternalLinkWhereUniqueInput!, data: ExternalLinkUpdateInput!): ExternalLink
  updateExternalLinks(data: [ExternalLinkUpdateArgs!]!): [ExternalLink]
  deleteExternalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  deleteExternalLinks(where: [ExternalLinkWhereUniqueInput!]!): [ExternalLink]
  createInternalLink(data: InternalLinkCreateInput!): InternalLink
  createInternalLinks(data: [InternalLinkCreateInput!]!): [InternalLink]
  updateInternalLink(where: InternalLinkWhereUniqueInput!, data: InternalLinkUpdateInput!): InternalLink
  updateInternalLinks(data: [InternalLinkUpdateArgs!]!): [InternalLink]
  deleteInternalLink(where: InternalLinkWhereUniqueInput!): InternalLink
  deleteInternalLinks(where: [InternalLinkWhereUniqueInput!]!): [InternalLink]
  createUrl(data: UrlCreateInput!): Url
  createUrls(data: [UrlCreateInput!]!): [Url]
  updateUrl(where: UrlWhereUniqueInput!, data: UrlUpdateInput!): Url
  updateUrls(data: [UrlUpdateArgs!]!): [Url]
  deleteUrl(where: UrlWhereUniqueInput!): Url
  deleteUrls(where: [UrlWhereUniqueInput!]!): [Url]
  createHighlight(data: HighlightCreateInput!): Highlight
  createHighlights(data: [HighlightCreateInput!]!): [Highlight]
  updateHighlight(where: HighlightWhereUniqueInput!, data: HighlightUpdateInput!): Highlight
  updateHighlights(data: [HighlightUpdateArgs!]!): [Highlight]
  deleteHighlight(where: HighlightWhereUniqueInput!): Highlight
  deleteHighlights(where: [HighlightWhereUniqueInput!]!): [Highlight]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(where: ContactWhereUniqueInput!, data: ContactUpdateInput!): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createContactListItem(data: ContactListItemCreateInput!): ContactListItem
  createContactListItems(data: [ContactListItemCreateInput!]!): [ContactListItem]
  updateContactListItem(where: ContactListItemWhereUniqueInput!, data: ContactListItemUpdateInput!): ContactListItem
  updateContactListItems(data: [ContactListItemUpdateArgs!]!): [ContactListItem]
  deleteContactListItem(where: ContactListItemWhereUniqueInput!): ContactListItem
  deleteContactListItems(where: [ContactListItemWhereUniqueInput!]!): [ContactListItem]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createOperatingHour(data: OperatingHourCreateInput!): OperatingHour
  createOperatingHours(data: [OperatingHourCreateInput!]!): [OperatingHour]
  updateOperatingHour(where: OperatingHourWhereUniqueInput!, data: OperatingHourUpdateInput!): OperatingHour
  updateOperatingHours(data: [OperatingHourUpdateArgs!]!): [OperatingHour]
  deleteOperatingHour(where: OperatingHourWhereUniqueInput!): OperatingHour
  deleteOperatingHours(where: [OperatingHourWhereUniqueInput!]!): [OperatingHour]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserGroup(data: UserGroupCreateInput!): UserGroup
  createUserGroups(data: [UserGroupCreateInput!]!): [UserGroup]
  updateUserGroup(where: UserGroupWhereUniqueInput!, data: UserGroupUpdateInput!): UserGroup
  updateUserGroups(data: [UserGroupUpdateArgs!]!): [UserGroup]
  deleteUserGroup(where: UserGroupWhereUniqueInput!): UserGroup
  deleteUserGroups(where: [UserGroupWhereUniqueInput!]!): [UserGroup]
  createAlert(data: AlertCreateInput!): Alert
  createAlerts(data: [AlertCreateInput!]!): [Alert]
  updateAlert(where: AlertWhereUniqueInput!, data: AlertUpdateInput!): Alert
  updateAlerts(data: [AlertUpdateArgs!]!): [Alert]
  deleteAlert(where: AlertWhereUniqueInput!): Alert
  deleteAlerts(where: [AlertWhereUniqueInput!]!): [Alert]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createRedirect(data: RedirectCreateInput!): Redirect
  createRedirects(data: [RedirectCreateInput!]!): [Redirect]
  updateRedirect(where: RedirectWhereUniqueInput!, data: RedirectUpdateInput!): Redirect
  updateRedirects(data: [RedirectUpdateArgs!]!): [Redirect]
  deleteRedirect(where: RedirectWhereUniqueInput!): Redirect
  deleteRedirects(where: [RedirectWhereUniqueInput!]!): [Redirect]
  endSession: Boolean!
}

type Query {
  boardPage(where: BoardPageWhereUniqueInput! = {id: 1}): BoardPage
  boardPages(where: BoardPageWhereInput! = {id: {equals: 1}}, orderBy: [BoardPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardPageWhereUniqueInput): [BoardPage!]
  boardPagesCount(where: BoardPageWhereInput! = {id: {equals: 1}}): Int
  homePage(where: HomePageWhereUniqueInput! = {id: 1}): HomePage
  homePages(where: HomePageWhereInput! = {id: {equals: 1}}, orderBy: [HomePageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomePageWhereUniqueInput): [HomePage!]
  homePagesCount(where: HomePageWhereInput! = {id: {equals: 1}}): Int
  election(where: ElectionWhereUniqueInput!): Election
  elections(where: ElectionWhereInput! = {}, orderBy: [ElectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionWhereUniqueInput): [Election!]
  electionsCount(where: ElectionWhereInput! = {}): Int
  electionVersion(where: ElectionVersionWhereUniqueInput!): ElectionVersion
  electionVersions(where: ElectionVersionWhereInput! = {}, orderBy: [ElectionVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionVersionWhereUniqueInput): [ElectionVersion!]
  electionVersionsCount(where: ElectionVersionWhereInput! = {}): Int
  electionDraft(where: ElectionDraftWhereUniqueInput!): ElectionDraft
  electionDrafts(where: ElectionDraftWhereInput! = {}, orderBy: [ElectionDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionDraftWhereUniqueInput): [ElectionDraft!]
  electionDraftsCount(where: ElectionDraftWhereInput! = {}): Int
  electionResult(where: ElectionResultWhereUniqueInput!): ElectionResult
  electionResults(where: ElectionResultWhereInput! = {}, orderBy: [ElectionResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionResultWhereUniqueInput): [ElectionResult!]
  electionResultsCount(where: ElectionResultWhereInput! = {}): Int
  earlyVotingLocation(where: EarlyVotingLocationWhereUniqueInput!): EarlyVotingLocation
  earlyVotingLocations(where: EarlyVotingLocationWhereInput! = {}, orderBy: [EarlyVotingLocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EarlyVotingLocationWhereUniqueInput): [EarlyVotingLocation!]
  earlyVotingLocationsCount(where: EarlyVotingLocationWhereInput! = {}): Int
  electionsPage(where: ElectionsPageWhereUniqueInput! = {id: 1}): ElectionsPage
  electionsPages(where: ElectionsPageWhereInput! = {id: {equals: 1}}, orderBy: [ElectionsPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionsPageWhereUniqueInput): [ElectionsPage!]
  electionsPagesCount(where: ElectionsPageWhereInput! = {id: {equals: 1}}): Int
  assemblyDistrict(where: AssemblyDistrictWhereUniqueInput!): AssemblyDistrict
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  assemblyDistrictVersion(where: AssemblyDistrictVersionWhereUniqueInput!): AssemblyDistrictVersion
  assemblyDistrictVersions(where: AssemblyDistrictVersionWhereInput! = {}, orderBy: [AssemblyDistrictVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictVersionWhereUniqueInput): [AssemblyDistrictVersion!]
  assemblyDistrictVersionsCount(where: AssemblyDistrictVersionWhereInput! = {}): Int
  assemblyDistrictDraft(where: AssemblyDistrictDraftWhereUniqueInput!): AssemblyDistrictDraft
  assemblyDistrictDrafts(where: AssemblyDistrictDraftWhereInput! = {}, orderBy: [AssemblyDistrictDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictDraftWhereUniqueInput): [AssemblyDistrictDraft!]
  assemblyDistrictDraftsCount(where: AssemblyDistrictDraftWhereInput! = {}): Int
  board(where: BoardWhereUniqueInput!): Board
  boards(where: BoardWhereInput! = {}, orderBy: [BoardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardWhereUniqueInput): [Board!]
  boardsCount(where: BoardWhereInput! = {}): Int
  boardVersion(where: BoardVersionWhereUniqueInput!): BoardVersion
  boardVersions(where: BoardVersionWhereInput! = {}, orderBy: [BoardVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardVersionWhereUniqueInput): [BoardVersion!]
  boardVersionsCount(where: BoardVersionWhereInput! = {}): Int
  boardDraft(where: BoardDraftWhereUniqueInput!): BoardDraft
  boardDrafts(where: BoardDraftWhereInput! = {}, orderBy: [BoardDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoardDraftWhereUniqueInput): [BoardDraft!]
  boardDraftsCount(where: BoardDraftWhereInput! = {}): Int
  community(where: CommunityWhereUniqueInput!): Community
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  communityVersion(where: CommunityVersionWhereUniqueInput!): CommunityVersion
  communityVersions(where: CommunityVersionWhereInput! = {}, orderBy: [CommunityVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityVersionWhereUniqueInput): [CommunityVersion!]
  communityVersionsCount(where: CommunityVersionWhereInput! = {}): Int
  communityDraft(where: CommunityDraftWhereUniqueInput!): CommunityDraft
  communityDrafts(where: CommunityDraftWhereInput! = {}, orderBy: [CommunityDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunityDraftWhereUniqueInput): [CommunityDraft!]
  communityDraftsCount(where: CommunityDraftWhereInput! = {}): Int
  facility(where: FacilityWhereUniqueInput!): Facility
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  facilityVersion(where: FacilityVersionWhereUniqueInput!): FacilityVersion
  facilityVersions(where: FacilityVersionWhereInput! = {}, orderBy: [FacilityVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityVersionWhereUniqueInput): [FacilityVersion!]
  facilityVersionsCount(where: FacilityVersionWhereInput! = {}): Int
  facilityDraft(where: FacilityDraftWhereUniqueInput!): FacilityDraft
  facilityDrafts(where: FacilityDraftWhereInput! = {}, orderBy: [FacilityDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityDraftWhereUniqueInput): [FacilityDraft!]
  facilityDraftsCount(where: FacilityDraftWhereInput! = {}): Int
  orgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  orgUnitVersion(where: OrgUnitVersionWhereUniqueInput!): OrgUnitVersion
  orgUnitVersions(where: OrgUnitVersionWhereInput! = {}, orderBy: [OrgUnitVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitVersionWhereUniqueInput): [OrgUnitVersion!]
  orgUnitVersionsCount(where: OrgUnitVersionWhereInput! = {}): Int
  orgUnitDraft(where: OrgUnitDraftWhereUniqueInput!): OrgUnitDraft
  orgUnitDrafts(where: OrgUnitDraftWhereInput! = {}, orderBy: [OrgUnitDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitDraftWhereUniqueInput): [OrgUnitDraft!]
  orgUnitDraftsCount(where: OrgUnitDraftWhereInput! = {}): Int
  park(where: ParkWhereUniqueInput!): Park
  parks(where: ParkWhereInput! = {}, orderBy: [ParkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkWhereUniqueInput): [Park!]
  parksCount(where: ParkWhereInput! = {}): Int
  parkVersion(where: ParkVersionWhereUniqueInput!): ParkVersion
  parkVersions(where: ParkVersionWhereInput! = {}, orderBy: [ParkVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkVersionWhereUniqueInput): [ParkVersion!]
  parkVersionsCount(where: ParkVersionWhereInput! = {}): Int
  parkDraft(where: ParkDraftWhereUniqueInput!): ParkDraft
  parkDrafts(where: ParkDraftWhereInput! = {}, orderBy: [ParkDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParkDraftWhereUniqueInput): [ParkDraft!]
  parkDraftsCount(where: ParkDraftWhereInput! = {}): Int
  publicNotice(where: PublicNoticeWhereUniqueInput!): PublicNotice
  publicNotices(where: PublicNoticeWhereInput! = {}, orderBy: [PublicNoticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeWhereUniqueInput): [PublicNotice!]
  publicNoticesCount(where: PublicNoticeWhereInput! = {}): Int
  publicNoticeVersion(where: PublicNoticeVersionWhereUniqueInput!): PublicNoticeVersion
  publicNoticeVersions(where: PublicNoticeVersionWhereInput! = {}, orderBy: [PublicNoticeVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeVersionWhereUniqueInput): [PublicNoticeVersion!]
  publicNoticeVersionsCount(where: PublicNoticeVersionWhereInput! = {}): Int
  publicNoticeDraft(where: PublicNoticeDraftWhereUniqueInput!): PublicNoticeDraft
  publicNoticeDrafts(where: PublicNoticeDraftWhereInput! = {}, orderBy: [PublicNoticeDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicNoticeDraftWhereUniqueInput): [PublicNoticeDraft!]
  publicNoticeDraftsCount(where: PublicNoticeDraftWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  serviceVersion(where: ServiceVersionWhereUniqueInput!): ServiceVersion
  serviceVersions(where: ServiceVersionWhereInput! = {}, orderBy: [ServiceVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceVersionWhereUniqueInput): [ServiceVersion!]
  serviceVersionsCount(where: ServiceVersionWhereInput! = {}): Int
  serviceDraft(where: ServiceDraftWhereUniqueInput!): ServiceDraft
  serviceDrafts(where: ServiceDraftWhereInput! = {}, orderBy: [ServiceDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceDraftWhereUniqueInput): [ServiceDraft!]
  serviceDraftsCount(where: ServiceDraftWhereInput! = {}): Int
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  topicVersion(where: TopicVersionWhereUniqueInput!): TopicVersion
  topicVersions(where: TopicVersionWhereInput! = {}, orderBy: [TopicVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicVersionWhereUniqueInput): [TopicVersion!]
  topicVersionsCount(where: TopicVersionWhereInput! = {}): Int
  topicDraft(where: TopicDraftWhereUniqueInput!): TopicDraft
  topicDrafts(where: TopicDraftWhereInput! = {}, orderBy: [TopicDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicDraftWhereUniqueInput): [TopicDraft!]
  topicDraftsCount(where: TopicDraftWhereInput! = {}): Int
  trail(where: TrailWhereUniqueInput!): Trail
  trails(where: TrailWhereInput! = {}, orderBy: [TrailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailWhereUniqueInput): [Trail!]
  trailsCount(where: TrailWhereInput! = {}): Int
  trailVersion(where: TrailVersionWhereUniqueInput!): TrailVersion
  trailVersions(where: TrailVersionWhereInput! = {}, orderBy: [TrailVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailVersionWhereUniqueInput): [TrailVersion!]
  trailVersionsCount(where: TrailVersionWhereInput! = {}): Int
  trailDraft(where: TrailDraftWhereUniqueInput!): TrailDraft
  trailDrafts(where: TrailDraftWhereInput! = {}, orderBy: [TrailDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrailDraftWhereUniqueInput): [TrailDraft!]
  trailDraftsCount(where: TrailDraftWhereInput! = {}): Int
  plan(where: PlanWhereUniqueInput!): Plan
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plansCount(where: PlanWhereInput! = {}): Int
  planVersion(where: PlanVersionWhereUniqueInput!): PlanVersion
  planVersions(where: PlanVersionWhereInput! = {}, orderBy: [PlanVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanVersionWhereUniqueInput): [PlanVersion!]
  planVersionsCount(where: PlanVersionWhereInput! = {}): Int
  planDraft(where: PlanDraftWhereUniqueInput!): PlanDraft
  planDrafts(where: PlanDraftWhereInput! = {}, orderBy: [PlanDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanDraftWhereUniqueInput): [PlanDraft!]
  planDraftsCount(where: PlanDraftWhereInput! = {}): Int
  planCode(where: PlanCodeWhereUniqueInput!): PlanCode
  planCodes(where: PlanCodeWhereInput! = {}, orderBy: [PlanCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanCodeWhereUniqueInput): [PlanCode!]
  planCodesCount(where: PlanCodeWhereInput! = {}): Int
  planDocument(where: PlanDocumentWhereUniqueInput!): PlanDocument
  planDocuments(where: PlanDocumentWhereInput! = {}, orderBy: [PlanDocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanDocumentWhereUniqueInput): [PlanDocument!]
  planDocumentsCount(where: PlanDocumentWhereInput! = {}): Int
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  eventDraft(where: EventDraftWhereUniqueInput!): EventDraft
  eventDrafts(where: EventDraftWhereInput! = {}, orderBy: [EventDraftOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventDraftWhereUniqueInput): [EventDraft!]
  eventDraftsCount(where: EventDraftWhereInput! = {}): Int
  eventVersion(where: EventVersionWhereUniqueInput!): EventVersion
  eventVersions(where: EventVersionWhereInput! = {}, orderBy: [EventVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventVersionWhereUniqueInput): [EventVersion!]
  eventVersionsCount(where: EventVersionWhereInput! = {}): Int
  facilityListItem(where: FacilityListItemWhereUniqueInput!): FacilityListItem
  facilityListItems(where: FacilityListItemWhereInput! = {}, orderBy: [FacilityListItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityListItemWhereUniqueInput): [FacilityListItem!]
  facilityListItemsCount(where: FacilityListItemWhereInput! = {}): Int
  document(where: DocumentWhereUniqueInput!): Document
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  documentCollection(where: DocumentCollectionWhereUniqueInput!): DocumentCollection
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  documentListItem(where: DocumentListItemWhereUniqueInput!): DocumentListItem
  documentListItems(where: DocumentListItemWhereInput! = {}, orderBy: [DocumentListItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentListItemWhereUniqueInput): [DocumentListItem!]
  documentListItemsCount(where: DocumentListItemWhereInput! = {}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  externalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  externalLinks(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  externalLinksCount(where: ExternalLinkWhereInput! = {}): Int
  internalLink(where: InternalLinkWhereUniqueInput!): InternalLink
  internalLinks(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  internalLinksCount(where: InternalLinkWhereInput! = {}): Int
  url(where: UrlWhereUniqueInput!): Url
  urls(where: UrlWhereInput! = {}, orderBy: [UrlOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UrlWhereUniqueInput): [Url!]
  urlsCount(where: UrlWhereInput! = {}): Int
  highlight(where: HighlightWhereUniqueInput!): Highlight
  highlights(where: HighlightWhereInput! = {}, orderBy: [HighlightOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: HighlightWhereUniqueInput): [Highlight!]
  highlightsCount(where: HighlightWhereInput! = {}): Int
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  contactListItem(where: ContactListItemWhereUniqueInput!): ContactListItem
  contactListItems(where: ContactListItemWhereInput! = {}, orderBy: [ContactListItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactListItemWhereUniqueInput): [ContactListItem!]
  contactListItemsCount(where: ContactListItemWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  operatingHour(where: OperatingHourWhereUniqueInput!): OperatingHour
  operatingHours(where: OperatingHourWhereInput! = {}, orderBy: [OperatingHourOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperatingHourWhereUniqueInput): [OperatingHour!]
  operatingHoursCount(where: OperatingHourWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  userGroup(where: UserGroupWhereUniqueInput!): UserGroup
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  alert(where: AlertWhereUniqueInput!): Alert
  alerts(where: AlertWhereInput! = {}, orderBy: [AlertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AlertWhereUniqueInput): [Alert!]
  alertsCount(where: AlertWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  redirect(where: RedirectWhereUniqueInput!): Redirect
  redirects(where: RedirectWhereInput! = {}, orderBy: [RedirectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RedirectWhereUniqueInput): [Redirect!]
  redirectsCount(where: RedirectWhereInput! = {}): Int
  keystone: KeystoneMeta!
  getPage(slug: String!, type: String!): Page
  internalSearch(query: String): [InternalLinkSearch]
  getInternalLink(id: ID!, type: String!): InternalLinkSearch
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

union InternalLinkSearch = Service | Facility | HomePage | Board | BoardPage | PublicNotice | OrgUnit | AssemblyDistrict | Community | Park | Trail | Topic | Url

union Page = Service | Facility | Board | PublicNotice | OrgUnit | AssemblyDistrict | Community | Park | Trail | Topic

interface BasePage {
  id: ID!
  title: String
  description: String
  body: String
  heroImage: String
  createdAt: DateTime
  updatedAt: DateTime
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  owner: User
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
}

interface BasePageWithSlug implements BasePage {
  slug: String
  id: ID!
  title: String
  description: String
  body: String
  heroImage: String
  redirect: Redirect
  createdAt: DateTime
  updatedAt: DateTime
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  status: String
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
}

interface BasePageWithActions implements BasePage & BasePageWithSlug {
  slug: String
  id: ID!
  title: String
  description: String
  body: String
  heroImage: String
  redirect: Redirect
  createdAt: DateTime
  updatedAt: DateTime
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  owner: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  status: String
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  actions(where: InternalLinkWhereInput! = {}, orderBy: [InternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InternalLinkWhereUniqueInput): [InternalLink!]
  actionsCount(where: InternalLinkWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
}
