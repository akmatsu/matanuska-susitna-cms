# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  authId: String
  name: String
  email: String
  password: PasswordState
  contact: Contact
  role: Int
  groups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  groupsCount(where: UserGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  authId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  authId: StringFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  contact: ContactWhereInput
  role: IntNullableFilter
  groups: UserGroupManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input UserGroupManyRelationFilter {
  every: UserGroupWhereInput
  some: UserGroupWhereInput
  none: UserGroupWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  authId: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  authId: String
  name: String
  email: String
  password: String
  contact: ContactRelateToOneForUpdateInput
  role: Int
  groups: UserGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactRelateToOneForUpdateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
  disconnect: Boolean
}

input UserGroupRelateToManyForUpdateInput {
  disconnect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  authId: String
  name: String
  email: String
  password: String
  contact: ContactRelateToOneForCreateInput
  role: Int
  groups: UserGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactRelateToOneForCreateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
}

input UserGroupRelateToManyForCreateInput {
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

type UserGroup {
  id: ID!
  name: String
  owner: User
  description: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
}

input UserGroupWhereUniqueInput {
  id: ID
}

input UserGroupWhereInput {
  AND: [UserGroupWhereInput!]
  OR: [UserGroupWhereInput!]
  NOT: [UserGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  owner: UserWhereInput
  description: StringFilter
  users: UserManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  documentCollections: DocumentCollectionManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input CommunityManyRelationFilter {
  every: CommunityWhereInput
  some: CommunityWhereInput
  none: CommunityWhereInput
}

input DocumentCollectionManyRelationFilter {
  every: DocumentCollectionWhereInput
  some: DocumentCollectionWhereInput
  none: DocumentCollectionWhereInput
}

input UserGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input UserGroupUpdateInput {
  name: String
  owner: UserRelateToOneForUpdateInput
  description: String
  users: UserRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  documentCollections: DocumentCollectionRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input CommunityRelateToManyForUpdateInput {
  disconnect: [CommunityWhereUniqueInput!]
  set: [CommunityWhereUniqueInput!]
  create: [CommunityCreateInput!]
  connect: [CommunityWhereUniqueInput!]
}

input DocumentCollectionRelateToManyForUpdateInput {
  disconnect: [DocumentCollectionWhereUniqueInput!]
  set: [DocumentCollectionWhereUniqueInput!]
  create: [DocumentCollectionCreateInput!]
  connect: [DocumentCollectionWhereUniqueInput!]
}

input UserGroupUpdateArgs {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateInput!
}

input UserGroupCreateInput {
  name: String
  owner: UserRelateToOneForCreateInput
  description: String
  users: UserRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  documentCollections: DocumentCollectionRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input CommunityRelateToManyForCreateInput {
  create: [CommunityCreateInput!]
  connect: [CommunityWhereUniqueInput!]
}

input DocumentCollectionRelateToManyForCreateInput {
  create: [DocumentCollectionCreateInput!]
  connect: [DocumentCollectionWhereUniqueInput!]
}

type Contact {
  id: ID!
  name: String
  phone: String
  email: String
  primaryServices(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  primaryServicesCount(where: ServiceWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  user: User
  editorNotes: String
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringNullableFilter
  email: StringNullableFilter
  primaryServices: ServiceManyRelationFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  user: UserWhereInput
  editorNotes: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input OrgUnitManyRelationFilter {
  every: OrgUnitWhereInput
  some: OrgUnitWhereInput
  none: OrgUnitWhereInput
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  editorNotes: OrderDirection
}

input ContactUpdateInput {
  name: String
  phone: String
  email: String
  primaryServices: ServiceRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  editorNotes: String
}

input OrgUnitRelateToManyForUpdateInput {
  disconnect: [OrgUnitWhereUniqueInput!]
  set: [OrgUnitWhereUniqueInput!]
  create: [OrgUnitCreateInput!]
  connect: [OrgUnitWhereUniqueInput!]
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  phone: String
  email: String
  primaryServices: ServiceRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  editorNotes: String
}

input OrgUnitRelateToManyForCreateInput {
  create: [OrgUnitCreateInput!]
  connect: [OrgUnitWhereUniqueInput!]
}

type Alert {
  id: ID!
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input AlertWhereUniqueInput {
  id: ID
}

input AlertWhereInput {
  AND: [AlertWhereInput!]
  OR: [AlertWhereInput!]
  NOT: [AlertWhereInput!]
  id: IDFilter
  title: StringFilter
  body: MyStringFilter
  urgency: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  editorNotes: StringFilter
}

input MyStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: MyQueryMode
  not: NestedMyStringFilter
}

enum MyQueryMode {
  default
  insensitive
}

input NestedMyStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedMyStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input AlertOrderByInput {
  id: OrderDirection
  title: OrderDirection
  body: MyOrderDirection
  urgency: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
}

enum MyOrderDirection {
  asc
  desc
}

input AlertUpdateInput {
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input AlertUpdateArgs {
  where: AlertWhereUniqueInput!
  data: AlertUpdateInput!
}

input AlertCreateInput {
  title: String
  body: String
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

type Tag {
  id: ID!
  name: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  services: ServiceManyRelationFilter
  communities: CommunityManyRelationFilter
  documents: DocumentManyRelationFilter
  images: ImageManyRelationFilter
  documentCollections: DocumentCollectionManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  services: ServiceRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  images: ImageRelateToManyForUpdateInput
  documentCollections: DocumentCollectionRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  services: ServiceRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  images: ImageRelateToManyForCreateInput
  documentCollections: DocumentCollectionRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Service {
  id: ID!
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  body: String
  actionLabel: String
  actionUrl: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  primaryContact: Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input ServiceWhereUniqueInput {
  id: ID
  slug: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  body: MyStringFilter
  actionLabel: StringNullableFilter
  actionUrl: StringNullableFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  primaryContact: ContactWhereInput
  contacts: ContactManyRelationFilter
  communities: CommunityManyRelationFilter
  orgUnits: OrgUnitManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  editorNotes: StringFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ContactManyRelationFilter {
  every: ContactWhereInput
  some: ContactWhereInput
  none: ContactWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  body: MyOrderDirection
  actionLabel: OrderDirection
  actionUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  editorNotes: OrderDirection
}

input ServiceUpdateInput {
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  body: String
  actionLabel: String
  actionUrl: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  primaryContact: ContactRelateToOneForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  communities: CommunityRelateToManyForUpdateInput
  orgUnits: OrgUnitRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ContactRelateToManyForUpdateInput {
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  body: String
  actionLabel: String
  actionUrl: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  primaryContact: ContactRelateToOneForCreateInput
  contacts: ContactRelateToManyForCreateInput
  communities: CommunityRelateToManyForCreateInput
  orgUnits: OrgUnitRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  editorNotes: String
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ContactRelateToManyForCreateInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

type Community {
  id: ID!
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  liveUrl: String
  slug: String
  owner: User
  mapId: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  districts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  districtsCount(where: AssemblyDistrictWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CommunityWhereUniqueInput {
  id: ID
  slug: String
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  NOT: [CommunityWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  slug: StringFilter
  owner: UserWhereInput
  mapId: StringFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  contacts: ContactManyRelationFilter
  services: ServiceManyRelationFilter
  districts: AssemblyDistrictManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AssemblyDistrictManyRelationFilter {
  every: AssemblyDistrictWhereInput
  some: AssemblyDistrictWhereInput
  none: AssemblyDistrictWhereInput
}

input CommunityOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  slug: OrderDirection
  mapId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum BlueHarvestImageOrderDirection {
  asc
  desc
}

input CommunityUpdateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForUpdateInput
  mapId: String
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  districts: AssemblyDistrictRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AssemblyDistrictRelateToManyForUpdateInput {
  disconnect: [AssemblyDistrictWhereUniqueInput!]
  set: [AssemblyDistrictWhereUniqueInput!]
  create: [AssemblyDistrictCreateInput!]
  connect: [AssemblyDistrictWhereUniqueInput!]
}

input CommunityUpdateArgs {
  where: CommunityWhereUniqueInput!
  data: CommunityUpdateInput!
}

input CommunityCreateInput {
  heroImage: String
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  slug: String
  owner: UserRelateToOneForCreateInput
  mapId: String
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  districts: AssemblyDistrictRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AssemblyDistrictRelateToManyForCreateInput {
  create: [AssemblyDistrictCreateInput!]
  connect: [AssemblyDistrictWhereUniqueInput!]
}

type AssemblyDistrict {
  id: ID!
  title: String
  description: String
  liveUrl: String
  slug: String
  owner: User
  photo: Image
  memberName: String
  bio: String
  address: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
}

input AssemblyDistrictWhereUniqueInput {
  id: ID
  slug: String
}

input AssemblyDistrictWhereInput {
  AND: [AssemblyDistrictWhereInput!]
  OR: [AssemblyDistrictWhereInput!]
  NOT: [AssemblyDistrictWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  owner: UserWhereInput
  photo: ImageWhereInput
  memberName: StringFilter
  bio: StringFilter
  address: StringFilter
  email: StringNullableFilter
  phone: StringNullableFilter
  fax: StringNullableFilter
  termStart: DateTimeNullableFilter
  termEnd: DateTimeNullableFilter
}

input AssemblyDistrictOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  memberName: OrderDirection
  bio: OrderDirection
  address: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  termStart: OrderDirection
  termEnd: OrderDirection
}

input AssemblyDistrictUpdateInput {
  title: String
  description: String
  slug: String
  owner: UserRelateToOneForUpdateInput
  photo: ImageRelateToOneForUpdateInput
  memberName: String
  bio: String
  address: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input AssemblyDistrictUpdateArgs {
  where: AssemblyDistrictWhereUniqueInput!
  data: AssemblyDistrictUpdateInput!
}

input AssemblyDistrictCreateInput {
  title: String
  description: String
  slug: String
  owner: UserRelateToOneForCreateInput
  photo: ImageRelateToOneForCreateInput
  memberName: String
  bio: String
  address: String
  email: String
  phone: String
  fax: String
  termStart: DateTime
  termEnd: DateTime
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Highlight {
  id: ID!
  title: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  image: String
  message: String
  internalLink: String
  externalLink: String
  editorNotes: String
}

input HighlightWhereUniqueInput {
  id: ID
}

input HighlightWhereInput {
  AND: [HighlightWhereInput!]
  OR: [HighlightWhereInput!]
  NOT: [HighlightWhereInput!]
  id: IDFilter
  title: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  reviewDate: DateTimeNullableFilter
  image: StringFilter
  message: StringFilter
  externalLink: StringNullableFilter
  editorNotes: StringFilter
}

input HighlightOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  reviewDate: OrderDirection
  image: OrderDirection
  message: OrderDirection
  internalLink: LinkOrderDirection
  externalLink: OrderDirection
  editorNotes: OrderDirection
}

enum LinkOrderDirection {
  asc
  desc
}

input HighlightUpdateInput {
  title: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  image: String
  message: String
  internalLink: String
  externalLink: String
  editorNotes: String
}

input HighlightUpdateArgs {
  where: HighlightWhereUniqueInput!
  data: HighlightUpdateInput!
}

input HighlightCreateInput {
  title: String
  publishAt: DateTime
  unpublishAt: DateTime
  reviewDate: DateTime
  image: String
  message: String
  internalLink: String
  externalLink: String
  editorNotes: String
}

type Image {
  id: ID!
  title: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  file: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input ImageUpdateInput {
  title: String
  description: String
  tags: TagRelateToManyForUpdateInput
  file: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  description: String
  tags: TagRelateToManyForCreateInput
  file: ImageFieldInput
}

type Document {
  id: ID!
  title: String
  description: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  file: FileFieldOutput
  collections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  collectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  editorNotes: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
  collections: DocumentCollectionManyRelationFilter
  editorNotes: StringFilter
}

input DocumentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  editorNotes: OrderDirection
}

input DocumentUpdateInput {
  title: String
  description: String
  tags: TagRelateToManyForUpdateInput
  file: FileFieldInput
  collections: DocumentCollectionRelateToManyForUpdateInput
  editorNotes: String
}

input FileFieldInput {
  upload: Upload!
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  title: String
  description: String
  tags: TagRelateToManyForCreateInput
  file: FileFieldInput
  collections: DocumentCollectionRelateToManyForCreateInput
  editorNotes: String
}

type DocumentCollection {
  id: ID!
  title: String
  owner: User
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  liveUrl: String
  embed: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  editorNotes: String
  referencedBy: [Service]
}

input DocumentCollectionWhereUniqueInput {
  id: ID
}

input DocumentCollectionWhereInput {
  AND: [DocumentCollectionWhereInput!]
  OR: [DocumentCollectionWhereInput!]
  NOT: [DocumentCollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  owner: UserWhereInput
  documents: DocumentManyRelationFilter
  tags: TagManyRelationFilter
  userGroups: UserGroupManyRelationFilter
  editorNotes: StringFilter
}

input DocumentCollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  editorNotes: OrderDirection
}

input DocumentCollectionUpdateInput {
  title: String
  owner: UserRelateToOneForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  userGroups: UserGroupRelateToManyForUpdateInput
  editorNotes: String
}

input DocumentCollectionUpdateArgs {
  where: DocumentCollectionWhereUniqueInput!
  data: DocumentCollectionUpdateInput!
}

input DocumentCollectionCreateInput {
  title: String
  owner: UserRelateToOneForCreateInput
  documents: DocumentRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  userGroups: UserGroupRelateToManyForCreateInput
  editorNotes: String
}

type ApiKey {
  id: ID!
  name: String
  description: String
  token: String
  user: User
  expiresAt: DateTime
}

input ApiKeyWhereUniqueInput {
  id: ID
  token: String
}

input ApiKeyWhereInput {
  AND: [ApiKeyWhereInput!]
  OR: [ApiKeyWhereInput!]
  NOT: [ApiKeyWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  token: StringFilter
  user: UserWhereInput
  expiresAt: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ApiKeyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  token: OrderDirection
  expiresAt: OrderDirection
}

input ApiKeyUpdateInput {
  name: String
  description: String
  token: String
  user: UserRelateToOneForUpdateInput
  expiresAt: DateTime
}

input ApiKeyUpdateArgs {
  where: ApiKeyWhereUniqueInput!
  data: ApiKeyUpdateInput!
}

input ApiKeyCreateInput {
  name: String
  description: String
  token: String
  user: UserRelateToOneForCreateInput
  expiresAt: DateTime
}

type OrgUnit {
  id: ID!
  heroImage: String
  title: String
  description: String
  liveUrl: String
  slug: String
  owner: User
  showPage: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  children(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  childrenCount(where: OrgUnitWhereInput! = {}): Int
  parent: OrgUnit
  createdAt: DateTime
  updatedAt: DateTime
}

input OrgUnitWhereUniqueInput {
  id: ID
  slug: String
}

input OrgUnitWhereInput {
  AND: [OrgUnitWhereInput!]
  OR: [OrgUnitWhereInput!]
  NOT: [OrgUnitWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  owner: UserWhereInput
  showPage: BooleanFilter
  tags: TagManyRelationFilter
  contacts: ContactManyRelationFilter
  services: ServiceManyRelationFilter
  children: OrgUnitManyRelationFilter
  parent: OrgUnitWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input OrgUnitOrderByInput {
  id: OrderDirection
  heroImage: BlueHarvestImageOrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  showPage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrgUnitUpdateInput {
  heroImage: String
  title: String
  description: String
  slug: String
  owner: UserRelateToOneForUpdateInput
  showPage: Boolean
  tags: TagRelateToManyForUpdateInput
  contacts: ContactRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  children: OrgUnitRelateToManyForUpdateInput
  parent: OrgUnitRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input OrgUnitRelateToOneForUpdateInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
  disconnect: Boolean
}

input OrgUnitUpdateArgs {
  where: OrgUnitWhereUniqueInput!
  data: OrgUnitUpdateInput!
}

input OrgUnitCreateInput {
  heroImage: String
  title: String
  description: String
  slug: String
  owner: UserRelateToOneForCreateInput
  showPage: Boolean
  tags: TagRelateToManyForCreateInput
  contacts: ContactRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  children: OrgUnitRelateToManyForCreateInput
  parent: OrgUnitRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input OrgUnitRelateToOneForCreateInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserGroup(data: UserGroupCreateInput!): UserGroup
  createUserGroups(data: [UserGroupCreateInput!]!): [UserGroup]
  updateUserGroup(where: UserGroupWhereUniqueInput!, data: UserGroupUpdateInput!): UserGroup
  updateUserGroups(data: [UserGroupUpdateArgs!]!): [UserGroup]
  deleteUserGroup(where: UserGroupWhereUniqueInput!): UserGroup
  deleteUserGroups(where: [UserGroupWhereUniqueInput!]!): [UserGroup]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(where: ContactWhereUniqueInput!, data: ContactUpdateInput!): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createAlert(data: AlertCreateInput!): Alert
  createAlerts(data: [AlertCreateInput!]!): [Alert]
  updateAlert(where: AlertWhereUniqueInput!, data: AlertUpdateInput!): Alert
  updateAlerts(data: [AlertUpdateArgs!]!): [Alert]
  deleteAlert(where: AlertWhereUniqueInput!): Alert
  deleteAlerts(where: [AlertWhereUniqueInput!]!): [Alert]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createCommunity(data: CommunityCreateInput!): Community
  createCommunities(data: [CommunityCreateInput!]!): [Community]
  updateCommunity(where: CommunityWhereUniqueInput!, data: CommunityUpdateInput!): Community
  updateCommunities(data: [CommunityUpdateArgs!]!): [Community]
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteCommunities(where: [CommunityWhereUniqueInput!]!): [Community]
  createAssemblyDistrict(data: AssemblyDistrictCreateInput!): AssemblyDistrict
  createAssemblyDistricts(data: [AssemblyDistrictCreateInput!]!): [AssemblyDistrict]
  updateAssemblyDistrict(where: AssemblyDistrictWhereUniqueInput!, data: AssemblyDistrictUpdateInput!): AssemblyDistrict
  updateAssemblyDistricts(data: [AssemblyDistrictUpdateArgs!]!): [AssemblyDistrict]
  deleteAssemblyDistrict(where: AssemblyDistrictWhereUniqueInput!): AssemblyDistrict
  deleteAssemblyDistricts(where: [AssemblyDistrictWhereUniqueInput!]!): [AssemblyDistrict]
  createHighlight(data: HighlightCreateInput!): Highlight
  createHighlights(data: [HighlightCreateInput!]!): [Highlight]
  updateHighlight(where: HighlightWhereUniqueInput!, data: HighlightUpdateInput!): Highlight
  updateHighlights(data: [HighlightUpdateArgs!]!): [Highlight]
  deleteHighlight(where: HighlightWhereUniqueInput!): Highlight
  deleteHighlights(where: [HighlightWhereUniqueInput!]!): [Highlight]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createDocumentCollection(data: DocumentCollectionCreateInput!): DocumentCollection
  createDocumentCollections(data: [DocumentCollectionCreateInput!]!): [DocumentCollection]
  updateDocumentCollection(where: DocumentCollectionWhereUniqueInput!, data: DocumentCollectionUpdateInput!): DocumentCollection
  updateDocumentCollections(data: [DocumentCollectionUpdateArgs!]!): [DocumentCollection]
  deleteDocumentCollection(where: DocumentCollectionWhereUniqueInput!): DocumentCollection
  deleteDocumentCollections(where: [DocumentCollectionWhereUniqueInput!]!): [DocumentCollection]
  createApiKey(data: ApiKeyCreateInput!): ApiKey
  createApiKeys(data: [ApiKeyCreateInput!]!): [ApiKey]
  updateApiKey(where: ApiKeyWhereUniqueInput!, data: ApiKeyUpdateInput!): ApiKey
  updateApiKeys(data: [ApiKeyUpdateArgs!]!): [ApiKey]
  deleteApiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  deleteApiKeys(where: [ApiKeyWhereUniqueInput!]!): [ApiKey]
  createOrgUnit(data: OrgUnitCreateInput!): OrgUnit
  createOrgUnits(data: [OrgUnitCreateInput!]!): [OrgUnit]
  updateOrgUnit(where: OrgUnitWhereUniqueInput!, data: OrgUnitUpdateInput!): OrgUnit
  updateOrgUnits(data: [OrgUnitUpdateArgs!]!): [OrgUnit]
  deleteOrgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  deleteOrgUnits(where: [OrgUnitWhereUniqueInput!]!): [OrgUnit]
  endSession: Boolean!
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  userGroup(where: UserGroupWhereUniqueInput!): UserGroup
  userGroups(where: UserGroupWhereInput! = {}, orderBy: [UserGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserGroupWhereUniqueInput): [UserGroup!]
  userGroupsCount(where: UserGroupWhereInput! = {}): Int
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contactsCount(where: ContactWhereInput! = {}): Int
  alert(where: AlertWhereUniqueInput!): Alert
  alerts(where: AlertWhereInput! = {}, orderBy: [AlertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AlertWhereUniqueInput): [Alert!]
  alertsCount(where: AlertWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  community(where: CommunityWhereUniqueInput!): Community
  communities(where: CommunityWhereInput! = {}, orderBy: [CommunityOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: CommunityWhereUniqueInput): [Community!]
  communitiesCount(where: CommunityWhereInput! = {}): Int
  assemblyDistrict(where: AssemblyDistrictWhereUniqueInput!): AssemblyDistrict
  assemblyDistricts(where: AssemblyDistrictWhereInput! = {}, orderBy: [AssemblyDistrictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyDistrictWhereUniqueInput): [AssemblyDistrict!]
  assemblyDistrictsCount(where: AssemblyDistrictWhereInput! = {}): Int
  highlight(where: HighlightWhereUniqueInput!): Highlight
  highlights(where: HighlightWhereInput! = {}, orderBy: [HighlightOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: HighlightWhereUniqueInput): [Highlight!]
  highlightsCount(where: HighlightWhereInput! = {}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  document(where: DocumentWhereUniqueInput!): Document
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  documentCollection(where: DocumentCollectionWhereUniqueInput!): DocumentCollection
  documentCollections(where: DocumentCollectionWhereInput! = {}, orderBy: [DocumentCollectionOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: DocumentCollectionWhereUniqueInput): [DocumentCollection!]
  documentCollectionsCount(where: DocumentCollectionWhereInput! = {}): Int
  apiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  apiKeys(where: ApiKeyWhereInput! = {}, orderBy: [ApiKeyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApiKeyWhereUniqueInput): [ApiKey!]
  apiKeysCount(where: ApiKeyWhereInput! = {}): Int
  orgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  orgUnits(where: OrgUnitWhereInput! = {}, orderBy: [OrgUnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrgUnitWhereUniqueInput): [OrgUnit!]
  orgUnitsCount(where: OrgUnitWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
