// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
  provider      = "prisma-client-js"
}

model Alert {
  id          String    @id @default(cuid())
  title       String    @default("")
  body        String?
  urgency     Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
  editorNotes String    @default("")
}

model AssemblyDistrict {
  id                                         String                    @id @default(cuid())
  heroImage                                  String?
  title                                      String                    @unique @default("")
  description                                String                    @default("")
  publishAt                                  DateTime?
  unpublishAt                                DateTime?
  reviewDate                                 DateTime?
  slug                                       String                    @unique @default("")
  owner                                      User?                     @relation("AssemblyDistrict_owner", fields: [ownerId], references: [id])
  ownerId                                    String?                   @map("owner")
  body                                       String?
  tags                                       Tag[]                     @relation("AssemblyDistrict_tags")
  userGroups                                 UserGroup[]               @relation("AssemblyDistrict_userGroups")
  contacts                                   Contact[]                 @relation("AssemblyDistrict_contacts")
  createdAt                                  DateTime?                 @default(now())
  updatedAt                                  DateTime?                 @default(now()) @updatedAt
  photo                                      Image?                    @relation("AssemblyDistrict_photo", fields: [photoId], references: [id])
  photoId                                    String?                   @map("photo")
  memberName                                 String                    @default("")
  bio                                        String                    @default("")
  address                                    String                    @default("")
  email                                      String?
  phone                                      String?
  fax                                        String?
  termStart                                  DateTime?
  termEnd                                    DateTime?
  status                                     String                    @default("unpublished")
  drafts                                     AssemblyDistrictDraft[]   @relation("AssemblyDistrictDraft_original")
  makeDrafts                                 String?
  versions                                   AssemblyDistrictVersion[] @relation("AssemblyDistrictVersion_original")
  currentVersion                             AssemblyDistrictVersion?  @relation("AssemblyDistrict_currentVersion", fields: [currentVersionId], references: [id])
  currentVersionId                           String?                   @unique @map("currentVersion")
  from_Community_districts                   Community[]               @relation("Community_districts")
  from_CommunityDraft_districts              CommunityDraft[]          @relation("CommunityDraft_districts")
  from_CommunityVersion_districts            CommunityVersion[]        @relation("CommunityVersion_districts")
  from_PublicNotice_assemblyDistricts        PublicNotice[]            @relation("PublicNotice_assemblyDistricts")
  from_PublicNoticeDraft_assemblyDistricts   PublicNoticeDraft[]       @relation("PublicNoticeDraft_assemblyDistricts")
  from_PublicNoticeVersion_assemblyDistricts PublicNoticeVersion[]     @relation("PublicNoticeVersion_assemblyDistricts")

  @@index([ownerId])
  @@index([photoId])
}

model AssemblyDistrictDraft {
  id          String            @id @default(cuid())
  original    AssemblyDistrict? @relation("AssemblyDistrictDraft_original", fields: [originalId], references: [id])
  originalId  String?           @map("original")
  heroImage   String?
  title       String            @default("")
  description String            @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?             @relation("AssemblyDistrictDraft_owner", fields: [ownerId], references: [id])
  ownerId     String?           @map("owner")
  body        String?
  tags        Tag[]             @relation("AssemblyDistrictDraft_tags")
  userGroups  UserGroup[]       @relation("AssemblyDistrictDraft_userGroups")
  contacts    Contact[]         @relation("AssemblyDistrictDraft_contacts")
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @default(now()) @updatedAt
  photo       Image?            @relation("AssemblyDistrictDraft_photo", fields: [photoId], references: [id])
  photoId     String?           @map("photo")
  memberName  String            @default("")
  bio         String            @default("")
  address     String            @default("")
  email       String?
  phone       String?
  fax         String?
  termStart   DateTime?
  termEnd     DateTime?
  publish     String?

  @@index([originalId])
  @@index([ownerId])
  @@index([photoId])
}

model AssemblyDistrictVersion {
  id          String            @id @default(cuid())
  original    AssemblyDistrict? @relation("AssemblyDistrictVersion_original", fields: [originalId], references: [id])
  originalId  String?           @map("original")
  heroImage   String?
  title       String            @default("")
  description String            @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?             @relation("AssemblyDistrictVersion_owner", fields: [ownerId], references: [id])
  ownerId     String?           @map("owner")
  body        String?
  tags        Tag[]             @relation("AssemblyDistrictVersion_tags")
  userGroups  UserGroup[]       @relation("AssemblyDistrictVersion_userGroups")
  contacts    Contact[]         @relation("AssemblyDistrictVersion_contacts")
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @default(now()) @updatedAt
  photo       Image?            @relation("AssemblyDistrictVersion_photo", fields: [photoId], references: [id])
  photoId     String?           @map("photo")
  memberName  String            @default("")
  bio         String            @default("")
  address     String            @default("")
  email       String?
  phone       String?
  fax         String?
  termStart   DateTime?
  termEnd     DateTime?
  isLive      AssemblyDistrict? @relation("AssemblyDistrict_currentVersion")
  republish   String?

  @@index([originalId])
  @@index([ownerId])
  @@index([photoId])
}

model Community {
  id                                   String                @id @default(cuid())
  heroImage                            String?
  title                                String                @unique @default("")
  description                          String                @default("")
  publishAt                            DateTime?
  unpublishAt                          DateTime?
  reviewDate                           DateTime?
  slug                                 String                @unique @default("")
  owner                                User?                 @relation("Community_owner", fields: [ownerId], references: [id])
  ownerId                              String?               @map("owner")
  body                                 String?
  tags                                 Tag[]                 @relation("Community_tags")
  userGroups                           UserGroup[]           @relation("Community_userGroups")
  contacts                             Contact[]             @relation("Community_contacts")
  createdAt                            DateTime?             @default(now())
  updatedAt                            DateTime?             @default(now()) @updatedAt
  services                             Service[]             @relation("Community_services")
  districts                            AssemblyDistrict[]    @relation("Community_districts")
  status                               String                @default("unpublished")
  drafts                               CommunityDraft[]      @relation("CommunityDraft_original")
  makeDrafts                           String?
  versions                             CommunityVersion[]    @relation("CommunityVersion_original")
  currentVersion                       CommunityVersion?     @relation("Community_currentVersion", fields: [currentVersionId], references: [id])
  currentVersionId                     String?               @unique @map("currentVersion")
  from_PublicNotice_communities        PublicNotice[]        @relation("PublicNotice_communities")
  from_PublicNoticeDraft_communities   PublicNoticeDraft[]   @relation("PublicNoticeDraft_communities")
  from_PublicNoticeVersion_communities PublicNoticeVersion[] @relation("PublicNoticeVersion_communities")
  from_ServiceDraft_communities        ServiceDraft[]        @relation("ServiceDraft_communities")
  from_ServiceVersion_communities      ServiceVersion[]      @relation("ServiceVersion_communities")

  @@index([ownerId])
}

model CommunityDraft {
  id          String             @id @default(cuid())
  original    Community?         @relation("CommunityDraft_original", fields: [originalId], references: [id])
  originalId  String?            @map("original")
  heroImage   String?
  title       String             @default("")
  description String             @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?              @relation("CommunityDraft_owner", fields: [ownerId], references: [id])
  ownerId     String?            @map("owner")
  body        String?
  tags        Tag[]              @relation("CommunityDraft_tags")
  userGroups  UserGroup[]        @relation("CommunityDraft_userGroups")
  contacts    Contact[]          @relation("CommunityDraft_contacts")
  createdAt   DateTime?          @default(now())
  updatedAt   DateTime?          @default(now()) @updatedAt
  services    Service[]          @relation("CommunityDraft_services")
  districts   AssemblyDistrict[] @relation("CommunityDraft_districts")
  publish     String?

  @@index([originalId])
  @@index([ownerId])
}

model CommunityVersion {
  id          String             @id @default(cuid())
  original    Community?         @relation("CommunityVersion_original", fields: [originalId], references: [id])
  originalId  String?            @map("original")
  heroImage   String?
  title       String             @default("")
  description String             @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?              @relation("CommunityVersion_owner", fields: [ownerId], references: [id])
  ownerId     String?            @map("owner")
  body        String?
  tags        Tag[]              @relation("CommunityVersion_tags")
  userGroups  UserGroup[]        @relation("CommunityVersion_userGroups")
  contacts    Contact[]          @relation("CommunityVersion_contacts")
  createdAt   DateTime?          @default(now())
  updatedAt   DateTime?          @default(now()) @updatedAt
  services    Service[]          @relation("CommunityVersion_services")
  districts   AssemblyDistrict[] @relation("CommunityVersion_districts")
  isLive      Community?         @relation("Community_currentVersion")
  republish   String?

  @@index([originalId])
  @@index([ownerId])
}

model Contact {
  id                                    String                    @id @default(cuid())
  name                                  String                    @default("")
  title                                 String?
  phone                                 String?
  email                                 String?
  from_AssemblyDistrict_contacts        AssemblyDistrict[]        @relation("AssemblyDistrict_contacts")
  from_AssemblyDistrictDraft_contacts   AssemblyDistrictDraft[]   @relation("AssemblyDistrictDraft_contacts")
  from_AssemblyDistrictVersion_contacts AssemblyDistrictVersion[] @relation("AssemblyDistrictVersion_contacts")
  from_Community_contacts               Community[]               @relation("Community_contacts")
  from_CommunityDraft_contacts          CommunityDraft[]          @relation("CommunityDraft_contacts")
  from_CommunityVersion_contacts        CommunityVersion[]        @relation("CommunityVersion_contacts")
  from_Facility_contacts                Facility[]                @relation("Facility_contacts")
  from_OrgUnit_contacts                 OrgUnit[]                 @relation("OrgUnit_contacts")
  from_Park_contacts                    Park[]                    @relation("Park_contacts")
  from_PublicNotice_contacts            PublicNotice[]            @relation("PublicNotice_contacts")
  from_PublicNoticeDraft_contacts       PublicNoticeDraft[]       @relation("PublicNoticeDraft_contacts")
  from_PublicNoticeVersion_contacts     PublicNoticeVersion[]     @relation("PublicNoticeVersion_contacts")
  from_Service_contacts                 Service[]                 @relation("Service_contacts")
  from_ServiceDraft_contacts            ServiceDraft[]            @relation("ServiceDraft_contacts")
  from_ServiceVersion_contacts          ServiceVersion[]          @relation("ServiceVersion_contacts")
  from_Trail_contacts                   Trail[]                   @relation("Trail_contacts")
  from_TestModel_contacts               TestModel[]               @relation("TestModel_contacts")
  from_TestModelDraft_contacts          TestModelDraft[]          @relation("TestModelDraft_contacts")
  from_TestModelVersion_contacts        TestModelVersion[]        @relation("TestModelVersion_contacts")
}

model Document {
  id                                 String                @id @default(cuid())
  title                              String                @default("")
  description                        String                @default("")
  tags                               Tag[]                 @relation("Document_tags")
  file_filesize                      Int?
  file_filename                      String?
  collections                        DocumentCollection[]  @relation("Document_collections")
  editorNotes                        String                @default("")
  from_PublicNotice_documents        PublicNotice[]        @relation("PublicNotice_documents")
  from_PublicNoticeDraft_documents   PublicNoticeDraft[]   @relation("PublicNoticeDraft_documents")
  from_PublicNoticeVersion_documents PublicNoticeVersion[] @relation("PublicNoticeVersion_documents")

  @@index([title])
}

model DocumentCollection {
  id          String      @id @default(cuid())
  title       String      @unique @default("")
  description String      @default("")
  owner       User?       @relation("DocumentCollection_owner", fields: [ownerId], references: [id])
  ownerId     String?     @map("owner")
  documents   Document[]  @relation("Document_collections")
  tags        Tag[]       @relation("DocumentCollection_tags")
  userGroups  UserGroup[] @relation("DocumentCollection_userGroups")
  editorNotes String      @default("")

  @@index([ownerId])
}

model ExternalLink {
  id    String  @id @default(cuid())
  label String  @default("")
  url   Url?    @relation("ExternalLink_url", fields: [urlId], references: [id])
  urlId String? @map("url")

  @@index([urlId])
}

model Facility {
  id                                  String                @id @default(cuid())
  heroImage                           String?
  title                               String                @unique @default("")
  description                         String                @default("")
  publishAt                           DateTime?
  unpublishAt                         DateTime?
  reviewDate                          DateTime?
  slug                                String                @unique @default("")
  owner                               User?                 @relation("Facility_owner", fields: [ownerId], references: [id])
  ownerId                             String?               @map("owner")
  body                                String?
  tags                                Tag[]                 @relation("Facility_tags")
  userGroups                          UserGroup[]           @relation("Facility_userGroups")
  address                             Location?             @relation("Facility_address", fields: [addressId], references: [id])
  addressId                           String?               @map("address")
  contacts                            Contact[]             @relation("Facility_contacts")
  hours                               OperatingHour[]       @relation("Facility_hours")
  createdAt                           DateTime?             @default(now())
  updatedAt                           DateTime?             @default(now()) @updatedAt
  services                            Service[]             @relation("Facility_services")
  park                                Park?                 @relation("Facility_park", fields: [parkId], references: [id])
  parkId                              String?               @map("park")
  from_PublicNotice_facilities        PublicNotice[]        @relation("PublicNotice_facilities")
  from_PublicNoticeDraft_facilities   PublicNoticeDraft[]   @relation("PublicNoticeDraft_facilities")
  from_PublicNoticeVersion_facilities PublicNoticeVersion[] @relation("PublicNoticeVersion_facilities")
  from_ServiceDraft_facilities        ServiceDraft[]        @relation("ServiceDraft_facilities")
  from_ServiceVersion_facilities      ServiceVersion[]      @relation("ServiceVersion_facilities")

  @@index([ownerId])
  @@index([addressId])
  @@index([parkId])
}

model Highlight {
  id                           String        @id @default(cuid())
  title                        String        @unique @default("")
  publishAt                    DateTime?
  unpublishAt                  DateTime?
  reviewDate                   DateTime?
  image                        String?
  message                      String        @default("")
  linkedItem                   InternalLink? @relation("Highlight_linkedItem", fields: [linkedItemId], references: [id])
  linkedItemId                 String?       @map("linkedItem")
  editorNotes                  String        @default("")
  createdAt                    DateTime?     @default(now())
  updatedAt                    DateTime?     @default(now()) @updatedAt
  from_HomePage_toolbeltOne    HomePage[]    @relation("HomePage_toolbeltOne")
  from_HomePage_toolbeltTwo    HomePage[]    @relation("HomePage_toolbeltTwo")
  from_HomePage_toolbeltThree  HomePage[]    @relation("HomePage_toolbeltThree")
  from_HomePage_toolbeltFour   HomePage[]    @relation("HomePage_toolbeltFour")
  from_HomePage_highlightOne   HomePage[]    @relation("HomePage_highlightOne")
  from_HomePage_highlightTwo   HomePage[]    @relation("HomePage_highlightTwo")
  from_HomePage_highlightThree HomePage[]    @relation("HomePage_highlightThree")

  @@index([linkedItemId])
}

model HomePage {
  id               Int        @id
  heroImage        String?
  title            String     @unique @default("")
  description      String     @default("")
  toolbeltOne      Highlight? @relation("HomePage_toolbeltOne", fields: [toolbeltOneId], references: [id])
  toolbeltOneId    String?    @map("toolbeltOne")
  toolbeltTwo      Highlight? @relation("HomePage_toolbeltTwo", fields: [toolbeltTwoId], references: [id])
  toolbeltTwoId    String?    @map("toolbeltTwo")
  toolbeltThree    Highlight? @relation("HomePage_toolbeltThree", fields: [toolbeltThreeId], references: [id])
  toolbeltThreeId  String?    @map("toolbeltThree")
  toolbeltFour     Highlight? @relation("HomePage_toolbeltFour", fields: [toolbeltFourId], references: [id])
  toolbeltFourId   String?    @map("toolbeltFour")
  highlightOne     Highlight? @relation("HomePage_highlightOne", fields: [highlightOneId], references: [id])
  highlightOneId   String?    @map("highlightOne")
  highlightTwo     Highlight? @relation("HomePage_highlightTwo", fields: [highlightTwoId], references: [id])
  highlightTwoId   String?    @map("highlightTwo")
  highlightThree   Highlight? @relation("HomePage_highlightThree", fields: [highlightThreeId], references: [id])
  highlightThreeId String?    @map("highlightThree")
  createdAt        DateTime?  @default(now())
  updatedAt        DateTime?  @default(now()) @updatedAt

  @@index([toolbeltOneId])
  @@index([toolbeltTwoId])
  @@index([toolbeltThreeId])
  @@index([toolbeltFourId])
  @@index([highlightOneId])
  @@index([highlightTwoId])
  @@index([highlightThreeId])
}

model Image {
  id                                 String                    @id @default(cuid())
  title                              String                    @unique @default("")
  description                        String                    @default("")
  tags                               Tag[]                     @relation("Image_tags")
  file_id                            String?
  file_filesize                      Int?
  file_width                         Int?
  file_height                        Int?
  file_extension                     String?
  from_AssemblyDistrict_photo        AssemblyDistrict[]        @relation("AssemblyDistrict_photo")
  from_AssemblyDistrictDraft_photo   AssemblyDistrictDraft[]   @relation("AssemblyDistrictDraft_photo")
  from_AssemblyDistrictVersion_photo AssemblyDistrictVersion[] @relation("AssemblyDistrictVersion_photo")
}

model InternalLink {
  id                               String                @id @default(cuid())
  label                            String                @default("")
  selectItem                       Json?
  from_Highlight_linkedItem        Highlight[]           @relation("Highlight_linkedItem")
  from_PublicNotice_actions        PublicNotice[]        @relation("PublicNotice_actions")
  from_PublicNoticeDraft_actions   PublicNoticeDraft[]   @relation("PublicNoticeDraft_actions")
  from_PublicNoticeVersion_actions PublicNoticeVersion[] @relation("PublicNoticeVersion_actions")
}

model Location {
  id                    String     @id @default(cuid())
  title                 String     @unique @default("")
  description           String     @default("")
  lineOne               String     @default("")
  lineTwo               String     @default("")
  city                  String     @default("")
  state                 String     @default("AK")
  zip                   String
  from_Facility_address Facility[] @relation("Facility_address")
  from_Park_address     Park[]     @relation("Park_address")
  from_Trail_address    Trail[]    @relation("Trail_address")
}

model OrgUnit {
  id                                String                @id @default(cuid())
  heroImage                         String?
  title                             String                @unique @default("")
  description                       String                @default("")
  publishAt                         DateTime?
  unpublishAt                       DateTime?
  reviewDate                        DateTime?
  slug                              String                @unique @default("")
  owner                             User?                 @relation("OrgUnit_owner", fields: [ownerId], references: [id])
  ownerId                           String?               @map("owner")
  body                              String?
  tags                              Tag[]                 @relation("OrgUnit_tags")
  userGroups                        UserGroup[]           @relation("OrgUnit_userGroups")
  contacts                          Contact[]             @relation("OrgUnit_contacts")
  createdAt                         DateTime?             @default(now())
  updatedAt                         DateTime?             @default(now()) @updatedAt
  showPage                          Boolean               @default(true)
  children                          OrgUnit[]             @relation("OrgUnit_parent")
  parent                            OrgUnit?              @relation("OrgUnit_parent", fields: [parentId], references: [id])
  parentId                          String?               @map("parent")
  from_PublicNotice_orgUnits        PublicNotice[]        @relation("PublicNotice_orgUnits")
  from_PublicNoticeDraft_orgUnits   PublicNoticeDraft[]   @relation("PublicNoticeDraft_orgUnits")
  from_PublicNoticeVersion_orgUnits PublicNoticeVersion[] @relation("PublicNoticeVersion_orgUnits")
  from_Service_orgUnits             Service[]             @relation("Service_orgUnits")
  from_ServiceDraft_orgUnits        ServiceDraft[]        @relation("ServiceDraft_orgUnits")
  from_ServiceVersion_orgUnits      ServiceVersion[]      @relation("ServiceVersion_orgUnits")

  @@index([ownerId])
  @@index([parentId])
}

model OperatingHour {
  id                  String     @id @default(cuid())
  day                 String
  open                String     @default("")
  close               String     @default("")
  from_Facility_hours Facility[] @relation("Facility_hours")
  from_Park_hours     Park[]     @relation("Park_hours")
}

model Park {
  id                             String                @id @default(cuid())
  heroImage                      String?
  title                          String                @unique @default("")
  description                    String                @default("")
  publishAt                      DateTime?
  unpublishAt                    DateTime?
  reviewDate                     DateTime?
  slug                           String                @unique @default("")
  owner                          User?                 @relation("Park_owner", fields: [ownerId], references: [id])
  ownerId                        String?               @map("owner")
  body                           String?
  tags                           Tag[]                 @relation("Park_tags")
  userGroups                     UserGroup[]           @relation("Park_userGroups")
  address                        Location?             @relation("Park_address", fields: [addressId], references: [id])
  addressId                      String?               @map("address")
  contacts                       Contact[]             @relation("Park_contacts")
  hours                          OperatingHour[]       @relation("Park_hours")
  createdAt                      DateTime?             @default(now())
  updatedAt                      DateTime?             @default(now()) @updatedAt
  services                       Service[]             @relation("Park_services")
  trails                         Trail[]               @relation("Trail_park")
  facilities                     Facility[]            @relation("Facility_park")
  from_PublicNotice_parks        PublicNotice[]        @relation("PublicNotice_parks")
  from_PublicNoticeDraft_parks   PublicNoticeDraft[]   @relation("PublicNoticeDraft_parks")
  from_PublicNoticeVersion_parks PublicNoticeVersion[] @relation("PublicNoticeVersion_parks")
  from_ServiceDraft_parks        ServiceDraft[]        @relation("ServiceDraft_parks")
  from_ServiceVersion_parks      ServiceVersion[]      @relation("ServiceVersion_parks")

  @@index([ownerId])
  @@index([addressId])
}

model PublicNotice {
  id                String                @id @default(cuid())
  heroImage         String?
  title             String                @unique @default("")
  description       String                @default("")
  publishAt         DateTime?
  unpublishAt       DateTime?
  reviewDate        DateTime?
  slug              String                @unique @default("")
  owner             User?                 @relation("PublicNotice_owner", fields: [ownerId], references: [id])
  ownerId           String?               @map("owner")
  body              String?
  tags              Tag[]                 @relation("PublicNotice_tags")
  userGroups        UserGroup[]           @relation("PublicNotice_userGroups")
  actions           InternalLink?         @relation("PublicNotice_actions", fields: [actionsId], references: [id])
  actionsId         String?               @map("actions")
  documents         Document[]            @relation("PublicNotice_documents")
  contacts          Contact[]             @relation("PublicNotice_contacts")
  createdAt         DateTime?             @default(now())
  updatedAt         DateTime?             @default(now()) @updatedAt
  urgency           Int                   @default(2)
  effectiveDate     DateTime?
  endDate           DateTime?
  parks             Park[]                @relation("PublicNotice_parks")
  services          Service[]             @relation("PublicNotice_services")
  orgUnits          OrgUnit[]             @relation("PublicNotice_orgUnits")
  facilities        Facility[]            @relation("PublicNotice_facilities")
  trails            Trail[]               @relation("PublicNotice_trails")
  communities       Community[]           @relation("PublicNotice_communities")
  assemblyDistricts AssemblyDistrict[]    @relation("PublicNotice_assemblyDistricts")
  status            String                @default("unpublished")
  drafts            PublicNoticeDraft[]   @relation("PublicNoticeDraft_original")
  makeDrafts        String?
  versions          PublicNoticeVersion[] @relation("PublicNoticeVersion_original")
  currentVersion    PublicNoticeVersion?  @relation("PublicNotice_currentVersion", fields: [currentVersionId], references: [id])
  currentVersionId  String?               @unique @map("currentVersion")

  @@index([ownerId])
  @@index([actionsId])
}

model PublicNoticeDraft {
  id                String             @id @default(cuid())
  original          PublicNotice?      @relation("PublicNoticeDraft_original", fields: [originalId], references: [id])
  originalId        String?            @map("original")
  heroImage         String?
  title             String             @default("")
  description       String             @default("")
  publishAt         DateTime?
  unpublishAt       DateTime?
  reviewDate        DateTime?
  owner             User?              @relation("PublicNoticeDraft_owner", fields: [ownerId], references: [id])
  ownerId           String?            @map("owner")
  body              String?
  tags              Tag[]              @relation("PublicNoticeDraft_tags")
  userGroups        UserGroup[]        @relation("PublicNoticeDraft_userGroups")
  actions           InternalLink?      @relation("PublicNoticeDraft_actions", fields: [actionsId], references: [id])
  actionsId         String?            @map("actions")
  documents         Document[]         @relation("PublicNoticeDraft_documents")
  contacts          Contact[]          @relation("PublicNoticeDraft_contacts")
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt
  urgency           Int                @default(2)
  effectiveDate     DateTime?
  endDate           DateTime?
  parks             Park[]             @relation("PublicNoticeDraft_parks")
  services          Service[]          @relation("PublicNoticeDraft_services")
  orgUnits          OrgUnit[]          @relation("PublicNoticeDraft_orgUnits")
  facilities        Facility[]         @relation("PublicNoticeDraft_facilities")
  trails            Trail[]            @relation("PublicNoticeDraft_trails")
  communities       Community[]        @relation("PublicNoticeDraft_communities")
  assemblyDistricts AssemblyDistrict[] @relation("PublicNoticeDraft_assemblyDistricts")
  publish           String?

  @@index([originalId])
  @@index([ownerId])
  @@index([actionsId])
}

model PublicNoticeVersion {
  id                String             @id @default(cuid())
  original          PublicNotice?      @relation("PublicNoticeVersion_original", fields: [originalId], references: [id])
  originalId        String?            @map("original")
  heroImage         String?
  title             String             @default("")
  description       String             @default("")
  publishAt         DateTime?
  unpublishAt       DateTime?
  reviewDate        DateTime?
  owner             User?              @relation("PublicNoticeVersion_owner", fields: [ownerId], references: [id])
  ownerId           String?            @map("owner")
  body              String?
  tags              Tag[]              @relation("PublicNoticeVersion_tags")
  userGroups        UserGroup[]        @relation("PublicNoticeVersion_userGroups")
  actions           InternalLink?      @relation("PublicNoticeVersion_actions", fields: [actionsId], references: [id])
  actionsId         String?            @map("actions")
  documents         Document[]         @relation("PublicNoticeVersion_documents")
  contacts          Contact[]          @relation("PublicNoticeVersion_contacts")
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt
  urgency           Int                @default(2)
  effectiveDate     DateTime?
  endDate           DateTime?
  parks             Park[]             @relation("PublicNoticeVersion_parks")
  services          Service[]          @relation("PublicNoticeVersion_services")
  orgUnits          OrgUnit[]          @relation("PublicNoticeVersion_orgUnits")
  facilities        Facility[]         @relation("PublicNoticeVersion_facilities")
  trails            Trail[]            @relation("PublicNoticeVersion_trails")
  communities       Community[]        @relation("PublicNoticeVersion_communities")
  assemblyDistricts AssemblyDistrict[] @relation("PublicNoticeVersion_assemblyDistricts")
  isLive            PublicNotice?      @relation("PublicNotice_currentVersion")
  republish         String?

  @@index([originalId])
  @@index([ownerId])
  @@index([actionsId])
}

model Service {
  id                                String                @id @default(cuid())
  heroImage                         String?
  title                             String                @unique @default("")
  description                       String                @default("")
  publishAt                         DateTime?
  unpublishAt                       DateTime?
  reviewDate                        DateTime?
  slug                              String                @unique @default("")
  owner                             User?                 @relation("Service_owner", fields: [ownerId], references: [id])
  ownerId                           String?               @map("owner")
  body                              String?
  tags                              Tag[]                 @relation("Service_tags")
  userGroups                        UserGroup[]           @relation("Service_userGroups")
  contacts                          Contact[]             @relation("Service_contacts")
  createdAt                         DateTime?             @default(now())
  updatedAt                         DateTime?             @default(now()) @updatedAt
  communities                       Community[]           @relation("Community_services")
  orgUnits                          OrgUnit[]             @relation("Service_orgUnits")
  trails                            Trail[]               @relation("Service_trails")
  parks                             Park[]                @relation("Park_services")
  facilities                        Facility[]            @relation("Facility_services")
  editorNotes                       String                @default("")
  status                            String                @default("unpublished")
  drafts                            ServiceDraft[]        @relation("ServiceDraft_original")
  makeDrafts                        String?
  versions                          ServiceVersion[]      @relation("ServiceVersion_original")
  currentVersion                    ServiceVersion?       @relation("Service_currentVersion", fields: [currentVersionId], references: [id])
  currentVersionId                  String?               @unique @map("currentVersion")
  from_CommunityDraft_services      CommunityDraft[]      @relation("CommunityDraft_services")
  from_CommunityVersion_services    CommunityVersion[]    @relation("CommunityVersion_services")
  from_PublicNotice_services        PublicNotice[]        @relation("PublicNotice_services")
  from_PublicNoticeDraft_services   PublicNoticeDraft[]   @relation("PublicNoticeDraft_services")
  from_PublicNoticeVersion_services PublicNoticeVersion[] @relation("PublicNoticeVersion_services")

  @@index([ownerId])
}

model ServiceDraft {
  id          String      @id @default(cuid())
  original    Service?    @relation("ServiceDraft_original", fields: [originalId], references: [id])
  originalId  String?     @map("original")
  heroImage   String?
  title       String      @default("")
  description String      @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?       @relation("ServiceDraft_owner", fields: [ownerId], references: [id])
  ownerId     String?     @map("owner")
  body        String?
  tags        Tag[]       @relation("ServiceDraft_tags")
  userGroups  UserGroup[] @relation("ServiceDraft_userGroups")
  contacts    Contact[]   @relation("ServiceDraft_contacts")
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now()) @updatedAt
  communities Community[] @relation("ServiceDraft_communities")
  orgUnits    OrgUnit[]   @relation("ServiceDraft_orgUnits")
  trails      Trail[]     @relation("ServiceDraft_trails")
  parks       Park[]      @relation("ServiceDraft_parks")
  facilities  Facility[]  @relation("ServiceDraft_facilities")
  editorNotes String      @default("")
  publish     String?

  @@index([originalId])
  @@index([ownerId])
}

model ServiceVersion {
  id          String      @id @default(cuid())
  original    Service?    @relation("ServiceVersion_original", fields: [originalId], references: [id])
  originalId  String?     @map("original")
  heroImage   String?
  title       String      @default("")
  description String      @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?       @relation("ServiceVersion_owner", fields: [ownerId], references: [id])
  ownerId     String?     @map("owner")
  body        String?
  tags        Tag[]       @relation("ServiceVersion_tags")
  userGroups  UserGroup[] @relation("ServiceVersion_userGroups")
  contacts    Contact[]   @relation("ServiceVersion_contacts")
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now()) @updatedAt
  communities Community[] @relation("ServiceVersion_communities")
  orgUnits    OrgUnit[]   @relation("ServiceVersion_orgUnits")
  trails      Trail[]     @relation("ServiceVersion_trails")
  parks       Park[]      @relation("ServiceVersion_parks")
  facilities  Facility[]  @relation("ServiceVersion_facilities")
  editorNotes String      @default("")
  isLive      Service?    @relation("Service_currentVersion")
  republish   String?

  @@index([originalId])
  @@index([ownerId])
}

model Tag {
  id                                String                    @id @default(cuid())
  name                              String                    @default("")
  from_AssemblyDistrict_tags        AssemblyDistrict[]        @relation("AssemblyDistrict_tags")
  from_AssemblyDistrictDraft_tags   AssemblyDistrictDraft[]   @relation("AssemblyDistrictDraft_tags")
  from_AssemblyDistrictVersion_tags AssemblyDistrictVersion[] @relation("AssemblyDistrictVersion_tags")
  from_Community_tags               Community[]               @relation("Community_tags")
  from_CommunityDraft_tags          CommunityDraft[]          @relation("CommunityDraft_tags")
  from_CommunityVersion_tags        CommunityVersion[]        @relation("CommunityVersion_tags")
  from_Document_tags                Document[]                @relation("Document_tags")
  from_DocumentCollection_tags      DocumentCollection[]      @relation("DocumentCollection_tags")
  from_Facility_tags                Facility[]                @relation("Facility_tags")
  from_Image_tags                   Image[]                   @relation("Image_tags")
  from_OrgUnit_tags                 OrgUnit[]                 @relation("OrgUnit_tags")
  from_Park_tags                    Park[]                    @relation("Park_tags")
  from_PublicNotice_tags            PublicNotice[]            @relation("PublicNotice_tags")
  from_PublicNoticeDraft_tags       PublicNoticeDraft[]       @relation("PublicNoticeDraft_tags")
  from_PublicNoticeVersion_tags     PublicNoticeVersion[]     @relation("PublicNoticeVersion_tags")
  from_Service_tags                 Service[]                 @relation("Service_tags")
  from_ServiceDraft_tags            ServiceDraft[]            @relation("ServiceDraft_tags")
  from_ServiceVersion_tags          ServiceVersion[]          @relation("ServiceVersion_tags")
  from_Trail_tags                   Trail[]                   @relation("Trail_tags")
  from_TestModel_tags               TestModel[]               @relation("TestModel_tags")
  from_TestModelDraft_tags          TestModelDraft[]          @relation("TestModelDraft_tags")
  from_TestModelVersion_tags        TestModelVersion[]        @relation("TestModelVersion_tags")
}

model Trail {
  id                              String                @id @default(cuid())
  heroImage                       String?
  title                           String                @unique @default("")
  description                     String                @default("")
  publishAt                       DateTime?
  unpublishAt                     DateTime?
  reviewDate                      DateTime?
  slug                            String                @unique @default("")
  owner                           User?                 @relation("Trail_owner", fields: [ownerId], references: [id])
  ownerId                         String?               @map("owner")
  body                            String?
  tags                            Tag[]                 @relation("Trail_tags")
  userGroups                      UserGroup[]           @relation("Trail_userGroups")
  address                         Location?             @relation("Trail_address", fields: [addressId], references: [id])
  addressId                       String?               @map("address")
  contacts                        Contact[]             @relation("Trail_contacts")
  createdAt                       DateTime?             @default(now())
  updatedAt                       DateTime?             @default(now()) @updatedAt
  open                            Boolean               @default(false)
  summer                          Boolean               @default(false)
  fall                            Boolean               @default(false)
  winter                          Boolean               @default(false)
  spring                          Boolean               @default(false)
  hiking                          Boolean               @default(false)
  biking                          Boolean               @default(false)
  horsebackRiding                 Boolean               @default(false)
  crossCountrySkiing              Boolean               @default(false)
  snowshoeing                     Boolean               @default(false)
  frisbeeGolf                     Boolean               @default(false)
  dogWalking                      Boolean               @default(false)
  running                         Boolean               @default(false)
  snowMachining                   Boolean               @default(false)
  atv                             Boolean               @default(false)
  dirtBiking                      Boolean               @default(false)
  mushing                         Boolean               @default(false)
  difficulty                      String?
  length                          String                @default("")
  elevationChange                 String                @default("")
  services                        Service[]             @relation("Service_trails")
  park                            Park?                 @relation("Trail_park", fields: [parkId], references: [id])
  parkId                          String?               @map("park")
  from_PublicNotice_trails        PublicNotice[]        @relation("PublicNotice_trails")
  from_PublicNoticeDraft_trails   PublicNoticeDraft[]   @relation("PublicNoticeDraft_trails")
  from_PublicNoticeVersion_trails PublicNoticeVersion[] @relation("PublicNoticeVersion_trails")
  from_ServiceDraft_trails        ServiceDraft[]        @relation("ServiceDraft_trails")
  from_ServiceVersion_trails      ServiceVersion[]      @relation("ServiceVersion_trails")

  @@index([ownerId])
  @@index([addressId])
  @@index([parkId])
}

model Url {
  id                    String         @id @default(cuid())
  title                 String         @unique @default("")
  description           String         @default("")
  url                   String         @unique @default("")
  owner                 User?          @relation("Url_owner", fields: [ownerId], references: [id])
  ownerId               String?        @map("owner")
  createdAt             DateTime?      @default(now())
  updatedAt             DateTime?      @default(now()) @updatedAt
  from_ExternalLink_url ExternalLink[] @relation("ExternalLink_url")

  @@index([ownerId])
}

model User {
  id                                 String                    @id @default(cuid())
  authId                             String                    @unique @default("")
  name                               String                    @default("")
  email                              String                    @unique @default("")
  password                           String?
  role                               Int?                      @default(4)
  groups                             UserGroup[]               @relation("User_groups")
  createdAt                          DateTime?                 @default(now())
  updatedAt                          DateTime?                 @default(now()) @updatedAt
  from_AssemblyDistrict_owner        AssemblyDistrict[]        @relation("AssemblyDistrict_owner")
  from_AssemblyDistrictDraft_owner   AssemblyDistrictDraft[]   @relation("AssemblyDistrictDraft_owner")
  from_AssemblyDistrictVersion_owner AssemblyDistrictVersion[] @relation("AssemblyDistrictVersion_owner")
  from_Community_owner               Community[]               @relation("Community_owner")
  from_CommunityDraft_owner          CommunityDraft[]          @relation("CommunityDraft_owner")
  from_CommunityVersion_owner        CommunityVersion[]        @relation("CommunityVersion_owner")
  from_DocumentCollection_owner      DocumentCollection[]      @relation("DocumentCollection_owner")
  from_Facility_owner                Facility[]                @relation("Facility_owner")
  from_OrgUnit_owner                 OrgUnit[]                 @relation("OrgUnit_owner")
  from_Park_owner                    Park[]                    @relation("Park_owner")
  from_PublicNotice_owner            PublicNotice[]            @relation("PublicNotice_owner")
  from_PublicNoticeDraft_owner       PublicNoticeDraft[]       @relation("PublicNoticeDraft_owner")
  from_PublicNoticeVersion_owner     PublicNoticeVersion[]     @relation("PublicNoticeVersion_owner")
  from_Service_owner                 Service[]                 @relation("Service_owner")
  from_ServiceDraft_owner            ServiceDraft[]            @relation("ServiceDraft_owner")
  from_ServiceVersion_owner          ServiceVersion[]          @relation("ServiceVersion_owner")
  from_Trail_owner                   Trail[]                   @relation("Trail_owner")
  from_Url_owner                     Url[]                     @relation("Url_owner")
  from_UserGroup_owner               UserGroup[]               @relation("UserGroup_owner")
  from_TestModel_owner               TestModel[]               @relation("TestModel_owner")
  from_TestModelDraft_owner          TestModelDraft[]          @relation("TestModelDraft_owner")
  from_TestModelVersion_owner        TestModelVersion[]        @relation("TestModelVersion_owner")
}

model UserGroup {
  id                                      String                    @id @default(cuid())
  name                                    String                    @default("")
  owner                                   User?                     @relation("UserGroup_owner", fields: [ownerId], references: [id])
  ownerId                                 String?                   @map("owner")
  description                             String                    @default("")
  users                                   User[]                    @relation("User_groups")
  from_AssemblyDistrict_userGroups        AssemblyDistrict[]        @relation("AssemblyDistrict_userGroups")
  from_AssemblyDistrictDraft_userGroups   AssemblyDistrictDraft[]   @relation("AssemblyDistrictDraft_userGroups")
  from_AssemblyDistrictVersion_userGroups AssemblyDistrictVersion[] @relation("AssemblyDistrictVersion_userGroups")
  from_Community_userGroups               Community[]               @relation("Community_userGroups")
  from_CommunityDraft_userGroups          CommunityDraft[]          @relation("CommunityDraft_userGroups")
  from_CommunityVersion_userGroups        CommunityVersion[]        @relation("CommunityVersion_userGroups")
  from_DocumentCollection_userGroups      DocumentCollection[]      @relation("DocumentCollection_userGroups")
  from_Facility_userGroups                Facility[]                @relation("Facility_userGroups")
  from_OrgUnit_userGroups                 OrgUnit[]                 @relation("OrgUnit_userGroups")
  from_Park_userGroups                    Park[]                    @relation("Park_userGroups")
  from_PublicNotice_userGroups            PublicNotice[]            @relation("PublicNotice_userGroups")
  from_PublicNoticeDraft_userGroups       PublicNoticeDraft[]       @relation("PublicNoticeDraft_userGroups")
  from_PublicNoticeVersion_userGroups     PublicNoticeVersion[]     @relation("PublicNoticeVersion_userGroups")
  from_Service_userGroups                 Service[]                 @relation("Service_userGroups")
  from_ServiceDraft_userGroups            ServiceDraft[]            @relation("ServiceDraft_userGroups")
  from_ServiceVersion_userGroups          ServiceVersion[]          @relation("ServiceVersion_userGroups")
  from_Trail_userGroups                   Trail[]                   @relation("Trail_userGroups")
  from_TestModel_userGroups               TestModel[]               @relation("TestModel_userGroups")
  from_TestModelDraft_userGroups          TestModelDraft[]          @relation("TestModelDraft_userGroups")
  from_TestModelVersion_userGroups        TestModelVersion[]        @relation("TestModelVersion_userGroups")

  @@index([ownerId])
}

model TestModel {
  id               String             @id @default(cuid())
  heroImage        String?
  title            String             @unique @default("")
  description      String             @default("")
  publishAt        DateTime?
  unpublishAt      DateTime?
  reviewDate       DateTime?
  slug             String             @unique @default("")
  owner            User?              @relation("TestModel_owner", fields: [ownerId], references: [id])
  ownerId          String?            @map("owner")
  body             String?
  tags             Tag[]              @relation("TestModel_tags")
  userGroups       UserGroup[]        @relation("TestModel_userGroups")
  contacts         Contact[]          @relation("TestModel_contacts")
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @default(now()) @updatedAt
  status           String             @default("unpublished")
  drafts           TestModelDraft[]   @relation("TestModelDraft_original")
  makeDrafts       String?
  versions         TestModelVersion[] @relation("TestModelVersion_original")
  currentVersion   TestModelVersion?  @relation("TestModel_currentVersion", fields: [currentVersionId], references: [id])
  currentVersionId String?            @unique @map("currentVersion")

  @@index([ownerId])
}

model TestModelDraft {
  id          String      @id @default(cuid())
  original    TestModel?  @relation("TestModelDraft_original", fields: [originalId], references: [id])
  originalId  String?     @map("original")
  heroImage   String?
  title       String      @default("")
  description String      @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?       @relation("TestModelDraft_owner", fields: [ownerId], references: [id])
  ownerId     String?     @map("owner")
  body        String?
  tags        Tag[]       @relation("TestModelDraft_tags")
  userGroups  UserGroup[] @relation("TestModelDraft_userGroups")
  contacts    Contact[]   @relation("TestModelDraft_contacts")
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now()) @updatedAt
  publish     String?

  @@index([originalId])
  @@index([ownerId])
}

model TestModelVersion {
  id          String      @id @default(cuid())
  original    TestModel?  @relation("TestModelVersion_original", fields: [originalId], references: [id])
  originalId  String?     @map("original")
  heroImage   String?
  title       String      @default("")
  description String      @default("")
  publishAt   DateTime?
  unpublishAt DateTime?
  reviewDate  DateTime?
  owner       User?       @relation("TestModelVersion_owner", fields: [ownerId], references: [id])
  ownerId     String?     @map("owner")
  body        String?
  tags        Tag[]       @relation("TestModelVersion_tags")
  userGroups  UserGroup[] @relation("TestModelVersion_userGroups")
  contacts    Contact[]   @relation("TestModelVersion_contacts")
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now()) @updatedAt
  isLive      TestModel?  @relation("TestModel_currentVersion")
  republish   String?

  @@index([originalId])
  @@index([ownerId])
}
